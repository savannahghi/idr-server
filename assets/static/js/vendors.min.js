!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(e.document)return t(e);throw new Error("jQuery requires a window with a document")}:t(e)}("undefined"!=typeof window?window:this,function(w,M){"use strict";function y(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item}function g(e){return null!=e&&e===e.window}var t=[],P=Object.getPrototypeOf,a=t.slice,z=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},F=t.push,$=t.indexOf,U={},B=U.toString,H=U.hasOwnProperty,q=H.toString,W=q.call(Object),m={},x=w.document,V={type:!0,src:!0,nonce:!0,noModule:!0};function Y(e,t,n){var i,r,s=(n=n||x).createElement("script");if(s.text=e,t)for(i in V)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&s.setAttribute(i,r);n.head.appendChild(s).parentNode.removeChild(s)}function p(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?U[B.call(e)]||"object":typeof e}var e="3.6.0",C=function(e,t){return new C.fn.init(e,t)};function Z(e){var t=!!e&&"length"in e&&e.length,n=p(e);return!y(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}C.fn=C.prototype={jquery:e,constructor:C,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){e=C.merge(this.constructor(),e);return e.prevObject=this,e},each:function(e){return C.each(this,e)},map:function(n){return this.pushStack(C.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(C.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,e=+e+(e<0?t:0);return this.pushStack(0<=e&&e<t?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:F,sort:t.sort,splice:t.splice},C.extend=C.fn.extend=function(){var e,t,n,i,r,s=arguments[0]||{},o=1,a=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[o]||{},o++),"object"==typeof s||y(s)||(s={}),o===a&&(s=this,o--);o<a;o++)if(null!=(e=arguments[o]))for(t in e)n=e[t],"__proto__"!==t&&s!==n&&(l&&n&&(C.isPlainObject(n)||(i=Array.isArray(n)))?(r=s[t],r=i&&!Array.isArray(r)?[]:i||C.isPlainObject(r)?r:{},i=!1,s[t]=C.extend(l,r,n)):void 0!==n&&(s[t]=n));return s},C.extend({expando:"jQuery"+(e+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){return!(!e||"[object Object]"!==B.call(e))&&(!(e=P(e))||"function"==typeof(e=H.call(e,"constructor")&&e.constructor)&&q.call(e)===W)},isEmptyObject:function(e){for(var t in e)return!1;return!0},globalEval:function(e,t,n){Y(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(Z(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){t=t||[];return null!=e&&(Z(Object(e))?C.merge(t,"string"==typeof e?[e]:e):F.call(t,e)),t},inArray:function(e,t,n){return null==t?-1:$.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,s=e.length,o=!n;r<s;r++)!t(e[r],r)!=o&&i.push(e[r]);return i},map:function(e,t,n){var i,r,s=0,o=[];if(Z(e))for(i=e.length;s<i;s++)null!=(r=t(e[s],s,n))&&o.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&o.push(r);return z(o)},guid:1,support:m}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=t[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){U["[object "+t+"]"]=t.toLowerCase()});function i(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&C(e).is(n))break;i.push(e)}return i}function K(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var e=function(M){function h(e,t){return e="0x"+e.slice(1)-65536,t||(e<0?String.fromCharCode(65536+e):String.fromCharCode(e>>10|55296,1023&e|56320))}function P(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}function z(){x()}var e,d,b,s,F,f,$,U,w,l,u,x,C,n,k,p,i,r,g,E="sizzle"+ +new Date,c=M.document,D=0,B=0,H=I(),q=I(),W=I(),m=I(),V=function(e,t){return e===t&&(u=!0),0},Y={}.hasOwnProperty,t=[],Z=t.pop,K=t.push,T=t.push,G=t.slice,y=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},Q="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",o="[\\x20\\t\\r\\n\\f]",a="(?:\\\\[\\da-fA-F]{1,6}"+o+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",X="\\["+o+"*("+a+")(?:"+o+"*([*^$|!~]?=)"+o+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+a+"))|)"+o+"*\\]",J=":("+a+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+X+")*)|.*)\\)|)",ee=new RegExp(o+"+","g"),v=new RegExp("^"+o+"+|((?:^|[^\\\\])(?:\\\\.)*)"+o+"+$","g"),te=new RegExp("^"+o+"*,"+o+"*"),ne=new RegExp("^"+o+"*([>+~]|"+o+")"+o+"*"),ie=new RegExp(o+"|>"),re=new RegExp(J),se=new RegExp("^"+a+"$"),_={ID:new RegExp("^#("+a+")"),CLASS:new RegExp("^\\.("+a+")"),TAG:new RegExp("^("+a+"|[*])"),ATTR:new RegExp("^"+X),PSEUDO:new RegExp("^"+J),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+o+"*(even|odd|(([+-]|)(\\d*)n|)"+o+"*(?:([+-]|)"+o+"*(\\d+)|))"+o+"*\\)|)","i"),bool:new RegExp("^(?:"+Q+")$","i"),needsContext:new RegExp("^"+o+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+o+"*((?:-\\d)?\\d*)"+o+"*\\)|)(?=[^-]|$)","i")},oe=/HTML$/i,ae=/^(?:input|select|textarea|button)$/i,le=/^h\d$/i,S=/^[^{]+\{\s*\[native \w/,ue=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ce=/[+~]/,A=new RegExp("\\\\[\\da-fA-F]{1,6}"+o+"?|\\\\([^\\r\\n\\f])","g"),he=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,de=ye(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{T.apply(t=G.call(c.childNodes),c.childNodes),t[c.childNodes.length].nodeType}catch(e){T={apply:t.length?function(e,t){K.apply(e,G.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function O(t,e,n,i){var r,s,o,a,l,u,c=e&&e.ownerDocument,h=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==h&&9!==h&&11!==h)return n;if(!i&&(x(e),e=e||C,k)){if(11!==h&&(a=ue.exec(t)))if(r=a[1]){if(9===h){if(!(u=e.getElementById(r)))return n;if(u.id===r)return n.push(u),n}else if(c&&(u=c.getElementById(r))&&g(e,u)&&u.id===r)return n.push(u),n}else{if(a[2])return T.apply(n,e.getElementsByTagName(t)),n;if((r=a[3])&&d.getElementsByClassName&&e.getElementsByClassName)return T.apply(n,e.getElementsByClassName(r)),n}if(d.qsa&&!m[t+" "]&&(!p||!p.test(t))&&(1!==h||"object"!==e.nodeName.toLowerCase())){if(u=t,c=e,1===h&&(ie.test(t)||ne.test(t))){for((c=ce.test(t)&&me(e.parentNode)||e)===e&&d.scope||((o=e.getAttribute("id"))?o=o.replace(he,P):e.setAttribute("id",o=E)),s=(l=f(t)).length;s--;)l[s]=(o?"#"+o:":scope")+" "+R(l[s]);u=l.join(",")}try{return T.apply(n,c.querySelectorAll(u)),n}catch(e){m(t,!0)}finally{o===E&&e.removeAttribute("id")}}}return U(t.replace(v,"$1"),e,n,i)}function I(){var n=[];function i(e,t){return n.push(e+" ")>b.cacheLength&&delete i[n.shift()],i[e+" "]=t}return i}function N(e){return e[E]=!0,e}function L(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t)}}function fe(e,t){for(var n=e.split("|"),i=n.length;i--;)b.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&de(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function j(o){return N(function(s){return s=+s,N(function(e,t){for(var n,i=o([],e.length,s),r=i.length;r--;)e[n=i[r]]&&(e[n]=!(t[n]=e[n]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in d=O.support={},F=O.isXML=function(e){var t=e&&e.namespaceURI,e=e&&(e.ownerDocument||e).documentElement;return!oe.test(t||e&&e.nodeName||"HTML")},x=O.setDocument=function(e){var e=e?e.ownerDocument||e:c;return e!=C&&9===e.nodeType&&e.documentElement&&(n=(C=e).documentElement,k=!F(C),c!=C&&(e=C.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",z,!1):e.attachEvent&&e.attachEvent("onunload",z)),d.scope=L(function(e){return n.appendChild(e).appendChild(C.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),d.attributes=L(function(e){return e.className="i",!e.getAttribute("className")}),d.getElementsByTagName=L(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),d.getElementsByClassName=S.test(C.getElementsByClassName),d.getById=L(function(e){return n.appendChild(e).id=E,!C.getElementsByName||!C.getElementsByName(E).length}),d.getById?(b.filter.ID=function(e){var t=e.replace(A,h);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&k)return(t=t.getElementById(e))?[t]:[]}):(b.filter.ID=function(e){var t=e.replace(A,h);return function(e){e=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return e&&e.value===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&k){var n,i,r,s=t.getElementById(e);if(s){if((n=s.getAttributeNode("id"))&&n.value===e)return[s];for(r=t.getElementsByName(e),i=0;s=r[i++];)if((n=s.getAttributeNode("id"))&&n.value===e)return[s]}return[]}}),b.find.TAG=d.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):d.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,s=t.getElementsByTagName(e);if("*"!==e)return s;for(;n=s[r++];)1===n.nodeType&&i.push(n);return i},b.find.CLASS=d.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&k)return t.getElementsByClassName(e)},i=[],p=[],(d.qsa=S.test(C.querySelectorAll))&&(L(function(e){var t;n.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&p.push("[*^$]="+o+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||p.push("\\["+o+"*(?:value|"+Q+")"),e.querySelectorAll("[id~="+E+"-]").length||p.push("~="),(t=C.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||p.push("\\["+o+"*name"+o+"*="+o+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||p.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||p.push(".#.+[+~]"),e.querySelectorAll("\\\f"),p.push("[\\r\\n\\f]")}),L(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&p.push("name"+o+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&p.push(":enabled",":disabled"),n.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),p.push(",.*:")})),(d.matchesSelector=S.test(r=n.matches||n.webkitMatchesSelector||n.mozMatchesSelector||n.oMatchesSelector||n.msMatchesSelector))&&L(function(e){d.disconnectedMatch=r.call(e,"*"),r.call(e,"[s!='']:x"),i.push("!=",J)}),p=p.length&&new RegExp(p.join("|")),i=i.length&&new RegExp(i.join("|")),e=S.test(n.compareDocumentPosition),g=e||S.test(n.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,t=t&&t.parentNode;return e===t||!(!t||1!==t.nodeType||!(n.contains?n.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},V=e?function(e,t){if(e===t)return u=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!d.sortDetached&&t.compareDocumentPosition(e)===n?e==C||e.ownerDocument==c&&g(c,e)?-1:t==C||t.ownerDocument==c&&g(c,t)?1:l?y(l,e)-y(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,i=0,r=e.parentNode,s=t.parentNode,o=[e],a=[t];if(!r||!s)return e==C?-1:t==C?1:r?-1:s?1:l?y(l,e)-y(l,t):0;if(r===s)return pe(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;o[i]===a[i];)i++;return i?pe(o[i],a[i]):o[i]==c?-1:a[i]==c?1:0}),C},O.matches=function(e,t){return O(e,null,null,t)},O.matchesSelector=function(e,t){if(x(e),d.matchesSelector&&k&&!m[t+" "]&&(!i||!i.test(t))&&(!p||!p.test(t)))try{var n=r.call(e,t);if(n||d.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){m(t,!0)}return 0<O(t,C,null,[e]).length},O.contains=function(e,t){return(e.ownerDocument||e)!=C&&x(e),g(e,t)},O.attr=function(e,t){(e.ownerDocument||e)!=C&&x(e);var n=b.attrHandle[t.toLowerCase()],n=n&&Y.call(b.attrHandle,t.toLowerCase())?n(e,t,!k):void 0;return void 0!==n?n:d.attributes||!k?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},O.escape=function(e){return(e+"").replace(he,P)},O.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},O.uniqueSort=function(e){var t,n=[],i=0,r=0;if(u=!d.detectDuplicates,l=!d.sortStable&&e.slice(0),e.sort(V),u){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return l=null,e},s=O.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=s(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=s(t);return n},(b=O.selectors={cacheLength:50,createPseudo:N,match:_,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(A,h),e[3]=(e[3]||e[4]||e[5]||"").replace(A,h),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||O.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&O.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return _.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&re.test(n)&&(t=f(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(A,h).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=H[e+" "];return t||(t=new RegExp("(^|"+o+")"+e+"("+o+"|$)"))&&H(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(e){e=O.attr(e,t);return null==e?"!="===n:!n||(e+="","="===n?e===i:"!="===n?e!==i:"^="===n?i&&0===e.indexOf(i):"*="===n?i&&-1<e.indexOf(i):"$="===n?i&&e.slice(-i.length)===i:"~="===n?-1<(" "+e.replace(ee," ")+" ").indexOf(i):"|="===n&&(e===i||e.slice(0,i.length+1)===i+"-"))}},CHILD:function(p,e,t,g,m){var v="nth"!==p.slice(0,3),y="last"!==p.slice(-4),_="of-type"===e;return 1===g&&0===m?function(e){return!!e.parentNode}:function(e,t,n){var i,r,s,o,a,l,u=v!=y?"nextSibling":"previousSibling",c=e.parentNode,h=_&&e.nodeName.toLowerCase(),d=!n&&!_,f=!1;if(c){if(v){for(;u;){for(o=e;o=o[u];)if(_?o.nodeName.toLowerCase()===h:1===o.nodeType)return!1;l=u="only"===p&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&d){for(f=(a=(i=(r=(s=(o=c)[E]||(o[E]={}))[o.uniqueID]||(s[o.uniqueID]={}))[p]||[])[0]===D&&i[1])&&i[2],o=a&&c.childNodes[a];o=++a&&o&&o[u]||(f=a=0)||l.pop();)if(1===o.nodeType&&++f&&o===e){r[p]=[D,a,f];break}}else if(!1===(f=d?a=(i=(r=(s=(o=e)[E]||(o[E]={}))[o.uniqueID]||(s[o.uniqueID]={}))[p]||[])[0]===D&&i[1]:f))for(;(o=++a&&o&&o[u]||(f=a=0)||l.pop())&&((_?o.nodeName.toLowerCase()!==h:1!==o.nodeType)||!++f||(d&&((r=(s=o[E]||(o[E]={}))[o.uniqueID]||(s[o.uniqueID]={}))[p]=[D,f]),o!==e)););return(f-=m)===g||f%g==0&&0<=f/g}}},PSEUDO:function(e,s){var t,o=b.pseudos[e]||b.setFilters[e.toLowerCase()]||O.error("unsupported pseudo: "+e);return o[E]?o(s):1<o.length?(t=[e,e,"",s],b.setFilters.hasOwnProperty(e.toLowerCase())?N(function(e,t){for(var n,i=o(e,s),r=i.length;r--;)e[n=y(e,i[r])]=!(t[n]=i[r])}):function(e){return o(e,0,t)}):o}},pseudos:{not:N(function(e){var i=[],r=[],a=$(e.replace(v,"$1"));return a[E]?N(function(e,t,n,i){for(var r,s=a(e,null,i,[]),o=e.length;o--;)(r=s[o])&&(e[o]=!(t[o]=r))}):function(e,t,n){return i[0]=e,a(i,null,n,r),i[0]=null,!r.pop()}}),has:N(function(t){return function(e){return 0<O(t,e).length}}),contains:N(function(t){return t=t.replace(A,h),function(e){return-1<(e.textContent||s(e)).indexOf(t)}}),lang:N(function(n){return se.test(n||"")||O.error("unsupported lang: "+n),n=n.replace(A,h).toLowerCase(),function(e){var t;do{if(t=k?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=M.location&&M.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===n},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return le.test(e.nodeName)},input:function(e){return ae.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(e=e.getAttribute("type"))||"text"===e.toLowerCase())},first:j(function(){return[0]}),last:j(function(e,t){return[t-1]}),eq:j(function(e,t,n){return[n<0?n+t:n]}),even:j(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:j(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:j(function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e}),gt:j(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function ve(){}function R(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(o,e,t){var a=e.dir,l=e.next,u=l||a,c=t&&"parentNode"===u,h=B++;return e.first?function(e,t,n){for(;e=e[a];)if(1===e.nodeType||c)return o(e,t,n);return!1}:function(e,t,n){var i,r,s=[D,h];if(n){for(;e=e[a];)if((1===e.nodeType||c)&&o(e,t,n))return!0}else for(;e=e[a];)if(1===e.nodeType||c)if(r=(r=e[E]||(e[E]={}))[e.uniqueID]||(r[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[a]||e;else{if((i=r[u])&&i[0]===D&&i[1]===h)return s[2]=i[2];if((r[u]=s)[2]=o(e,t,n))return!0}return!1}}function _e(r){return 1<r.length?function(e,t,n){for(var i=r.length;i--;)if(!r[i](e,t,n))return!1;return!0}:r[0]}function be(e,t,n,i,r){for(var s,o=[],a=0,l=e.length,u=null!=t;a<l;a++)!(s=e[a])||n&&!n(s,i,r)||(o.push(s),u&&t.push(a));return o}function we(f,p,g,m,v,e){return m&&!m[E]&&(m=we(m)),v&&!v[E]&&(v=we(v,e)),N(function(e,t,n,i){var r,s,o,a=[],l=[],u=t.length,c=e||function(e,t,n){for(var i=0,r=t.length;i<r;i++)O(e,t[i],n);return n}(p||"*",n.nodeType?[n]:n,[]),h=!f||!e&&p?c:be(c,a,f,n,i),d=g?v||(e?f:u||m)?[]:t:h;if(g&&g(h,d,n,i),m)for(r=be(d,l),m(r,[],n,i),s=r.length;s--;)(o=r[s])&&(d[l[s]]=!(h[l[s]]=o));if(e){if(v||f){if(v){for(r=[],s=d.length;s--;)(o=d[s])&&r.push(h[s]=o);v(null,d=[],r,i)}for(s=d.length;s--;)(o=d[s])&&-1<(r=v?y(e,o):a[s])&&(e[r]=!(t[r]=o))}}else d=be(d===t?d.splice(u,d.length):d),v?v(null,t,d,i):T.apply(t,d)})}function xe(m,v){function e(e,t,n,i,r){var s,o,a,l=0,u="0",c=e&&[],h=[],d=w,f=e||_&&b.find.TAG("*",r),p=D+=null==d?1:Math.random()||.1,g=f.length;for(r&&(w=t==C||t||r);u!==g&&null!=(s=f[u]);u++){if(_&&s){for(o=0,t||s.ownerDocument==C||(x(s),n=!k);a=m[o++];)if(a(s,t||C,n)){i.push(s);break}r&&(D=p)}y&&((s=!a&&s)&&l--,e&&c.push(s))}if(l+=u,y&&u!==l){for(o=0;a=v[o++];)a(c,h,t,n);if(e){if(0<l)for(;u--;)c[u]||h[u]||(h[u]=Z.call(i));h=be(h)}T.apply(i,h),r&&!e&&0<h.length&&1<l+v.length&&O.uniqueSort(i)}return r&&(D=p,w=d),c}var y=0<v.length,_=0<m.length;return y?N(e):e}return ve.prototype=b.filters=b.pseudos,b.setFilters=new ve,f=O.tokenize=function(e,t){var n,i,r,s,o,a,l,u=q[e+" "];if(u)return t?0:u.slice(0);for(o=e,a=[],l=b.preFilter;o;){for(s in n&&!(i=te.exec(o))||(i&&(o=o.slice(i[0].length)||o),a.push(r=[])),n=!1,(i=ne.exec(o))&&(n=i.shift(),r.push({value:n,type:i[0].replace(v," ")}),o=o.slice(n.length)),b.filter)!(i=_[s].exec(o))||l[s]&&!(i=l[s](i))||(n=i.shift(),r.push({value:n,type:s,matches:i}),o=o.slice(n.length));if(!n)break}return t?o.length:o?O.error(e):q(e,a).slice(0)},$=O.compile=function(e,t){var n,i=[],r=[],s=W[e+" "];if(!s){for(n=(t=t||f(e)).length;n--;)((s=function e(t){for(var i,n,r,s=t.length,o=b.relative[t[0].type],a=o||b.relative[" "],l=o?1:0,u=ye(function(e){return e===i},a,!0),c=ye(function(e){return-1<y(i,e)},a,!0),h=[function(e,t,n){return e=!o&&(n||t!==w)||((i=t).nodeType?u:c)(e,t,n),i=null,e}];l<s;l++)if(n=b.relative[t[l].type])h=[ye(_e(h),n)];else{if((n=b.filter[t[l].type].apply(null,t[l].matches))[E]){for(r=++l;r<s&&!b.relative[t[r].type];r++);return we(1<l&&_e(h),1<l&&R(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(v,"$1"),n,l<r&&e(t.slice(l,r)),r<s&&e(t=t.slice(r)),r<s&&R(t))}h.push(n)}return _e(h)}(t[n]))[E]?i:r).push(s);(s=W(e,xe(r,i))).selector=e}return s},U=O.select=function(e,t,n,i){var r,s,o,a,l,u="function"==typeof e&&e,c=!i&&f(e=u.selector||e);if(n=n||[],1===c.length){if(2<(s=c[0]=c[0].slice(0)).length&&"ID"===(o=s[0]).type&&9===t.nodeType&&k&&b.relative[s[1].type]){if(!(t=(b.find.ID(o.matches[0].replace(A,h),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(s.shift().value.length)}for(r=_.needsContext.test(e)?0:s.length;r--&&(o=s[r],!b.relative[a=o.type]);)if((l=b.find[a])&&(i=l(o.matches[0].replace(A,h),ce.test(s[0].type)&&me(t.parentNode)||t))){if(s.splice(r,1),e=i.length&&R(s))break;return T.apply(n,i),n}}return(u||$(e,c))(i,t,!k,n,!t||ce.test(e)&&me(t.parentNode)||t),n},d.sortStable=E.split("").sort(V).join("")===E,d.detectDuplicates=!!u,x(),d.sortDetached=L(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),L(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),d.attributes&&L(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),L(function(e){return null==e.getAttribute("disabled")})||fe(Q,function(e,t,n){if(!n)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),O}(w),G=(C.find=e,C.expr=e.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=e.uniqueSort,C.text=e.getText,C.isXMLDoc=e.isXML,C.contains=e.contains,C.escapeSelector=e.escape,C.expr.match.needsContext);function l(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var Q=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function X(e,n,i){return y(n)?C.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?C.grep(e,function(e){return e===n!==i}):"string"!=typeof n?C.grep(e,function(e){return-1<$.call(n,e)!==i}):C.filter(n,e,i)}C.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?C.find.matchesSelector(i,e)?[i]:[]:C.find.matches(e,C.grep(t,function(e){return 1===e.nodeType}))},C.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(C(e).filter(function(){for(t=0;t<i;t++)if(C.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)C.find(e,r[t],n);return 1<i?C.uniqueSort(n):n},filter:function(e){return this.pushStack(X(this,e||[],!1))},not:function(e){return this.pushStack(X(this,e||[],!0))},is:function(e){return!!X(this,"string"==typeof e&&G.test(e)?C(e):e||[],!1).length}});var J,ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,te=((C.fn.init=function(e,t,n){if(!e)return this;if(n=n||J,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:ee.exec(e))||!i[1]&&t)return(!t||t.jquery?t||n:this.constructor(t)).find(e);if(i[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:x,!0)),Q.test(i[1])&&C.isPlainObject(t))for(var i in t)y(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(n=x.getElementById(i[2]))&&(this[0]=n,this.length=1),this}).prototype=C.fn,J=C(x),/^(?:parents|prev(?:Until|All))/),ne={children:!0,contents:!0,next:!0,prev:!0};function ie(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,s=[],o="string"!=typeof e&&C(e);if(!G.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?-1<o.index(n):1===n.nodeType&&C.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(1<s.length?C.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?$.call(C(e),this[0]):$.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){e=e.parentNode;return e&&11!==e.nodeType?e:null},parents:function(e){return i(e,"parentNode")},parentsUntil:function(e,t,n){return i(e,"parentNode",n)},next:function(e){return ie(e,"nextSibling")},prev:function(e){return ie(e,"previousSibling")},nextAll:function(e){return i(e,"nextSibling")},prevAll:function(e){return i(e,"previousSibling")},nextUntil:function(e,t,n){return i(e,"nextSibling",n)},prevUntil:function(e,t,n){return i(e,"previousSibling",n)},siblings:function(e){return K((e.parentNode||{}).firstChild,e)},children:function(e){return K(e.firstChild)},contents:function(e){return null!=e.contentDocument&&P(e.contentDocument)?e.contentDocument:(l(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},function(i,r){C.fn[i]=function(e,t){var n=C.map(this,r,e);return(t="Until"!==i.slice(-5)?e:t)&&"string"==typeof t&&(n=C.filter(t,n)),1<this.length&&(ne[i]||C.uniqueSort(n),te.test(i)&&n.reverse()),this.pushStack(n)}});var k=/[^\x20\t\r\n\f]+/g;function c(e){return e}function re(e){throw e}function se(e,t,n,i){var r;try{e&&y(r=e.promise)?r.call(e).done(t).fail(n):e&&y(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},C.each(e.match(k)||[],function(e,t){n[t]=!0}),n):C.extend({},i);function r(){for(a=a||i.once,o=s=!0;u.length;c=-1)for(t=u.shift();++c<l.length;)!1===l[c].apply(t[0],t[1])&&i.stopOnFalse&&(c=l.length,t=!1);i.memory||(t=!1),s=!1,a&&(l=t?[]:"")}var s,t,o,a,l=[],u=[],c=-1,h={add:function(){return l&&(t&&!s&&(c=l.length-1,u.push(t)),function n(e){C.each(e,function(e,t){y(t)?i.unique&&h.has(t)||l.push(t):t&&t.length&&"string"!==p(t)&&n(t)})}(arguments),t&&!s&&r()),this},remove:function(){return C.each(arguments,function(e,t){for(var n;-1<(n=C.inArray(t,l,n));)l.splice(n,1),n<=c&&c--}),this},has:function(e){return e?-1<C.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=u=[],l=t="",this},disabled:function(){return!l},lock:function(){return a=u=[],t||s||(l=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),s||r()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!o}};return h},C.extend({Deferred:function(e){var s=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var r=arguments;return C.Deferred(function(i){C.each(s,function(e,t){var n=y(r[t[4]])&&r[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&y(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),r=null}).promise()},then:function(t,n,i){var l=0;function u(r,s,o,a){return function(){function e(){var e,t;if(!(r<l)){if((e=o.apply(n,i))===s.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,y(t)?a?t.call(e,u(l,s,c,a),u(l,s,re,a)):(l++,t.call(e,u(l,s,c,a),u(l,s,re,a),u(l,s,c,s.notifyWith))):(o!==c&&(n=void 0,i=[e]),(a||s.resolveWith)(n,i))}}var n=this,i=arguments,t=a?e:function(){try{e()}catch(e){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(e,t.stackTrace),l<=r+1&&(o!==re&&(n=void 0,i=[e]),s.rejectWith(n,i))}};r?t():(C.Deferred.getStackHook&&(t.stackTrace=C.Deferred.getStackHook()),w.setTimeout(t))}}return C.Deferred(function(e){s[0][3].add(u(0,e,y(i)?i:c,e.notifyWith)),s[1][3].add(u(0,e,y(t)?t:c)),s[2][3].add(u(0,e,y(n)?n:re))}).promise()},promise:function(e){return null!=e?C.extend(e,o):o}},a={};return C.each(s,function(e,t){var n=t[2],i=t[5];o[t[1]]=n.add,i&&n.add(function(){r=i},s[3-e][2].disable,s[3-e][3].disable,s[0][2].lock,s[0][3].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),o.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){r[t]=this,s[t]=1<arguments.length?a.call(arguments):e,--n||o.resolveWith(r,s)}}var n=arguments.length,i=n,r=Array(i),s=a.call(arguments),o=C.Deferred();if(n<=1&&(se(e,o.done(t(i)).resolve,o.reject,!n),"pending"===o.state()||y(s[i]&&s[i].then)))return o.then();for(;i--;)se(s[i],t(i),o.reject);return o.promise()}});var oe=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/,ae=(C.Deferred.exceptionHook=function(e,t){w.console&&w.console.warn&&e&&oe.test(e.name)&&w.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){w.setTimeout(function(){throw e})},C.Deferred());function le(){x.removeEventListener("DOMContentLoaded",le),w.removeEventListener("load",le),C.ready()}C.fn.ready=function(e){return ae.then(e).catch(function(e){C.readyException(e)}),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0)!==e&&0<--C.readyWait||ae.resolveWith(x,[C])}}),C.ready.then=ae.then,"complete"===x.readyState||"loading"!==x.readyState&&!x.documentElement.doScroll?w.setTimeout(C.ready):(x.addEventListener("DOMContentLoaded",le),w.addEventListener("load",le));function h(e,t,n,i,r,s,o){var a=0,l=e.length,u=null==n;if("object"===p(n))for(a in r=!0,n)h(e,t,a,n[a],!0,s,o);else if(void 0!==i&&(r=!0,y(i)||(o=!0),t=u?o?(t.call(e,i),null):(u=t,function(e,t,n){return u.call(C(e),n)}):t))for(;a<l;a++)t(e[a],n,o?i:i.call(e[a],a,t(e[a],n)));return r?e:u?t.call(e):l?t(e[0],n):s}var ue=/^-ms-/,ce=/-([a-z])/g;function he(e,t){return t.toUpperCase()}function _(e){return e.replace(ue,"ms-").replace(ce,he)}function v(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function de(){this.expando=C.expando+de.uid++}de.uid=1,de.prototype={cache:function(e){var t=e[this.expando];return t||(t={},v(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[_(t)]=n;else for(i in t)r[_(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][_(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(_):(t=_(t))in i?[t]:t.match(k)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!C.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){e=e[this.expando];return void 0!==e&&!C.isEmptyObject(e)}};var b=new de,u=new de,fe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,pe=/[A-Z]/g;function ge(e,t,n){var i,r;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(pe,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:fe.test(r)?JSON.parse(r):r)}catch(e){}u.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return u.hasData(e)||b.hasData(e)},data:function(e,t,n){return u.access(e,t,n)},removeData:function(e,t){u.remove(e,t)},_data:function(e,t,n){return b.access(e,t,n)},_removeData:function(e,t){b.remove(e,t)}}),C.fn.extend({data:function(n,e){var t,i,r,s=this[0],o=s&&s.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){u.set(this,n)}):h(this,function(e){var t;if(s&&void 0===e)return void 0!==(t=u.get(s,n))||void 0!==(t=ge(s,n))?t:void 0;this.each(function(){u.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(r=u.get(s),1===s.nodeType&&!b.get(s,"hasDataAttrs"))){for(t=o.length;t--;)o[t]&&0===(i=o[t].name).indexOf("data-")&&(i=_(i.slice(5)),ge(s,i,r[i]));b.set(s,"hasDataAttrs",!0)}return r},removeData:function(e){return this.each(function(){u.remove(this,e)})}}),C.extend({queue:function(e,t,n){var i;if(e)return i=b.get(e,t=(t||"fx")+"queue"),n&&(!i||Array.isArray(n)?i=b.access(e,t,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),i=n.length,r=n.shift(),s=C._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete s.stop,r.call(e,function(){C.dequeue(e,t)},s)),!i&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return b.get(e,n)||b.access(e,n,{empty:C.Callbacks("once memory").add(function(){b.remove(e,[t+"queue",n])})})}}),C.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?C.queue(this[0],t):void 0===n?this:this.each(function(){var e=C.queue(this,t,n);C._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&C.dequeue(this,t)})},dequeue:function(e){return this.each(function(){C.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--r||s.resolveWith(o,[o])}var i,r=1,s=C.Deferred(),o=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(i=b.get(o[a],e+"queueHooks"))&&i.empty&&(r++,i.empty.add(n));return n(),s.promise(t)}});function me(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&D(e)&&"none"===C.css(e,"display")}var e=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ve=new RegExp("^(?:([+-])=|)("+e+")([a-z%]*)$","i"),d=["Top","Right","Bottom","Left"],E=x.documentElement,D=function(e){return C.contains(e.ownerDocument,e)},ye={composed:!0};E.getRootNode&&(D=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(ye)===e.ownerDocument});function _e(e,t,n,i){var r,s,o=20,a=i?function(){return i.cur()}:function(){return C.css(e,t,"")},l=a(),u=n&&n[3]||(C.cssNumber[t]?"":"px"),c=e.nodeType&&(C.cssNumber[t]||"px"!==u&&+l)&&ve.exec(C.css(e,t));if(c&&c[3]!==u){for(u=u||c[3],c=+(l/=2)||1;o--;)C.style(e,t,c+u),(1-s)*(1-(s=a()/l||.5))<=0&&(o=0),c/=s;C.style(e,t,(c*=2)+u),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}var be={};function T(e,t){for(var n,i,r,s,o,a=[],l=0,u=e.length;l<u;l++)(i=e[l]).style&&(n=i.style.display,t?("none"===n&&(a[l]=b.get(i,"display")||null,a[l]||(i.style.display="")),""===i.style.display&&me(i)&&(a[l]=(o=s=void 0,s=(r=i).ownerDocument,r=r.nodeName,(o=be[r])||(s=s.body.appendChild(s.createElement(r)),o=C.css(s,"display"),s.parentNode.removeChild(s),be[r]=o="none"===o?"block":o)))):"none"!==n&&(a[l]="none",b.set(i,"display",n)));for(l=0;l<u;l++)null!=a[l]&&(e[l].style.display=a[l]);return e}C.fn.extend({show:function(){return T(this,!0)},hide:function(){return T(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){me(this)?C(this).show():C(this).hide()})}});var we=/^(?:checkbox|radio)$/i,xe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Ce=/^$|^module$|\/(?:java|ecma)script/i,S=(N=x.createDocumentFragment().appendChild(x.createElement("div")),(o=x.createElement("input")).setAttribute("type","radio"),o.setAttribute("checked","checked"),o.setAttribute("name","t"),N.appendChild(o),m.checkClone=N.cloneNode(!0).cloneNode(!0).lastChild.checked,N.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!N.cloneNode(!0).lastChild.defaultValue,N.innerHTML="<option></option>",m.option=!!N.lastChild,{thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]});function A(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&l(e,t)?C.merge([e],n):n}function ke(e,t){for(var n=0,i=e.length;n<i;n++)b.set(e[n],"globalEval",!t||b.get(t[n],"globalEval"))}S.tbody=S.tfoot=S.colgroup=S.caption=S.thead,S.th=S.td,m.option||(S.optgroup=S.option=[1,"<select multiple='multiple'>","</select>"]);var Ee=/<|&#?\w+;/;function De(e,t,n,i,r){for(var s,o,a,l,u,c=t.createDocumentFragment(),h=[],d=0,f=e.length;d<f;d++)if((s=e[d])||0===s)if("object"===p(s))C.merge(h,s.nodeType?[s]:s);else if(Ee.test(s)){for(o=o||c.appendChild(t.createElement("div")),a=(xe.exec(s)||["",""])[1].toLowerCase(),a=S[a]||S._default,o.innerHTML=a[1]+C.htmlPrefilter(s)+a[2],u=a[0];u--;)o=o.lastChild;C.merge(h,o.childNodes),(o=c.firstChild).textContent=""}else h.push(t.createTextNode(s));for(c.textContent="",d=0;s=h[d++];)if(i&&-1<C.inArray(s,i))r&&r.push(s);else if(l=D(s),o=A(c.appendChild(s),"script"),l&&ke(o),n)for(u=0;s=o[u++];)Ce.test(s.type||"")&&n.push(s);return c}var Te=/^([^.]*)(?:\.(.+)|)/;function n(){return!0}function f(){return!1}function Se(e,t){return e===function(){try{return x.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,i,r,s){var o,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Ae(e,a,n,i,t[a],s);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=f;else if(!r)return e;return 1===s&&(o=r,(r=function(e){return C().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=C.guid++)),e.each(function(){C.event.add(this,t,r,i,n)})}function Oe(e,r,s){s?(b.set(e,r,!1),C.event.add(e,r,{namespace:!1,handler:function(e){var t,n,i=b.get(this,r);if(1&e.isTrigger&&this[r]){if(i.length)(C.event.special[r]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),b.set(this,r,i),t=s(this,r),this[r](),i!==(n=b.get(this,r))||t?b.set(this,r,!1):n={},i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else i.length&&(b.set(this,r,{value:C.event.trigger(C.extend(i[0],C.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===b.get(e,r)&&C.event.add(e,r,n)}C.event={global:{},add:function(t,e,n,i,r){var s,o,a,l,u,c,h,d,f,p=b.get(t);if(v(t))for(n.handler&&(n=(s=n).handler,r=s.selector),r&&C.find.matchesSelector(E,r),n.guid||(n.guid=C.guid++),(a=p.events)||(a=p.events=Object.create(null)),(o=p.handle)||(o=p.handle=function(e){return void 0!==C&&C.event.triggered!==e.type?C.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(k)||[""]).length;l--;)h=f=(d=Te.exec(e[l])||[])[1],d=(d[2]||"").split(".").sort(),h&&(u=C.event.special[h]||{},h=(r?u.delegateType:u.bindType)||h,u=C.event.special[h]||{},f=C.extend({type:h,origType:f,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&C.expr.match.needsContext.test(r),namespace:d.join(".")},s),(c=a[h])||((c=a[h]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,i,d,o)||t.addEventListener&&t.addEventListener(h,o)),u.add&&(u.add.call(t,f),f.handler.guid||(f.handler.guid=n.guid)),r?c.splice(c.delegateCount++,0,f):c.push(f),C.event.global[h]=!0)},remove:function(e,t,n,i,r){var s,o,a,l,u,c,h,d,f,p,g,m=b.hasData(e)&&b.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(k)||[""]).length;u--;)if(f=g=(a=Te.exec(t[u])||[])[1],p=(a[2]||"").split(".").sort(),f){for(h=C.event.special[f]||{},d=l[f=(i?h.delegateType:h.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=d.length;s--;)c=d[s],!r&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(d.splice(s,1),c.selector&&d.delegateCount--,h.remove&&h.remove.call(e,c));o&&!d.length&&(h.teardown&&!1!==h.teardown.call(e,p,m.handle)||C.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)C.event.remove(e,f+t[u],n,i,!0);C.isEmptyObject(l)&&b.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,s,o=new Array(arguments.length),a=C.event.fix(e),e=(b.get(this,"events")||Object.create(null))[a.type]||[],l=C.event.special[a.type]||{};for(o[0]=a,t=1;t<arguments.length;t++)o[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=C.event.handlers.call(this,a,e),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(r=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==r.namespace&&!a.rnamespace.test(r.namespace)||(a.handleObj=r,a.data=r.data,void 0!==(r=((C.event.special[r.origType]||{}).handle||r.handler).apply(i.elem,o))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,s,o,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(s=[],o={},n=0;n<l;n++)void 0===o[r=(i=t[n]).selector+" "]&&(o[r]=i.needsContext?-1<C(r,this).index(u):C.find(r,this,null,[u]).length),o[r]&&s.push(i);s.length&&a.push({elem:u,handlers:s})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(C.Event.prototype,t,{enumerable:!0,configurable:!0,get:y(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){e=this||e;return we.test(e.type)&&e.click&&l(e,"input")&&Oe(e,"click",n),!1},trigger:function(e){e=this||e;return we.test(e.type)&&e.click&&l(e,"input")&&Oe(e,"click"),!0},_default:function(e){e=e.target;return we.test(e.type)&&e.click&&l(e,"input")&&b.get(e,"click")||l(e,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?n:f,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:f,isPropagationStopped:f,isImmediatePropagationStopped:f,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=n,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=n,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=n,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},function(e,t){C.event.special[e]={setup:function(){return Oe(this,e,Se),!1},trigger:function(){return Oe(this,e),!0},_default:function(){return!0},delegateType:t}}),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,r){C.event.special[e]={delegateType:r,bindType:r,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||C.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=r),t}}}),C.fn.extend({on:function(e,t,n,i){return Ae(this,e,t,n,i)},one:function(e,t,n,i){return Ae(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,C(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=f),this.each(function(){C.event.remove(this,e,n,t)});for(r in e)this.off(r,t,e[r]);return this}});var Ie=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return l(e,"table")&&l(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function Re(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Me(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var n,i,r,s;if(1===t.nodeType){if(b.hasData(e)&&(s=b.get(e).events))for(r in b.remove(t,"handle events"),s)for(n=0,i=s[r].length;n<i;n++)C.event.add(t,r,s[r][n]);u.hasData(e)&&(e=u.access(e),e=C.extend({},e),u.set(t,e))}}function O(n,i,r,s){i=z(i);var e,t,o,a,l,u,c=0,h=n.length,d=h-1,f=i[0],p=y(f);if(p||1<h&&"string"==typeof f&&!m.checkClone&&Ne.test(f))return n.each(function(e){var t=n.eq(e);p&&(i[0]=f.call(this,e,t.html())),O(t,i,r,s)});if(h&&(t=(e=De(i,n[0].ownerDocument,!1,n,s)).firstChild,1===e.childNodes.length&&(e=t),t||s)){for(a=(o=C.map(A(e,"script"),Re)).length;c<h;c++)l=e,c!==d&&(l=C.clone(l,!0,!0),a&&C.merge(o,A(l,"script"))),r.call(n[c],l,c);if(a)for(u=o[o.length-1].ownerDocument,C.map(o,Me),c=0;c<a;c++)l=o[c],Ce.test(l.type||"")&&!b.access(l,"globalEval")&&C.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?C._evalUrl&&!l.noModule&&C._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):Y(l.textContent.replace(Le,""),l,u))}return n}function ze(e,t,n){for(var i,r=t?C.filter(t,e):e,s=0;null!=(i=r[s]);s++)n||1!==i.nodeType||C.cleanData(A(i)),i.parentNode&&(n&&D(i)&&ke(A(i,"script")),i.parentNode.removeChild(i));return e}C.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,s,o,a,l,u,c=e.cloneNode(!0),h=D(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(o=A(c),i=0,r=(s=A(e)).length;i<r;i++)a=s[i],l=o[i],u=void 0,"input"===(u=l.nodeName.toLowerCase())&&we.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(t)if(n)for(s=s||A(e),o=o||A(c),i=0,r=s.length;i<r;i++)Pe(s[i],o[i]);else Pe(e,c);return 0<(o=A(c,"script")).length&&ke(o,!h&&A(e,"script")),c},cleanData:function(e){for(var t,n,i,r=C.event.special,s=0;void 0!==(n=e[s]);s++)if(v(n)){if(t=n[b.expando]){if(t.events)for(i in t.events)r[i]?C.event.remove(n,i):C.removeEvent(n,i,t.handle);n[b.expando]=void 0}n[u.expando]&&(n[u.expando]=void 0)}}}),C.fn.extend({detach:function(e){return ze(this,e,!0)},remove:function(e){return ze(this,e)},text:function(e){return h(this,function(e){return void 0===e?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return O(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)})},prepend:function(){return O(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=je(this,e)).insertBefore(e,t.firstChild)})},before:function(){return O(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return O(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(A(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return C.clone(this,e,t)})},html:function(e){return h(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ie.test(e)&&!S[(xe.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(A(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return O(this,arguments,function(e){var t=this.parentNode;C.inArray(this,n)<0&&(C.cleanData(A(this)),t&&t.replaceChild(e,this))},n)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,o){C.fn[e]=function(e){for(var t,n=[],i=C(e),r=i.length-1,s=0;s<=r;s++)t=s===r?this:this.clone(!0),C(i[s])[o](t),F.apply(n,t.get());return this.pushStack(n)}});function Fe(e){var t=e.ownerDocument.defaultView;return(t=t&&t.opener?t:w).getComputedStyle(e)}function $e(e,t,n){var i,r={};for(i in t)r[i]=e.style[i],e.style[i]=t[i];for(i in n=n.call(e),t)e.style[i]=r[i];return n}var Ue,Be,He,qe,We,Ve,Ye,r,Ze=new RegExp("^("+e+")(?!px)[a-z%]+$","i"),Ke=new RegExp(d.join("|"),"i");function Ge(){var e;r&&(Ye.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",r.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",E.appendChild(Ye).appendChild(r),e=w.getComputedStyle(r),Ue="1%"!==e.top,Ve=12===Qe(e.marginLeft),r.style.right="60%",qe=36===Qe(e.right),Be=36===Qe(e.width),r.style.position="absolute",He=12===Qe(r.offsetWidth/3),E.removeChild(Ye),r=null)}function Qe(e){return Math.round(parseFloat(e))}function Xe(e,t,n){var i,r,s=e.style;return(n=n||Fe(e))&&(""!==(r=n.getPropertyValue(t)||n[t])||D(e)||(r=C.style(e,t)),!m.pixelBoxStyles()&&Ze.test(r)&&Ke.test(t)&&(e=s.width,t=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=r,r=n.width,s.width=e,s.minWidth=t,s.maxWidth=i)),void 0!==r?r+"":r}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ye=x.createElement("div"),(r=x.createElement("div")).style&&(r.style.backgroundClip="content-box",r.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===r.style.backgroundClip,C.extend(m,{boxSizingReliable:function(){return Ge(),Be},pixelBoxStyles:function(){return Ge(),qe},pixelPosition:function(){return Ge(),Ue},reliableMarginLeft:function(){return Ge(),Ve},scrollboxSize:function(){return Ge(),He},reliableTrDimensions:function(){var e,t,n;return null==We&&(e=x.createElement("table"),t=x.createElement("tr"),n=x.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",E.appendChild(e).appendChild(t).appendChild(n),n=w.getComputedStyle(t),We=parseInt(n.height,10)+parseInt(n.borderTopWidth,10)+parseInt(n.borderBottomWidth,10)===t.offsetHeight,E.removeChild(e)),We}}));var et=["Webkit","Moz","ms"],tt=x.createElement("div").style,nt={};function it(e){var t=C.cssProps[e]||nt[e];return t||(e in tt?e:nt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=et.length;n--;)if((e=et[n]+t)in tt)return e}(e)||e)}var rt=/^(none|table(?!-c[ea]).+)/,st=/^--/,ot={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function lt(e,t,n){var i=ve.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function ut(e,t,n,i,r,s){var o="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=C.css(e,n+d[o],!0,r)),i?("content"===n&&(l-=C.css(e,"padding"+d[o],!0,r)),"margin"!==n&&(l-=C.css(e,"border"+d[o]+"Width",!0,r))):(l+=C.css(e,"padding"+d[o],!0,r),"padding"!==n?l+=C.css(e,"border"+d[o]+"Width",!0,r):a+=C.css(e,"border"+d[o]+"Width",!0,r));return!i&&0<=s&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-l-a-.5))||0),l}function ct(e,t,n){var i=Fe(e),r=(!m.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,i),s=r,o=Xe(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ze.test(o)){if(!n)return o;o="auto"}return(!m.boxSizingReliable()&&r||!m.reliableTrDimensions()&&l(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===C.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===C.css(e,"boxSizing",!1,i),(s=a in e)&&(o=e[a])),(o=parseFloat(o)||0)+ut(e,t,n||(r?"border":"content"),s,i,o)+"px"}function s(e,t,n,i,r){return new s.prototype.init(e,t,n,i,r)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t)return""===(t=Xe(e,"opacity"))?"1":t}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,s,o,a=_(t),l=st.test(t),u=e.style;if(l||(t=it(a)),o=C.cssHooks[t]||C.cssHooks[a],void 0===n)return o&&"get"in o&&void 0!==(r=o.get(e,!1,i))?r:u[t];"string"===(s=typeof n)&&(r=ve.exec(n))&&r[1]&&(n=_e(e,t,r),s="number"),null!=n&&n==n&&("number"!==s||l||(n+=r&&r[3]||(C.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var r,s=_(t);return st.test(t)||(t=it(s)),"normal"===(r=void 0===(r=(s=C.cssHooks[t]||C.cssHooks[s])&&"get"in s?s.get(e,!0,n):r)?Xe(e,t,i):r)&&t in at&&(r=at[t]),""===n||n?(s=parseFloat(r),!0===n||isFinite(s)?s||0:r):r}}),C.each(["height","width"],function(e,o){C.cssHooks[o]={get:function(e,t,n){if(t)return!rt.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,o,n):$e(e,ot,function(){return ct(e,o,n)})},set:function(e,t,n){var i=Fe(e),r=!m.scrollboxSize()&&"absolute"===i.position,s=(r||n)&&"border-box"===C.css(e,"boxSizing",!1,i),n=n?ut(e,o,n,s,i):0;return s&&r&&(n-=Math.ceil(e["offset"+o[0].toUpperCase()+o.slice(1)]-parseFloat(i[o])-ut(e,o,"border",!1,i)-.5)),n&&(s=ve.exec(t))&&"px"!==(s[3]||"px")&&(e.style[o]=t,t=C.css(e,o)),lt(0,t,n)}}}),C.cssHooks.marginLeft=Je(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Xe(e,"marginLeft"))||e.getBoundingClientRect().left-$e(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(r,s){C.cssHooks[r+s]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[r+d[t]+s]=i[t]||i[t-2]||i[0];return n}},"margin"!==r&&(C.cssHooks[r+s].set=lt)}),C.fn.extend({css:function(e,t){return h(this,function(e,t,n){var i,r,s={},o=0;if(Array.isArray(t)){for(i=Fe(e),r=t.length;o<r;o++)s[t[o]]=C.css(e,t[o],!1,i);return s}return void 0!==n?C.style(e,t,n):C.css(e,t)},e,t,1<arguments.length)}}),((C.Tween=s).prototype={constructor:s,init:function(e,t,n,i,r,s){this.elem=e,this.prop=n,this.easing=r||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=s||(C.cssNumber[n]?"":"px")},cur:function(){var e=s.propHooks[this.prop];return(e&&e.get?e:s.propHooks._default).get(this)},run:function(e){var t,n=s.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(n&&n.set?n:s.propHooks._default).set(this),this}}).init.prototype=s.prototype,(s.propHooks={_default:{get:function(e){return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(e=C.css(e.elem,e.prop,""))&&"auto"!==e?e:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[it(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=s.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=s.prototype.init,C.fx.step={};var I,ht,o,N,dt=/^(?:toggle|show|hide)$/,ft=/queueHooks$/;function pt(){ht&&(!1===x.hidden&&w.requestAnimationFrame?w.requestAnimationFrame(pt):w.setTimeout(pt,C.fx.interval),C.fx.tick())}function gt(){return w.setTimeout(function(){I=void 0}),I=Date.now()}function mt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=d[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function vt(e,t,n){for(var i,r=(L.tweeners[t]||[]).concat(L.tweeners["*"]),s=0,o=r.length;s<o;s++)if(i=r[s].call(n,t,e))return i}function L(r,e,t){var n,s,i,o,a,l,u,c=0,h=L.prefilters.length,d=C.Deferred().always(function(){delete f.elem}),f=function(){if(s)return!1;for(var e=I||gt(),e=Math.max(0,p.startTime+p.duration-e),t=1-(e/p.duration||0),n=0,i=p.tweens.length;n<i;n++)p.tweens[n].run(t);return d.notifyWith(r,[p,t,e]),t<1&&i?e:(i||d.notifyWith(r,[p,1,0]),d.resolveWith(r,[p]),!1)},p=d.promise({elem:r,props:C.extend({},e),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},t),originalProperties:e,originalOptions:t,startTime:I||gt(),duration:t.duration,tweens:[],createTween:function(e,t){t=C.Tween(r,p.opts,e,t,p.opts.specialEasing[e]||p.opts.easing);return p.tweens.push(t),t},stop:function(e){var t=0,n=e?p.tweens.length:0;if(s)return this;for(s=!0;t<n;t++)p.tweens[t].run(1);return e?(d.notifyWith(r,[p,1,0]),d.resolveWith(r,[p,e])):d.rejectWith(r,[p,e]),this}}),g=p.props,m=g,v=p.opts.specialEasing;for(i in m)if(a=v[o=_(i)],l=m[i],Array.isArray(l)&&(a=l[1],l=m[i]=l[0]),i!==o&&(m[o]=l,delete m[i]),(u=C.cssHooks[o])&&"expand"in u)for(i in l=u.expand(l),delete m[o],l)i in m||(m[i]=l[i],v[i]=a);else v[o]=a;for(;c<h;c++)if(n=L.prefilters[c].call(p,r,g,p.opts))return y(n.stop)&&(C._queueHooks(p.elem,p.opts.queue).stop=n.stop.bind(n)),n;return C.map(g,vt,p),y(p.opts.start)&&p.opts.start.call(r,p),p.progress(p.opts.progress).done(p.opts.done,p.opts.complete).fail(p.opts.fail).always(p.opts.always),C.fx.timer(C.extend(f,{elem:r,anim:p,queue:p.opts.queue})),p}C.Animation=C.extend(L,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return _e(n.elem,e,ve.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,r=(e=y(e)?(t=e,["*"]):e.match(k)).length;i<r;i++)n=e[i],L.tweeners[n]=L.tweeners[n]||[],L.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,s,o,a,l,u,c="width"in t||"height"in t,h=this,d={},f=e.style,p=e.nodeType&&me(e),g=b.get(e,"fxshow");for(i in n.queue||(null==(o=C._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,h.always(function(){h.always(function(){o.unqueued--,C.queue(e,"fx").length||o.empty.fire()})})),t)if(r=t[i],dt.test(r)){if(delete t[i],s=s||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;p=!0}d[i]=g&&g[i]||C.style(e,i)}if((l=!C.isEmptyObject(t))||!C.isEmptyObject(d))for(i in c&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=g&&g.display)&&(u=b.get(e,"display")),"none"===(c=C.css(e,"display"))&&(u?c=u:(T([e],!0),u=e.style.display||u,c=C.css(e,"display"),T([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===C.css(e,"float")&&(l||(h.done(function(){f.display=u}),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,d)l||(g?"hidden"in g&&(p=g.hidden):g=b.access(e,"fxshow",{display:u}),s&&(g.hidden=!p),p&&T([e],!0),h.done(function(){for(i in p||T([e]),b.remove(e,"fxshow"),d)C.style(e,i,d[i])})),l=vt(p?g[i]:0,i,h),i in g||(g[i]=l.start,p&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?L.prefilters.unshift(e):L.prefilters.push(e)}}),C.speed=function(e,t,n){var i=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return C.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in C.fx.speeds?i.duration=C.fx.speeds[i.duration]:i.duration=C.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(e,t,n,i){return this.filter(me).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function r(){var e=L(this,C.extend({},t),o);(s||b.get(this,"finish"))&&e.stop(!0)}var s=C.isEmptyObject(t),o=C.speed(e,n,i);return r.finish=r,s||!1===o.queue?this.each(r):this.queue(o.queue,r)},stop:function(r,e,s){function o(e){var t=e.stop;delete e.stop,t(s)}return"string"!=typeof r&&(s=e,e=r,r=void 0),e&&this.queue(r||"fx",[]),this.each(function(){var e=!0,t=null!=r&&r+"queueHooks",n=C.timers,i=b.get(this);if(t)i[t]&&i[t].stop&&o(i[t]);else for(t in i)i[t]&&i[t].stop&&ft.test(t)&&o(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=r&&n[t].queue!==r||(n[t].anim.stop(s),e=!1,n.splice(t,1));!e&&s||C.dequeue(this,r)})},finish:function(o){return!1!==o&&(o=o||"fx"),this.each(function(){var e,t=b.get(this),n=t[o+"queue"],i=t[o+"queueHooks"],r=C.timers,s=n?n.length:0;for(t.finish=!0,C.queue(this,o,[]),i&&i.stop&&i.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===o&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<s;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),C.each(["toggle","show","hide"],function(e,i){var r=C.fn[i];C.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(mt(i,!0),e,t,n)}}),C.each({slideDown:mt("show"),slideUp:mt("hide"),slideToggle:mt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){C.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(I=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),I=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){ht||(ht=!0,pt())},C.fx.stop=function(){ht=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(i,e){return i=C.fx&&C.fx.speeds[i]||i,this.queue(e=e||"fx",function(e,t){var n=w.setTimeout(e,i);t.stop=function(){w.clearTimeout(n)}})},o=x.createElement("input"),N=x.createElement("select").appendChild(x.createElement("option")),o.type="checkbox",m.checkOn=""!==o.value,m.optSelected=N.selected,(o=x.createElement("input")).value="t",o.type="radio",m.radioValue="t"===o.value;var yt,_t=C.expr.attrHandle,bt=(C.fn.extend({attr:function(e,t){return h(this,C.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){C.removeAttr(this,e)})}}),C.extend({attr:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?C.prop(e,t,n):(1===s&&C.isXMLDoc(e)||(r=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?yt:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):!(r&&"get"in r&&null!==(i=r.get(e,t)))&&null==(i=C.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){var n;if(!m.radioValue&&"radio"===t&&l(e,"input"))return n=e.value,e.setAttribute("type",t),n&&(e.value=n),t}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(k);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),yt={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(e,t){var o=_t[t]||C.find.attr;_t[t]=function(e,t,n){var i,r,s=t.toLowerCase();return n||(r=_t[s],_t[s]=i,i=null!=o(e,t,n)?s:null,_t[s]=r),i}}),/^(?:input|select|textarea|button)$/i),wt=/^(?:a|area)$/i;function j(e){return(e.match(k)||[]).join(" ")}function R(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(k)||[]}C.fn.extend({prop:function(e,t){return h(this,C.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[C.propFix[e]||e]})}}),C.extend({prop:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&C.isXMLDoc(e)||(t=C.propFix[t]||t,r=C.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(C.propHooks.selected={get:function(e){e=e.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(e){e=e.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(t){var e,n,i,r,s,o,a=0;if(y(t))return this.each(function(e){C(this).addClass(t.call(this,e,R(this)))});if((e=xt(t)).length)for(;n=this[a++];)if(o=R(n),i=1===n.nodeType&&" "+j(o)+" "){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(o=j(i))&&n.setAttribute("class",o)}return this},removeClass:function(t){var e,n,i,r,s,o,a=0;if(y(t))return this.each(function(e){C(this).removeClass(t.call(this,e,R(this)))});if(!arguments.length)return this.attr("class","");if((e=xt(t)).length)for(;n=this[a++];)if(o=R(n),i=1===n.nodeType&&" "+j(o)+" "){for(s=0;r=e[s++];)for(;-1<i.indexOf(" "+r+" ");)i=i.replace(" "+r+" "," ");o!==(o=j(i))&&n.setAttribute("class",o)}return this},toggleClass:function(r,t){var s=typeof r,o="string"==s||Array.isArray(r);return"boolean"==typeof t&&o?t?this.addClass(r):this.removeClass(r):y(r)?this.each(function(e){C(this).toggleClass(r.call(this,e,R(this),t),t)}):this.each(function(){var e,t,n,i;if(o)for(t=0,n=C(this),i=xt(r);e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==r&&"boolean"!=s||((e=R(this))&&b.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==r&&b.get(this,"__className__")||""))})},hasClass:function(e){for(var t,n=0,i=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+j(R(t))+" ").indexOf(i))return!0;return!1}});function Ct(e){e.stopPropagation()}var kt=/\r/g,Et=(C.fn.extend({val:function(t){var n,e,i,r=this[0];return arguments.length?(i=y(t),this.each(function(e){1===this.nodeType&&(null==(e=i?t.call(this,e,C(this).val()):t)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=C.map(e,function(e){return null==e?"":e+""})),(n=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,e,"value")||(this.value=e))})):r?(n=C.valHooks[r.type]||C.valHooks[r.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(r,"value"))?e:"string"==typeof(e=r.value)?e.replace(kt,""):null==e?"":e:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:j(C.text(e))}},select:{get:function(e){for(var t,n=e.options,i=e.selectedIndex,r="select-one"===e.type,s=r?null:[],o=r?i+1:n.length,a=i<0?o:r?i:0;a<o;a++)if(((t=n[a]).selected||a===i)&&!t.disabled&&(!t.parentNode.disabled||!l(t.parentNode,"optgroup"))){if(t=C(t).val(),r)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,s=C.makeArray(t),o=r.length;o--;)((i=r[o]).selected=-1<C.inArray(C.valHooks.option.get(i),s))&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<C.inArray(C(e).val(),t)}},m.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),m.focusin="onfocusin"in w,/^(?:focusinfocus|focusoutblur)$/),Dt=(C.extend(C.event,{trigger:function(e,t,n,i){var r,s,o,a,l,u,c,h=[n||x],d=H.call(e,"type")?e.type:e,f=H.call(e,"namespace")?e.namespace.split("."):[],p=c=s=n=n||x;if(3!==n.nodeType&&8!==n.nodeType&&!Et.test(d+C.event.triggered)&&(-1<d.indexOf(".")&&(d=(f=d.split(".")).shift(),f.sort()),a=d.indexOf(":")<0&&"on"+d,(e=e[C.expando]?e:new C.Event(d,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),u=C.event.special[d]||{},i||!u.trigger||!1!==u.trigger.apply(n,t))){if(!i&&!u.noBubble&&!g(n)){for(o=u.delegateType||d,Et.test(o+d)||(p=p.parentNode);p;p=p.parentNode)h.push(p),s=p;s===(n.ownerDocument||x)&&h.push(s.defaultView||s.parentWindow||w)}for(r=0;(p=h[r++])&&!e.isPropagationStopped();)c=p,e.type=1<r?o:u.bindType||d,(l=(b.get(p,"events")||Object.create(null))[e.type]&&b.get(p,"handle"))&&l.apply(p,t),(l=a&&p[a])&&l.apply&&v(p)&&(e.result=l.apply(p,t),!1===e.result&&e.preventDefault());return e.type=d,i||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(h.pop(),t)||!v(n)||a&&y(n[d])&&!g(n)&&((s=n[a])&&(n[a]=null),C.event.triggered=d,e.isPropagationStopped()&&c.addEventListener(d,Ct),n[d](),e.isPropagationStopped()&&c.removeEventListener(d,Ct),C.event.triggered=void 0,s&&(n[a]=s)),e.result}},simulate:function(e,t,n){n=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(n,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each(function(){C.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),m.focusin||C.each({focus:"focusin",blur:"focusout"},function(n,i){function r(e){C.event.simulate(i,e.target,C.event.fix(e))}C.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=b.access(e,i);t||e.addEventListener(n,r,!0),b.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=b.access(e,i)-1;t?b.access(e,i,t):(e.removeEventListener(n,r,!0),b.remove(e,i))}}}),w.location),Tt={guid:Date.now()},St=/\?/,At=(C.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new w.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||C.error("Invalid XML: "+(n?C.map(n.childNodes,function(e){return e.textContent}).join("\n"):e)),t},/\[\]$/),Ot=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;C.param=function(e,t){function n(e,t){t=y(t)?t():t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==t?"":t)}var i,r=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,function(){n(this.name,this.value)});else for(i in e)!function n(i,e,r,s){if(Array.isArray(e))C.each(e,function(e,t){r||At.test(i)?s(i,t):n(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,s)});else if(r||"object"!==p(e))s(i,e);else for(var t in e)n(i+"["+t+"]",e[t],r,s)}(i,e[i],t,n);return r.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&Nt.test(this.nodeName)&&!It.test(e)&&(this.checked||!we.test(e))}).map(function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,function(e){return{name:t.name,value:e.replace(Ot,"\r\n")}}):{name:t.name,value:n.replace(Ot,"\r\n")}}).get()}});var Lt=/%20/g,jt=/#.*$/,Rt=/([?&])_=[^&]*/,Mt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:GET|HEAD)$/,zt=/^\/\//,Ft={},$t={},Ut="*/".concat("*"),Bt=x.createElement("a");function Ht(s){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,r=e.toLowerCase().match(k)||[];if(y(t))for(;n=r[i++];)"+"===n[0]?(n=n.slice(1)||"*",(s[n]=s[n]||[]).unshift(t)):(s[n]=s[n]||[]).push(t)}}function qt(t,i,r,s){var o={},a=t===$t;function l(e){var n;return o[e]=!0,C.each(t[e]||[],function(e,t){t=t(i,r,s);return"string"!=typeof t||a||o[t]?a?!(n=t):void 0:(i.dataTypes.unshift(t),l(t),!1)}),n}return l(i.dataTypes[0])||!o["*"]&&l("*")}function Wt(e,t){var n,i,r=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i=i||{})[n]=t[n]);return i&&C.extend(!0,e,i),e}Bt.href=Dt.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Dt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ut,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,C.ajaxSettings),t):Wt(C.ajaxSettings,e)},ajaxPrefilter:Ht(Ft),ajaxTransport:Ht($t),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0);var l,u,c,n,h,d,f,i,p=C.ajaxSetup({},t=t||{}),g=p.context||p,m=p.context&&(g.nodeType||g.jquery)?C(g):C.event,v=C.Deferred(),y=C.Callbacks("once memory"),_=p.statusCode||{},r={},s={},o="canceled",b={readyState:0,getResponseHeader:function(e){var t;if(d){if(!n)for(n={};t=Mt.exec(c);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return d?c:null},setRequestHeader:function(e,t){return null==d&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,r[e]=t),this},overrideMimeType:function(e){return null==d&&(p.mimeType=e),this},statusCode:function(e){if(e)if(d)b.always(e[b.status]);else for(var t in e)_[t]=[_[t],e[t]];return this},abort:function(e){e=e||o;return l&&l.abort(e),a(0,e),this}};if(v.promise(b),p.url=((e||p.url||Dt.href)+"").replace(zt,Dt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(k)||[""],null==p.crossDomain){e=x.createElement("a");try{e.href=p.url,e.href=e.href,p.crossDomain=Bt.protocol+"//"+Bt.host!=e.protocol+"//"+e.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=C.param(p.data,p.traditional)),qt(Ft,p,t,b),d)return b;for(i in(f=C.event&&p.global)&&0==C.active++&&C.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Pt.test(p.type),u=p.url.replace(jt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Lt,"+")):(e=p.url.slice(u.length),p.data&&(p.processData||"string"==typeof p.data)&&(u+=(St.test(u)?"&":"?")+p.data,delete p.data),!1===p.cache&&(u=u.replace(Rt,"$1"),e=(St.test(u)?"&":"?")+"_="+Tt.guid+++e),p.url=u+e),p.ifModified&&(C.lastModified[u]&&b.setRequestHeader("If-Modified-Since",C.lastModified[u]),C.etag[u]&&b.setRequestHeader("If-None-Match",C.etag[u])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&b.setRequestHeader("Content-Type",p.contentType),b.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Ut+"; q=0.01":""):p.accepts["*"]),p.headers)b.setRequestHeader(i,p.headers[i]);if(p.beforeSend&&(!1===p.beforeSend.call(g,b,p)||d))return b.abort();if(o="abort",y.add(p.complete),b.done(p.success),b.fail(p.error),l=qt($t,p,t,b)){if(b.readyState=1,f&&m.trigger("ajaxSend",[b,p]),d)return b;p.async&&0<p.timeout&&(h=w.setTimeout(function(){b.abort("timeout")},p.timeout));try{d=!1,l.send(r,a)}catch(e){if(d)throw e;a(-1,e)}}else a(-1,"No Transport");function a(e,t,n,i){var r,s,o,a=t;d||(d=!0,h&&w.clearTimeout(h),l=void 0,c=i||"",b.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(o=function(e,t,n){for(var i,r,s,o,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)s=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){s=r;break}o=o||r}s=s||o}if(s)return s!==l[0]&&l.unshift(s),n[s]}(p,b,n)),!i&&-1<C.inArray("script",p.dataTypes)&&C.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),o=function(e,t,n,i){var r,s,o,a,l,u={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(s=c.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(o=u[l+" "+s]||u["* "+s]))for(r in u)if((a=r.split(" "))[1]===s&&(o=u[l+" "+a[0]]||u["* "+a[0]])){!0===o?o=u[r]:!0!==u[r]&&(s=a[0],c.unshift(a[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}(p,o,b,i),i?(p.ifModified&&((n=b.getResponseHeader("Last-Modified"))&&(C.lastModified[u]=n),(n=b.getResponseHeader("etag"))&&(C.etag[u]=n)),204===e||"HEAD"===p.type?a="nocontent":304===e?a="notmodified":(a=o.state,r=o.data,i=!(s=o.error))):(s=a,!e&&a||(a="error",e<0&&(e=0))),b.status=e,b.statusText=(t||a)+"",i?v.resolveWith(g,[r,a,b]):v.rejectWith(g,[b,a,s]),b.statusCode(_),_=void 0,f&&m.trigger(i?"ajaxSuccess":"ajaxError",[b,p,i?r:s]),y.fireWith(g,[b,a]),f&&(m.trigger("ajaxComplete",[b,p]),--C.active||C.event.trigger("ajaxStop")))}return b},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],function(e,r){C[r]=function(e,t,n,i){return y(t)&&(i=i||n,n=t,t=void 0),C.ajax(C.extend({url:e,type:r,dataType:i,data:t,success:n},C.isPlainObject(e)&&e))}}),C.ajaxPrefilter(function(e){for(var t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),C._evalUrl=function(e,t,n){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t,n)}})},C.fn.extend({wrapAll:function(e){return this[0]&&(y(e)&&(e=e.call(this[0])),e=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return y(n)?this.each(function(e){C(this).wrapInner(n.call(this,e))}):this.each(function(){var e=C(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=y(t);return this.each(function(e){C(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new w.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Yt=C.ajaxSettings.xhr(),Zt=(m.cors=!!Yt&&"withCredentials"in Yt,m.ajax=Yt=!!Yt,C.ajaxTransport(function(r){var s,o;if(m.cors||Yt&&!r.crossDomain)return{send:function(e,t){var n,i=r.xhr();if(i.open(r.type,r.url,r.async,r.username,r.password),r.xhrFields)for(n in r.xhrFields)i[n]=r.xhrFields[n];for(n in r.mimeType&&i.overrideMimeType&&i.overrideMimeType(r.mimeType),r.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);s=function(e){return function(){s&&(s=o=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(Vt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=s(),o=i.onerror=i.ontimeout=s("error"),void 0!==i.onabort?i.onabort=o:i.onreadystatechange=function(){4===i.readyState&&w.setTimeout(function(){s&&o()})},s=s("abort");try{i.send(r.hasContent&&r.data||null)}catch(e){if(s)throw e}},abort:function(){s&&s()}}}),C.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),C.ajaxTransport("script",function(n){var i,r;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){i=C("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",r=function(e){i.remove(),r=null,e&&t("error"===e.type?404:200,e.type)}),x.head.appendChild(i[0])},abort:function(){r&&r()}}}),[]),Kt=/(=)\?(?=&|$)|\?\?/,Gt=(C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Zt.pop()||C.expando+"_"+Tt.guid++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",function(e,t,n){var i,r,s,o=!1!==e.jsonp&&(Kt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Kt.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(Kt,"$1"+i):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return s||C.error(i+" was not called"),s[0]},e.dataTypes[0]="json",r=w[i],w[i]=function(){s=arguments},n.always(function(){void 0===r?C(w).removeProp(i):w[i]=r,e[i]&&(e.jsonpCallback=t.jsonpCallback,Zt.push(i)),s&&y(r)&&r(s[0]),s=r=void 0}),"script"}),m.createHTMLDocument=((e=x.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===e.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((i=(t=x.implementation.createHTMLDocument("")).createElement("base")).href=x.location.href,t.head.appendChild(i)):t=x),i=!n&&[],(n=Q.exec(e))?[t.createElement(n[1])]:(n=De([e],t,i),i&&i.length&&C(i).remove(),C.merge([],n.childNodes)));var i},C.fn.load=function(e,t,n){var i,r,s,o=this,a=e.indexOf(" ");return-1<a&&(i=j(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),0<o.length&&C.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){s=arguments,o.html(i?C("<div>").append(C.parseHTML(e)).find(i):e)}).always(n&&function(e,t){o.each(function(){n.apply(this,s||[e.responseText,t,e])})}),this},C.expr.pseudos.animated=function(t){return C.grep(C.timers,function(e){return t===e.elem}).length},C.offset={setOffset:function(e,t,n){var i,r,s,o,a=C.css(e,"position"),l=C(e),u={};"static"===a&&(e.style.position="relative"),s=l.offset(),i=C.css(e,"top"),o=C.css(e,"left"),a=("absolute"===a||"fixed"===a)&&-1<(i+o).indexOf("auto")?(r=(a=l.position()).top,a.left):(r=parseFloat(i)||0,parseFloat(o)||0),null!=(t=y(t)?t.call(e,n,C.extend({},s)):t).top&&(u.top=t.top-s.top+r),null!=t.left&&(u.left=t.left-s.left+a),"using"in t?t.using.call(e,u):l.css(u)}},C.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){C.offset.setOffset(this,t,e)});var e,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),n=n.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===C.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),r.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-C.css(i,"marginTop",!0),left:t.left-r.left-C.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||E})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,r){var s="pageYOffset"===r;C.fn[t]=function(e){return h(this,function(e,t,n){var i;if(g(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n)return i?i[r]:e[t];i?i.scrollTo(s?i.pageXOffset:n,s?n:i.pageYOffset):e[t]=n},t,e,arguments.length)}}),C.each(["top","left"],function(e,n){C.cssHooks[n]=Je(m.pixelPosition,function(e,t){if(t)return t=Xe(e,n),Ze.test(t)?C(e).position()[n]+"px":t})}),C.each({Height:"height",Width:"width"},function(o,a){C.each({padding:"inner"+o,content:a,"":"outer"+o},function(i,s){C.fn[s]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),r=i||(!0===e||!0===t?"margin":"border");return h(this,function(e,t,n){var i;return g(e)?0===s.indexOf("outer")?e["inner"+o]:e.document.documentElement["client"+o]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+o],i["scroll"+o],e.body["offset"+o],i["offset"+o],i["client"+o])):void 0===n?C.css(e,t,r):C.style(e,t,n,r)},a,n?e:void 0,n)}})}),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){C.fn[t]=function(e){return this.on(t,e)}}),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){C.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g),Qt=(C.proxy=function(e,t){var n,i;if("string"==typeof t&&(i=e[t],t=e,e=i),y(e))return n=a.call(arguments,2),(i=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||C.guid++,i},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=l,C.isFunction=y,C.isWindow=g,C.camelCase=_,C.type=p,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},C.trim=function(e){return null==e?"":(e+"").replace(Gt,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return C}),w.jQuery),Xt=w.$;return C.noConflict=function(e){return w.$===C&&(w.$=Xt),e&&w.jQuery===C&&(w.jQuery=Qt),C},void 0===M&&(w.jQuery=w.$=C),C}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Popper=t()}(this,function(){"use strict";var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,M=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(n&&0<=navigator.userAgent.indexOf(e[t]))return 1;return 0}();var P=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},M))}};function o(e){return e&&"[object Function]"==={}.toString.call(e)}function h(e,t){if(1!==e.nodeType)return[];e=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?e[t]:e}function l(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=h(e),n=t.overflow,i=t.overflowX,t=t.overflowY;return/(auto|scroll|overlay)/.test(n+t+i)?e:c(l(e))}function u(e){return e&&e.referenceNode?e.referenceNode:e}var t=n&&!(!window.MSInputMethodContext||!document.documentMode),z=n&&/MSIE 10/.test(navigator.userAgent);function d(e){return 11===e?t:10!==e&&t||z}function f(e){if(!e)return document.documentElement;for(var t=d(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===h(n,"position")?f(n):n:(e?e.ownerDocument:document).documentElement}function s(e){return null!==e.parentNode?s(e.parentNode):e}function p(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,n=n?t:e,r=document.createRange(),r=(r.setStart(i,0),r.setEnd(n,0),r.commonAncestorContainer);if(e!==r&&t!==r||i.contains(n))return"BODY"===(n=(i=r).nodeName)||"HTML"!==n&&f(i.firstElementChild)!==i?f(r):r;n=s(e);return n.host?p(n.host,t):p(e,s(t).host)}function g(e,t){var t="top"===(1<arguments.length&&void 0!==t?t:"top")?"scrollTop":"scrollLeft",n=e.nodeName;return"BODY"===n||"HTML"===n?(n=e.ownerDocument.documentElement,(e.ownerDocument.scrollingElement||n)[t]):e[t]}function r(e,t){var t="x"===t?"Left":"Top",n="Left"==t?"Right":"Bottom";return parseFloat(e["border"+t+"Width"])+parseFloat(e["border"+n+"Width"])}function i(e,t,n,i){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],d(10)?parseInt(n["offset"+e])+parseInt(i["margin"+("Height"===e?"Top":"Left")])+parseInt(i["margin"+("Height"===e?"Bottom":"Right")]):0)}function m(e){var t=e.body,e=e.documentElement,n=d(10)&&getComputedStyle(e);return{height:i("Height",t,e,n),width:i("Width",t,e,n)}}var e=function(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),e};function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,i=arguments[t];for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n])}return e};function _(e){return y({},e,{right:e.left+e.width,bottom:e.top+e.height})}function b(e){var t={};try{d(10)?(t=e.getBoundingClientRect(),n=g(e,"top"),i=g(e,"left"),t.top+=n,t.left+=i,t.bottom+=n,t.right+=i):t=e.getBoundingClientRect()}catch(e){}var n={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},i="HTML"===e.nodeName?m(e.ownerDocument):{},t=i.width||e.clientWidth||n.width,i=i.height||e.clientHeight||n.height,t=e.offsetWidth-t,i=e.offsetHeight-i;return(t||i)&&(t-=r(e=h(e),"x"),i-=r(e,"y"),n.width-=t,n.height-=i),_(n)}function w(e,t,n){var n=2<arguments.length&&void 0!==n&&n,i=d(10),r="HTML"===t.nodeName,s=b(e),o=b(t),e=c(e),a=h(t),l=parseFloat(a.borderTopWidth),u=parseFloat(a.borderLeftWidth),o=(n&&r&&(o.top=Math.max(o.top,0),o.left=Math.max(o.left,0)),_({top:s.top-o.top-l,left:s.left-o.left-u,width:s.width,height:s.height}));return o.marginTop=0,o.marginLeft=0,!i&&r&&(s=parseFloat(a.marginTop),r=parseFloat(a.marginLeft),o.top-=l-s,o.bottom-=l-s,o.left-=u-r,o.right-=u-r,o.marginTop=s,o.marginLeft=r),o=(i&&!n?t.contains(e):t===e&&"BODY"!==e.nodeName)?function(e,t,n){var n=2<arguments.length&&void 0!==n&&n,i=g(t,"top"),t=g(t,"left"),n=n?-1:1;return e.top+=i*n,e.bottom+=i*n,e.left+=t*n,e.right+=t*n,e}(o,t):o}function x(e){if(!e||!e.parentElement||d())return document.documentElement;for(var t=e.parentElement;t&&"none"===h(t,"transform");)t=t.parentElement;return t||document.documentElement}function C(e,t,n,i,r){var s,r=4<arguments.length&&void 0!==r&&r,o={top:0,left:0},a=r?x(e):p(e,u(t)),a=("viewport"===i?o=function(e,t){var t=1<arguments.length&&void 0!==t&&t,n=e.ownerDocument.documentElement,e=w(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),r=Math.max(n.clientHeight,window.innerHeight||0),s=t?0:g(n),t=t?0:g(n,"left");return _({top:s-e.top+e.marginTop,left:t-e.left+e.marginLeft,width:i,height:r})}(a,r):(s=void 0,"scrollParent"===i?"BODY"===(s=c(l(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===i?e.ownerDocument.documentElement:i,t=w(s,a,r),"HTML"!==s.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===h(t,"position"))return!0;n=l(t);return!!n&&e(n)}(a)?o=t:(r=(i=m(e.ownerDocument)).height,s=i.width,o.top+=t.top-t.marginTop,o.bottom=r+t.top,o.left+=t.left-t.marginLeft,o.right=s+t.left)),"number"==typeof(n=n||0));return o.left+=a?n:n.left||0,o.top+=a?n:n.top||0,o.right-=a?n:n.right||0,o.bottom-=a?n:n.bottom||0,o}function k(e,t,n,i,r,s){s=5<arguments.length&&void 0!==s?s:0;if(-1===e.indexOf("auto"))return e;var i=C(n,i,s,r),o={top:{width:i.width,height:t.top-i.top},right:{width:i.right-t.right,height:i.height},bottom:{width:i.width,height:i.bottom-t.bottom},left:{width:t.left-i.left,height:i.height}},s=Object.keys(o).map(function(e){return y({key:e},o[e],{area:(e=o[e]).width*e.height})}).sort(function(e,t){return t.area-e.area}),r=s.filter(function(e){var t=e.width,e=e.height;return t>=n.clientWidth&&e>=n.clientHeight}),t=(0<r.length?r:s)[0].key,i=e.split("-")[1];return t+(i?"-"+i:"")}function E(e,t,n,i){i=3<arguments.length&&void 0!==i?i:null;return w(n,i?x(t):p(t,u(n)),i)}function D(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),t=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+t,height:e.offsetHeight+n}}function T(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function S(e,t,n){n=n.split("-")[0];var e=D(e),i={width:e.width,height:e.height},r=-1!==["right","left"].indexOf(n),s=r?"top":"left",o=r?"left":"top",a=r?"height":"width",r=r?"width":"height";return i[s]=t[s]+t[a]/2-e[a]/2,i[o]=n===o?t[o]-e[r]:t[T(o)],i}function A(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function O(e,n,t){return(void 0===t?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=A(e,function(e){return e[t]===n});return e.indexOf(i)}(e,"name",t))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var t=e.function||e.fn;e.enabled&&o(t)&&(n.offsets.popper=_(n.offsets.popper),n.offsets.reference=_(n.offsets.reference),n=t(n,e))}),n}function F(e,n){return e.some(function(e){var t=e.name;return e.enabled&&t===n})}function I(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var r=t[i],r=r?""+r+n:e;if(void 0!==document.body.style[r])return r}return null}function $(e){e=e.ownerDocument;return e?e.defaultView:window}function U(e,t,n,i){n.updateBound=i,$(e).addEventListener("resize",n.updateBound,{passive:!0});i=c(e);return function e(t,n,i,r){var s="BODY"===t.nodeName,t=s?t.ownerDocument.defaultView:t;t.addEventListener(n,i,{passive:!0}),s||e(c(t.parentNode),n,i,r),r.push(t)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function B(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,$(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function N(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function L(n,i){Object.keys(i).forEach(function(e){var t="";-1!==["width","height","top","right","bottom","left"].indexOf(e)&&N(i[e])&&(t="px"),n.style[e]=i[e]+t})}function H(e,t){function n(e){return e}var i=e.offsets,r=i.popper,i=i.reference,s=Math.round,o=Math.floor,i=s(i.width),a=s(r.width),l=-1!==["left","right"].indexOf(e.placement),e=-1!==e.placement.indexOf("-"),l=t?l||e||i%2==a%2?s:o:n,o=t?s:n;return{left:l(i%2==1&&a%2==1&&!e&&t?r.left-1:r.left),top:o(r.top),bottom:o(r.bottom),right:l(r.right)}}var q=n&&/Firefox/i.test(navigator.userAgent);function W(e,t,n){var i,r=A(e,function(e){return e.name===t}),e=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});return e||(i="`"+t+"`",console.warn("`"+n+"`"+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")),e}var V=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],j=V.slice(3);function Y(e,t){t=1<arguments.length&&void 0!==t&&t,e=j.indexOf(e),e=j.slice(e+1).concat(j.slice(0,e));return t?e.reverse():e}var Z="flip",K="clockwise",G="counterclockwise";function Q(e,a,l,t){var r=[0,0],i=-1!==["right","left"].indexOf(t),t=e.split(/(\+|\-)/).map(function(e){return e.trim()}),e=t.indexOf(A(t,function(e){return-1!==e.search(/,|\s/)})),n=(t[e]&&-1===t[e].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead."),/\s*,\s*|\s+/);return(-1!==e?[t.slice(0,e).concat([t[e].split(n)[0]]),[t[e].split(n)[1]].concat(t.slice(e+1))]:[t]).map(function(e,t){var o=(1===t?!i:i)?"height":"width",n=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,n=!0,e):n?(e[e.length-1]+=t,n=!1,e):e.concat(t)},[]).map(function(e){return t=o,n=a,i=l,r=+(s=(e=e).match(/((?:\-|\+)?\d*\.?\d*)(.*)/))[1],s=s[2],r?0===s.indexOf("%")?_("%p"===s?n:i)[t]/100*r:"vh"===s||"vw"===s?("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r:r:e;var t,n,i,r,s})}).forEach(function(n,i){n.forEach(function(e,t){N(e)&&(r[i]+=e*("-"===n[t-1]?-1:1))})}),r}var X={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t,n,i,r=e.placement,s=r.split("-")[0];return(r=r.split("-")[1])&&(t=(n=e.offsets).reference,n=n.popper,i=(s=-1!==["bottom","top"].indexOf(s))?"width":"height",s={start:v({},s=s?"left":"top",t[s]),end:v({},s,t[s]+t[i]-n[i])},e.offsets.popper=y({},n,s[r])),e}},offset:{order:200,enabled:!0,fn:function(e,t){var t=t.offset,n=e.placement,i=(r=e.offsets).popper,r=r.reference,n=n.split("-")[0],s=void 0,s=N(+t)?[+t,0]:Q(t,i,r,n);return"left"===n?(i.top+=s[0],i.left-=s[1]):"right"===n?(i.top+=s[0],i.left+=s[1]):"top"===n?(i.left+=s[0],i.top-=s[1]):"bottom"===n&&(i.left+=s[0],i.top+=s[1]),e.popper=i,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,i){var t=i.boundariesElement||f(e.instance.popper),n=(e.instance.reference===t&&(t=f(t)),I("transform")),r=e.instance.popper.style,s=r.top,o=r.left,a=r[n],l=(r.top="",r.left="",r[n]="",C(e.instance.popper,e.instance.reference,i.padding,t,e.positionFixed)),t=(r.top=s,r.left=o,r[n]=a,i.boundaries=l,i.priority),u=e.offsets.popper,c={primary:function(e){var t=u[e];return u[e]<l[e]&&!i.escapeWithReference&&(t=Math.max(u[e],l[e])),v({},e,t)},secondary:function(e){var t="right"===e?"left":"top",n=u[t];return u[e]>l[e]&&!i.escapeWithReference&&(n=Math.min(u[t],l[e]-("right"===e?u.width:u.height))),v({},t,n)}};return t.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";u=y({},u,c[t](e))}),e.offsets.popper=u,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=(n=e.offsets).popper,n=n.reference,i=e.placement.split("-")[0],r=Math.floor,s=(i=-1!==["top","bottom"].indexOf(i))?"right":"bottom",o=i?"left":"top",i=i?"width":"height";return t[s]<r(n[o])&&(e.offsets.popper[o]=r(n[o])-t[i]),t[o]>r(n[s])&&(e.offsets.popper[o]=r(n[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){if(!W(e.instance.modifiers,"arrow","keepTogether"))return e;if("string"==typeof(t=t.element)){if(!(t=e.instance.popper.querySelector(t)))return e}else if(!e.instance.popper.contains(t))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var n=e.placement.split("-")[0],i=(r=e.offsets).popper,r=r.reference,s=(n=-1!==["left","right"].indexOf(n))?"height":"width",o=(c=n?"Top":"Left").toLowerCase(),a=n?"left":"top",n=n?"bottom":"right",l=D(t)[s],n=(r[n]-l<i[o]&&(e.offsets.popper[o]-=i[o]-(r[n]-l)),r[o]+l>i[n]&&(e.offsets.popper[o]+=r[o]+l-i[n]),e.offsets.popper=_(e.offsets.popper),r[o]+r[s]/2-l/2),r=h(e.instance.popper),u=parseFloat(r["margin"+c]),r=parseFloat(r["border"+c+"Width"]),c=n-e.offsets.popper[o]-u-r,c=Math.max(Math.min(i[s]-l,c),0);return e.arrowElement=t,e.offsets.arrow=(v(n={},o,Math.round(c)),v(n,a,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(u,c){if(F(u.instance.modifiers,"inner"))return u;if(u.flipped&&u.placement===u.originalPlacement)return u;var h=C(u.instance.popper,u.instance.reference,c.padding,c.boundariesElement,u.positionFixed),d=u.placement.split("-")[0],f=T(d),p=u.placement.split("-")[1]||"",g=[];switch(c.behavior){case Z:g=[d,f];break;case K:g=Y(d);break;case G:g=Y(d,!0);break;default:g=c.behavior}return g.forEach(function(e,t){if(d!==e||g.length===t+1)return u;d=u.placement.split("-")[0],f=T(d);var e=u.offsets.popper,n=u.offsets.reference,i=Math.floor,n="left"===d&&i(e.right)>i(n.left)||"right"===d&&i(e.left)<i(n.right)||"top"===d&&i(e.bottom)>i(n.top)||"bottom"===d&&i(e.top)<i(n.bottom),r=i(e.left)<i(h.left),s=i(e.right)>i(h.right),o=i(e.top)<i(h.top),e=i(e.bottom)>i(h.bottom),i="left"===d&&r||"right"===d&&s||"top"===d&&o||"bottom"===d&&e,a=-1!==["top","bottom"].indexOf(d),l=!!c.flipVariations&&(a&&"start"===p&&r||a&&"end"===p&&s||!a&&"start"===p&&o||!a&&"end"===p&&e),s=!!c.flipVariationsByContent&&(a&&"start"===p&&s||a&&"end"===p&&r||!a&&"start"===p&&e||!a&&"end"===p&&o),r=l||s;(n||i||r)&&(u.flipped=!0,(n||i)&&(d=g[t+1]),r&&(p="end"===(e=p)?"start":"start"===e?"end":e),u.placement=d+(p?"-"+p:""),u.offsets.popper=y({},u.offsets.popper,S(u.instance.popper,u.offsets.reference,u.placement)),u=O(u.instance.modifiers,u,"flip"))}),u},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],i=(r=e.offsets).popper,r=r.reference,s=-1!==["left","right"].indexOf(n),o=-1===["top","left"].indexOf(n);return i[s?"left":"top"]=r[n]-(o?i[s?"width":"height"]:0),e.placement=T(t),e.offsets.popper=_(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!W(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=A(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,i=t.y,r=e.offsets.popper,s=(void 0!==(s=A(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration)&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!"),void 0!==s?s:t.gpuAcceleration),o=b(t=f(e.instance.popper)),r={position:r.position},a=H(e,window.devicePixelRatio<2||!q),n="bottom"===n?"top":"bottom",i="right"===i?"left":"right",l=I("transform"),u=void 0,c=void 0,c="bottom"==n?"HTML"===t.nodeName?-t.clientHeight+a.bottom:-o.height+a.bottom:a.top,u="right"==i?"HTML"===t.nodeName?-t.clientWidth+a.right:-o.width+a.right:a.left,o=(s&&l?(r[l]="translate3d("+u+"px, "+c+"px, 0)",r[n]=0,r[i]=0,r.willChange="transform"):(t="right"==i?-1:1,r[n]=c*("bottom"==n?-1:1),r[i]=u*t,r.willChange=n+", "+i),{"x-placement":e.placement});return e.attributes=y({},o,e.attributes),e.styles=y({},r,e.styles),e.arrowStyles=y({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return L(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&L(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,i,r){return r=E(r,t,e,n.positionFixed),r=k(n.placement,r,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding),t.setAttribute("x-placement",r),L(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},e=(e(R,[{key:"update",value:function(){return function(){var e;this.state.isDestroyed||((e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}}).offsets.reference=E(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=k(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=S(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=O(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e)))}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,F(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[I("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=U(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return B.call(this)}}]),R);function R(e,t){var n=this,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},r=this,s=R;if(!(r instanceof s))throw new TypeError("Cannot call a class as a function");this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=P(this.update.bind(this)),this.options=y({},R.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=t&&t.jquery?t[0]:t,this.options.modifiers={},Object.keys(y({},R.Defaults.modifiers,i.modifiers)).forEach(function(e){n.options.modifiers[e]=y({},R.Defaults.modifiers[e]||{},i.modifiers?i.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return y({name:e},n.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&o(e.onLoad)&&e.onLoad(n.reference,n.popper,n.options,e,n.state)}),this.update();r=this.options.eventsEnabled;r&&this.enableEventListeners(),this.state.eventsEnabled=r}return e.Utils=("undefined"!=typeof window?window:global).PopperUtils,e.placements=V,e.Defaults=X,e}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("jquery"),require("popper.js")):"function"==typeof define&&define.amd?define(["exports","jquery","popper.js"],t):t((e=e||self).bootstrap={},e.jQuery,e.Popper)}(this,function(e,c,r){"use strict";function M(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function o(e,t,n){t&&M(e.prototype,t),n&&M(e,n)}function a(i){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},t=Object.keys(r);(t="function"==typeof Object.getOwnPropertySymbols?t.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})):t).forEach(function(e){var t,n;t=i,n=r[e=e],e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n})}return i}c=c&&c.hasOwnProperty("default")?c.default:c,r=r&&r.hasOwnProperty("default")?r.default:r;var P="transitionend";function z(e){var t=this,n=!1;return c(this).one(h.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||h.triggerTransitionEnd(t)},e),this}var h={TRANSITION_END:"bsTransitionEnd",getUID:function(e){for(;e+=~~(1e6*Math.random()),document.getElementById(e););return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");t&&"#"!==t||(t=(e=e.getAttribute("href"))&&"#"!==e?e.trim():"");try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var t=c(e).css("transition-duration"),e=c(e).css("transition-delay"),n=parseFloat(t),i=parseFloat(e);return n||i?(t=t.split(",")[0],e=e.split(",")[0],1e3*(parseFloat(t)+parseFloat(e))):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){c(e).trigger(P)},supportsTransitionEnd:function(){return Boolean(P)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var r=n[i],s=t[i],s=s&&h.isElement(s)?"element":{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(r).test(s))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+r+'".')}},findShadowRoot:function(e){return document.documentElement.attachShadow?"function"==typeof e.getRootNode?(t=e.getRootNode())instanceof ShadowRoot?t:null:e instanceof ShadowRoot?e:e.parentNode?h.findShadowRoot(e.parentNode):null:null;var t}},F=(c.fn.emulateTransitionEnd=z,c.event.special[h.TRANSITION_END]={bindType:P,delegateType:P,handle:function(e){if(c(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}},"alert"),$="bs.alert",t="."+$,U=c.fn[F],B={CLOSE:"close"+t,CLOSED:"closed"+t,CLICK_DATA_API:"click"+t+".data-api"},H="alert",q="fade",W="show",n=function(){function i(e){this._element=e}var e=i.prototype;return e.close=function(e){var t=this._element;e&&(t=this._getRootElement(e)),this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},e.dispose=function(){c.removeData(this._element,$),this._element=null},e._getRootElement=function(e){var t=h.getSelectorFromElement(e),n=!1;return n=(n=t?document.querySelector(t):n)||c(e).closest("."+H)[0]},e._triggerCloseEvent=function(e){var t=c.Event(B.CLOSE);return c(e).trigger(t),t},e._removeElement=function(t){var e,n=this;c(t).removeClass(W),c(t).hasClass(q)?(e=h.getTransitionDurationFromElement(t),c(t).one(h.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(e)):this._destroyElement(t)},e._destroyElement=function(e){c(e).detach().trigger(B.CLOSED).remove()},i._jQueryInterface=function(n){return this.each(function(){var e=c(this),t=e.data($);t||(t=new i(this),e.data($,t)),"close"===n&&t[n](this)})},i._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},o(i,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),i}(),V=(c(document).on(B.CLICK_DATA_API,'[data-dismiss="alert"]',n._handleDismiss(new n)),c.fn[F]=n._jQueryInterface,c.fn[F].Constructor=n,c.fn[F].noConflict=function(){return c.fn[F]=U,n._jQueryInterface},"button"),Y="bs.button",t="."+Y,i=".data-api",Z=c.fn[V],K="active",G="btn",Q="focus",s='[data-toggle^="button"]',X='[data-toggle="buttons"]',J='input:not([type="hidden"])',ee=".active",te=".btn",t={CLICK_DATA_API:"click"+t+i,FOCUS_BLUR_DATA_API:"focus"+t+i+" blur"+t+i},ne=function(){function n(e){this._element=e}var e=n.prototype;return e.toggle=function(){var e=!0,t=!0,n=c(this._element).closest(X)[0];if(n){var i,r=this._element.querySelector(J);if(r){if("radio"===r.type&&(r.checked&&this._element.classList.contains(K)?e=!1:(i=n.querySelector(ee))&&c(i).removeClass(K)),e){if(r.hasAttribute("disabled")||n.hasAttribute("disabled")||r.classList.contains("disabled")||n.classList.contains("disabled"))return;r.checked=!this._element.classList.contains(K),c(r).trigger("change")}r.focus(),t=!1}}t&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(K)),e&&c(this._element).toggleClass(K)},e.dispose=function(){c.removeData(this._element,Y),this._element=null},n._jQueryInterface=function(t){return this.each(function(){var e=c(this).data(Y);e||(e=new n(this),c(this).data(Y,e)),"toggle"===t&&e[t]()})},o(n,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),n}(),l=(c(document).on(t.CLICK_DATA_API,s,function(e){e.preventDefault();e=e.target;c(e).hasClass(G)||(e=c(e).closest(te)),ne._jQueryInterface.call(c(e),"toggle")}).on(t.FOCUS_BLUR_DATA_API,s,function(e){var t=c(e.target).closest(te)[0];c(t).toggleClass(Q,/^focus(in)?$/.test(e.type))}),c.fn[V]=ne._jQueryInterface,c.fn[V].Constructor=ne,c.fn[V].noConflict=function(){return c.fn[V]=Z,ne._jQueryInterface},"carousel"),ie="bs.carousel",u="."+ie,i=".data-api",re=c.fn[l],se={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},oe={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},ae="next",le="prev",ue="left",ce="right",d={SLIDE:"slide"+u,SLID:"slid"+u,KEYDOWN:"keydown"+u,MOUSEENTER:"mouseenter"+u,MOUSELEAVE:"mouseleave"+u,TOUCHSTART:"touchstart"+u,TOUCHMOVE:"touchmove"+u,TOUCHEND:"touchend"+u,POINTERDOWN:"pointerdown"+u,POINTERUP:"pointerup"+u,DRAG_START:"dragstart"+u,LOAD_DATA_API:"load"+u+i,CLICK_DATA_API:"click"+u+i},he="carousel",f="active",de="slide",fe="carousel-item-right",pe="carousel-item-left",ge="carousel-item-next",me="carousel-item-prev",ve="pointer-event",ye=".active",_e=".active.carousel-item",be=".carousel-item",we=".carousel-item img",xe=".carousel-item-next, .carousel-item-prev",Ce=".carousel-indicators",t="[data-slide], [data-slide-to]",ke='[data-ride="carousel"]',Ee={TOUCH:"touch",PEN:"pen"},p=function(){function r(e,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._element=e,this._indicatorsElement=this._element.querySelector(Ce),this._touchSupported="ontouchstart"in document.documentElement||0<navigator.maxTouchPoints,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var e=r.prototype;return e.next=function(){this._isSliding||this._slide(ae)},e.nextWhenVisible=function(){!document.hidden&&c(this._element).is(":visible")&&"hidden"!==c(this._element).css("visibility")&&this.next()},e.prev=function(){this._isSliding||this._slide(le)},e.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(xe)&&(h.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},e.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},e.to=function(e){var t=this,n=(this._activeElement=this._element.querySelector(_e),this._getItemIndex(this._activeElement));if(!(e>this._items.length-1||e<0))if(this._isSliding)c(this._element).one(d.SLID,function(){return t.to(e)});else{if(n===e)return this.pause(),void this.cycle();n=n<e?ae:le;this._slide(n,this._items[e])}},e.dispose=function(){c(this._element).off(u),c.removeData(this._element,ie),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},e._getConfig=function(e){return e=a({},se,e),h.typeCheckConfig(l,e,oe),e},e._handleSwipe=function(){var e=Math.abs(this.touchDeltaX);e<=40||(0<(e=e/this.touchDeltaX)&&this.prev(),e<0&&this.next())},e._addEventListeners=function(){var t=this;this._config.keyboard&&c(this._element).on(d.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&c(this._element).on(d.MOUSEENTER,function(e){return t.pause(e)}).on(d.MOUSELEAVE,function(e){return t.cycle(e)}),this._config.touch&&this._addTouchEventListeners()},e._addTouchEventListeners=function(){var e,t,n=this;this._touchSupported&&(e=function(e){n._pointerEvent&&Ee[e.originalEvent.pointerType.toUpperCase()]?n.touchStartX=e.originalEvent.clientX:n._pointerEvent||(n.touchStartX=e.originalEvent.touches[0].clientX)},t=function(e){n._pointerEvent&&Ee[e.originalEvent.pointerType.toUpperCase()]&&(n.touchDeltaX=e.originalEvent.clientX-n.touchStartX),n._handleSwipe(),"hover"===n._config.pause&&(n.pause(),n.touchTimeout&&clearTimeout(n.touchTimeout),n.touchTimeout=setTimeout(function(e){return n.cycle(e)},500+n._config.interval))},c(this._element.querySelectorAll(we)).on(d.DRAG_START,function(e){return e.preventDefault()}),this._pointerEvent?(c(this._element).on(d.POINTERDOWN,e),c(this._element).on(d.POINTERUP,t),this._element.classList.add(ve)):(c(this._element).on(d.TOUCHSTART,e),c(this._element).on(d.TOUCHMOVE,function(e){(e=e).originalEvent.touches&&1<e.originalEvent.touches.length?n.touchDeltaX=0:n.touchDeltaX=e.originalEvent.touches[0].clientX-n.touchStartX}),c(this._element).on(d.TOUCHEND,t)))},e._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},e._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(be)):[],this._items.indexOf(e)},e._getItemByDirection=function(e,t){var n=e===ae,i=e===le,r=this._getItemIndex(t),s=this._items.length-1;if((i&&0===r||n&&r===s)&&!this._config.wrap)return t;i=(r+(e===le?-1:1))%this._items.length;return-1==i?this._items[this._items.length-1]:this._items[i]},e._triggerSlideEvent=function(e,t){var n=this._getItemIndex(e),i=this._getItemIndex(this._element.querySelector(_e)),e=c.Event(d.SLIDE,{relatedTarget:e,direction:t,from:i,to:n});return c(this._element).trigger(e),e},e._setActiveIndicatorElement=function(e){var t;this._indicatorsElement&&(t=[].slice.call(this._indicatorsElement.querySelectorAll(ye)),c(t).removeClass(f),(t=this._indicatorsElement.children[this._getItemIndex(e)])&&c(t).addClass(f))},e._slide=function(e,t){var n,i,r,s=this,o=this._element.querySelector(_e),a=this._getItemIndex(o),l=t||o&&this._getItemByDirection(e,o),t=this._getItemIndex(l),u=Boolean(this._interval),e=e===ae?(n=pe,i=ge,ue):(n=fe,i=me,ce);l&&c(l).hasClass(f)?this._isSliding=!1:this._triggerSlideEvent(l,e).isDefaultPrevented()||o&&l&&(this._isSliding=!0,u&&this.pause(),this._setActiveIndicatorElement(l),r=c.Event(d.SLID,{relatedTarget:l,direction:e,from:a,to:t}),c(this._element).hasClass(de)?(c(l).addClass(i),h.reflow(l),c(o).addClass(n),c(l).addClass(n),(e=parseInt(l.getAttribute("data-interval"),10))?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval,a=h.getTransitionDurationFromElement(o),c(o).one(h.TRANSITION_END,function(){c(l).removeClass(n+" "+i).addClass(f),c(o).removeClass(f+" "+i+" "+n),s._isSliding=!1,setTimeout(function(){return c(s._element).trigger(r)},0)}).emulateTransitionEnd(a)):(c(o).removeClass(f),c(l).addClass(f),this._isSliding=!1,c(this._element).trigger(r)),u&&this.cycle())},r._jQueryInterface=function(i){return this.each(function(){var e=c(this).data(ie),t=a({},se,c(this).data()),n=("object"==typeof i&&(t=a({},t,i)),"string"==typeof i?i:t.slide);if(e||(e=new r(this,t),c(this).data(ie,e)),"number"==typeof i)e.to(i);else if("string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}else t.interval&&t.ride&&(e.pause(),e.cycle())})},r._dataApiClickHandler=function(e){var t,n,i=h.getSelectorFromElement(this);!i||(i=c(i)[0])&&c(i).hasClass(he)&&(t=a({},c(i).data(),c(this).data()),(n=this.getAttribute("data-slide-to"))&&(t.interval=!1),r._jQueryInterface.call(c(i),t),n&&c(i).data(ie).to(n),e.preventDefault())},o(r,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return se}}]),r}(),g=(c(document).on(d.CLICK_DATA_API,t,p._dataApiClickHandler),c(window).on(d.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(ke)),t=0,n=e.length;t<n;t++){var i=c(e[t]);p._jQueryInterface.call(i,i.data())}}),c.fn[l]=p._jQueryInterface,c.fn[l].Constructor=p,c.fn[l].noConflict=function(){return c.fn[l]=re,p._jQueryInterface},"collapse"),m="bs.collapse",s="."+m,De=c.fn[g],Te={toggle:!0,parent:""},Se={toggle:"boolean",parent:"(string|element)"},Ae={SHOW:"show"+s,SHOWN:"shown"+s,HIDE:"hide"+s,HIDDEN:"hidden"+s,CLICK_DATA_API:"click"+s+".data-api"},v="show",Oe="collapse",Ie="collapsing",Ne="collapsed",Le="width",je="height",Re=".show, .collapsing",Me='[data-toggle="collapse"]',Pe=function(){function s(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(Me)),i=0,r=n.length;i<r;i++){var s=n[i],o=h.getSelectorFromElement(s),a=[].slice.call(document.querySelectorAll(o)).filter(function(e){return e===t});null!==o&&0<a.length&&(this._selector=o,this._triggerArray.push(s))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e=s.prototype;return e.toggle=function(){c(this._element).hasClass(v)?this.hide():this.show()},e.show=function(){var e,t,n,i,r=this;this._isTransitioning||c(this._element).hasClass(v)||(e=this._parent&&0===(e=[].slice.call(this._parent.querySelectorAll(Re)).filter(function(e){return"string"==typeof r._config.parent?e.getAttribute("data-parent")===r._config.parent:e.classList.contains(Oe)})).length?null:e)&&(i=c(e).not(this._selector).data(m))&&i._isTransitioning||(n=c.Event(Ae.SHOW),c(this._element).trigger(n),n.isDefaultPrevented()||(e&&(s._jQueryInterface.call(c(e).not(this._selector),"hide"),i||c(e).data(m,null)),t=this._getDimension(),c(this._element).removeClass(Oe).addClass(Ie),this._element.style[t]=0,this._triggerArray.length&&c(this._triggerArray).removeClass(Ne).attr("aria-expanded",!0),this.setTransitioning(!0),n="scroll"+(t[0].toUpperCase()+t.slice(1)),i=h.getTransitionDurationFromElement(this._element),c(this._element).one(h.TRANSITION_END,function(){c(r._element).removeClass(Ie).addClass(Oe).addClass(v),r._element.style[t]="",r.setTransitioning(!1),c(r._element).trigger(Ae.SHOWN)}).emulateTransitionEnd(i),this._element.style[t]=this._element[n]+"px"))},e.hide=function(){var e=this;if(!this._isTransitioning&&c(this._element).hasClass(v)){var t=c.Event(Ae.HIDE);if(c(this._element).trigger(t),!t.isDefaultPrevented()){var t=this._getDimension(),n=(this._element.style[t]=this._element.getBoundingClientRect()[t]+"px",h.reflow(this._element),c(this._element).addClass(Ie).removeClass(Oe).removeClass(v),this._triggerArray.length);if(0<n)for(var i=0;i<n;i++){var r=this._triggerArray[i],s=h.getSelectorFromElement(r);null===s||c([].slice.call(document.querySelectorAll(s))).hasClass(v)||c(r).addClass(Ne).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[t]="";t=h.getTransitionDurationFromElement(this._element);c(this._element).one(h.TRANSITION_END,function(){e.setTransitioning(!1),c(e._element).removeClass(Ie).addClass(Oe).trigger(Ae.HIDDEN)}).emulateTransitionEnd(t)}}},e.setTransitioning=function(e){this._isTransitioning=e},e.dispose=function(){c.removeData(this._element,m),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},e._getConfig=function(e){return(e=a({},Te,e)).toggle=Boolean(e.toggle),h.typeCheckConfig(g,e,Se),e},e._getDimension=function(){return c(this._element).hasClass(Le)?Le:je},e._getParent=function(){var e,n=this,t=(h.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=document.querySelector(this._config.parent),'[data-toggle="collapse"][data-parent="'+this._config.parent+'"]'),t=[].slice.call(e.querySelectorAll(t));return c(t).each(function(e,t){n._addAriaAndCollapsedClass(s._getTargetFromElement(t),[t])}),e},e._addAriaAndCollapsedClass=function(e,t){e=c(e).hasClass(v);t.length&&c(t).toggleClass(Ne,!e).attr("aria-expanded",e)},s._getTargetFromElement=function(e){e=h.getSelectorFromElement(e);return e?document.querySelector(e):null},s._jQueryInterface=function(i){return this.each(function(){var e=c(this),t=e.data(m),n=a({},Te,e.data(),"object"==typeof i&&i?i:{});if(!t&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),t||(t=new s(this,n),e.data(m,t)),"string"==typeof i){if(void 0===t[i])throw new TypeError('No method named "'+i+'"');t[i]()}})},o(s,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Te}}]),s}(),y=(c(document).on(Ae.CLICK_DATA_API,Me,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var n=c(this),e=h.getSelectorFromElement(this),e=[].slice.call(document.querySelectorAll(e));c(e).each(function(){var e=c(this),t=e.data(m)?"toggle":n.data();Pe._jQueryInterface.call(e,t)})}),c.fn[g]=Pe._jQueryInterface,c.fn[g].Constructor=Pe,c.fn[g].noConflict=function(){return c.fn[g]=De,Pe._jQueryInterface},"dropdown"),ze="bs.dropdown",_="."+ze,i=".data-api",Fe=c.fn[y],$e=new RegExp("38|40|27"),b={HIDE:"hide"+_,HIDDEN:"hidden"+_,SHOW:"show"+_,SHOWN:"shown"+_,CLICK:"click"+_,CLICK_DATA_API:"click"+_+i,KEYDOWN_DATA_API:"keydown"+_+i,KEYUP_DATA_API:"keyup"+_+i},Ue="disabled",w="show",Be="dropup",He="dropright",qe="dropleft",We="dropdown-menu-right",Ve="position-static",Ye='[data-toggle="dropdown"]',t=".dropdown form",Ze=".dropdown-menu",Ke=".navbar-nav",Ge=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Qe="top-start",Xe="top-end",Je="bottom-start",et="bottom-end",tt="right-start",nt="left-start",it={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},rt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},x=function(){function l(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e=l.prototype;return e.toggle=function(){if(!this._element.disabled&&!c(this._element).hasClass(Ue)){var e=l._getParentFromElement(this._element),t=c(this._menu).hasClass(w);if(l._clearMenus(),!t){var t={relatedTarget:this._element},n=c.Event(b.SHOW,t);if(c(e).trigger(n),!n.isDefaultPrevented()){if(!this._inNavbar){if(void 0===r)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");n=this._element;"parent"===this._config.reference?n=e:h.isElement(this._config.reference)&&(n=this._config.reference,void 0!==this._config.reference.jquery&&(n=this._config.reference[0])),"scrollParent"!==this._config.boundary&&c(e).addClass(Ve),this._popper=new r(n,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===c(e).closest(Ke).length&&c(document.body).children().on("mouseover",null,c.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),c(this._menu).toggleClass(w),c(e).toggleClass(w).trigger(c.Event(b.SHOWN,t))}}}},e.show=function(){var e,t,n;this._element.disabled||c(this._element).hasClass(Ue)||c(this._menu).hasClass(w)||(e={relatedTarget:this._element},t=c.Event(b.SHOW,e),n=l._getParentFromElement(this._element),c(n).trigger(t),t.isDefaultPrevented()||(c(this._menu).toggleClass(w),c(n).toggleClass(w).trigger(c.Event(b.SHOWN,e))))},e.hide=function(){var e,t,n;this._element.disabled||c(this._element).hasClass(Ue)||!c(this._menu).hasClass(w)||(e={relatedTarget:this._element},t=c.Event(b.HIDE,e),n=l._getParentFromElement(this._element),c(n).trigger(t),t.isDefaultPrevented()||(c(this._menu).toggleClass(w),c(n).toggleClass(w).trigger(c.Event(b.HIDDEN,e))))},e.dispose=function(){c.removeData(this._element,ze),c(this._element).off(_),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},e.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},e._addEventListeners=function(){var t=this;c(this._element).on(b.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},e._getConfig=function(e){return e=a({},this.constructor.Default,c(this._element).data(),e),h.typeCheckConfig(y,e,this.constructor.DefaultType),e},e._getMenuElement=function(){var e;return this._menu||(e=l._getParentFromElement(this._element))&&(this._menu=e.querySelector(Ze)),this._menu},e._getPlacement=function(){var e=c(this._element.parentNode),t=Je;return e.hasClass(Be)?(t=Qe,c(this._menu).hasClass(We)&&(t=Xe)):e.hasClass(He)?t=tt:e.hasClass(qe)?t=nt:c(this._menu).hasClass(We)&&(t=et),t},e._detectNavbar=function(){return 0<c(this._element).closest(".navbar").length},e._getOffset=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,t._config.offset(e.offsets,t._element)||{}),e}:e.offset=this._config.offset,e},e._getPopperConfig=function(){var e={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),e},l._jQueryInterface=function(t){return this.each(function(){var e=c(this).data(ze);if(e||(e=new l(this,"object"==typeof t?t:null),c(this).data(ze,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},l._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var t=[].slice.call(document.querySelectorAll(Ye)),n=0,i=t.length;n<i;n++){var r,s=l._getParentFromElement(t[n]),o=c(t[n]).data(ze),a={relatedTarget:t[n]};e&&"click"===e.type&&(a.clickEvent=e),o&&(o=o._menu,!c(s).hasClass(w)||e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&c.contains(s,e.target)||(r=c.Event(b.HIDE,a),c(s).trigger(r),r.isDefaultPrevented()||("ontouchstart"in document.documentElement&&c(document.body).children().off("mouseover",null,c.noop),t[n].setAttribute("aria-expanded","false"),c(o).removeClass(w),c(s).removeClass(w).trigger(c.Event(b.HIDDEN,a)))))}},l._getParentFromElement=function(e){var t,n=h.getSelectorFromElement(e);return(t=n?document.querySelector(n):t)||e.parentNode},l._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||c(e.target).closest(Ze).length)):$e.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!c(this).hasClass(Ue))){var t=l._getParentFromElement(this),n=c(t).hasClass(w);if(!n||27===e.which||32===e.which)return 27===e.which&&(n=t.querySelector(Ye),c(n).trigger("focus")),void c(this).trigger("click");n=[].slice.call(t.querySelectorAll(Ge));0!==n.length&&(t=n.indexOf(e.target),38===e.which&&0<t&&t--,40===e.which&&t<n.length-1&&t++,n[t=t<0?0:t].focus())}},o(l,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return it}},{key:"DefaultType",get:function(){return rt}}]),l}(),C=(c(document).on(b.KEYDOWN_DATA_API,Ye,x._dataApiKeydownHandler).on(b.KEYDOWN_DATA_API,Ze,x._dataApiKeydownHandler).on(b.CLICK_DATA_API+" "+b.KEYUP_DATA_API,x._clearMenus).on(b.CLICK_DATA_API,Ye,function(e){e.preventDefault(),e.stopPropagation(),x._jQueryInterface.call(c(this),"toggle")}).on(b.CLICK_DATA_API,t,function(e){e.stopPropagation()}),c.fn[y]=x._jQueryInterface,c.fn[y].Constructor=x,c.fn[y].noConflict=function(){return c.fn[y]=Fe,x._jQueryInterface},"modal"),st="bs.modal",k="."+st,ot=c.fn[C],at={backdrop:!0,keyboard:!0,focus:!0,show:!0},lt={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},E={HIDE:"hide"+k,HIDDEN:"hidden"+k,SHOW:"show"+k,SHOWN:"shown"+k,FOCUSIN:"focusin"+k,RESIZE:"resize"+k,CLICK_DISMISS:"click.dismiss"+k,KEYDOWN_DISMISS:"keydown.dismiss"+k,MOUSEUP_DISMISS:"mouseup.dismiss"+k,MOUSEDOWN_DISMISS:"mousedown.dismiss"+k,CLICK_DATA_API:"click"+k+".data-api"},ut="modal-dialog-scrollable",ct="modal-scrollbar-measure",ht="modal-backdrop",dt="modal-open",D="fade",ft="show",pt=".modal-dialog",gt=".modal-body",s='[data-toggle="modal"]',mt='[data-dismiss="modal"]',vt=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",yt=".sticky-top",_t=function(){function r(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(pt),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var e=r.prototype;return e.toggle=function(e){return this._isShown?this.hide():this.show(e)},e.show=function(e){var t,n=this;this._isShown||this._isTransitioning||(c(this._element).hasClass(D)&&(this._isTransitioning=!0),t=c.Event(E.SHOW,{relatedTarget:e}),c(this._element).trigger(t),this._isShown||t.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),c(this._element).on(E.CLICK_DISMISS,mt,function(e){return n.hide(e)}),c(this._dialog).on(E.MOUSEDOWN_DISMISS,function(){c(n._element).one(E.MOUSEUP_DISMISS,function(e){c(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(e)})))},e.hide=function(e){var t=this;e&&e.preventDefault(),this._isShown&&!this._isTransitioning&&(e=c.Event(E.HIDE),c(this._element).trigger(e),this._isShown&&!e.isDefaultPrevented()&&(this._isShown=!1,(e=c(this._element).hasClass(D))&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),c(document).off(E.FOCUSIN),c(this._element).removeClass(ft),c(this._element).off(E.CLICK_DISMISS),c(this._dialog).off(E.MOUSEDOWN_DISMISS),e?(e=h.getTransitionDurationFromElement(this._element),c(this._element).one(h.TRANSITION_END,function(e){return t._hideModal(e)}).emulateTransitionEnd(e)):this._hideModal()))},e.dispose=function(){[window,this._element,this._dialog].forEach(function(e){return c(e).off(k)}),c(document).off(E.FOCUSIN),c.removeData(this._element,st),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},e.handleUpdate=function(){this._adjustDialog()},e._getConfig=function(e){return e=a({},at,e),h.typeCheckConfig(C,e,lt),e},e._showElement=function(e){function t(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,c(n._element).trigger(r)}var n=this,i=c(this._element).hasClass(D),r=(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),c(this._dialog).hasClass(ut)?this._dialog.querySelector(gt).scrollTop=0:this._element.scrollTop=0,i&&h.reflow(this._element),c(this._element).addClass(ft),this._config.focus&&this._enforceFocus(),c.Event(E.SHOWN,{relatedTarget:e}));i?(e=h.getTransitionDurationFromElement(this._dialog),c(this._dialog).one(h.TRANSITION_END,t).emulateTransitionEnd(e)):t()},e._enforceFocus=function(){var t=this;c(document).off(E.FOCUSIN).on(E.FOCUSIN,function(e){document!==e.target&&t._element!==e.target&&0===c(t._element).has(e.target).length&&t._element.focus()})},e._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?c(this._element).on(E.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||c(this._element).off(E.KEYDOWN_DISMISS)},e._setResizeEvent=function(){var t=this;this._isShown?c(window).on(E.RESIZE,function(e){return t.handleUpdate(e)}):c(window).off(E.RESIZE)},e._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop(function(){c(document.body).removeClass(dt),e._resetAdjustments(),e._resetScrollbar(),c(e._element).trigger(E.HIDDEN)})},e._removeBackdrop=function(){this._backdrop&&(c(this._backdrop).remove(),this._backdrop=null)},e._showBackdrop=function(e){var t,n=this,i=c(this._element).hasClass(D)?D:"";this._isShown&&this._config.backdrop?(this._backdrop=document.createElement("div"),this._backdrop.className=ht,i&&this._backdrop.classList.add(i),c(this._backdrop).appendTo(document.body),c(this._element).on(E.CLICK_DISMISS,function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),i&&h.reflow(this._backdrop),c(this._backdrop).addClass(ft),e&&(i?(i=h.getTransitionDurationFromElement(this._backdrop),c(this._backdrop).one(h.TRANSITION_END,e).emulateTransitionEnd(i)):e())):!this._isShown&&this._backdrop?(c(this._backdrop).removeClass(ft),i=function(){n._removeBackdrop(),e&&e()},c(this._element).hasClass(D)?(t=h.getTransitionDurationFromElement(this._backdrop),c(this._backdrop).one(h.TRANSITION_END,i).emulateTransitionEnd(t)):i()):e&&e()},e._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},e._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},e._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},e._setScrollbar=function(){var e,t,r=this;this._isBodyOverflowing&&(e=[].slice.call(document.querySelectorAll(vt)),t=[].slice.call(document.querySelectorAll(yt)),c(e).each(function(e,t){var n=t.style.paddingRight,i=c(t).css("padding-right");c(t).data("padding-right",n).css("padding-right",parseFloat(i)+r._scrollbarWidth+"px")}),c(t).each(function(e,t){var n=t.style.marginRight,i=c(t).css("margin-right");c(t).data("margin-right",n).css("margin-right",parseFloat(i)-r._scrollbarWidth+"px")}),e=document.body.style.paddingRight,t=c(document.body).css("padding-right"),c(document.body).data("padding-right",e).css("padding-right",parseFloat(t)+this._scrollbarWidth+"px")),c(document.body).addClass(dt)},e._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(vt)),e=(c(e).each(function(e,t){var n=c(t).data("padding-right");c(t).removeData("padding-right"),t.style.paddingRight=n||""}),[].slice.call(document.querySelectorAll(""+yt))),e=(c(e).each(function(e,t){var n=c(t).data("margin-right");void 0!==n&&c(t).css("margin-right",n).removeData("margin-right")}),c(document.body).data("padding-right"));c(document.body).removeData("padding-right"),document.body.style.paddingRight=e||""},e._getScrollbarWidth=function(){var e=document.createElement("div"),t=(e.className=ct,document.body.appendChild(e),e.getBoundingClientRect().width-e.clientWidth);return document.body.removeChild(e),t},r._jQueryInterface=function(n,i){return this.each(function(){var e=c(this).data(st),t=a({},at,c(this).data(),"object"==typeof n&&n?n:{});if(e||(e=new r(this,t),c(this).data(st,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n](i)}else t.show&&e.show(i)})},o(r,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return at}}]),r}(),bt=(c(document).on(E.CLICK_DATA_API,s,function(e){var t,n=this,i=h.getSelectorFromElement(this),i=(i&&(t=document.querySelector(i)),c(t).data(st)?"toggle":a({},c(t).data(),c(this).data())),r=("A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault(),c(t).one(E.SHOW,function(e){e.isDefaultPrevented()||r.one(E.HIDDEN,function(){c(n).is(":visible")&&n.focus()})}));_t._jQueryInterface.call(c(t),i,this)}),c.fn[C]=_t._jQueryInterface,c.fn[C].Constructor=_t,c.fn[C].noConflict=function(){return c.fn[C]=ot,_t._jQueryInterface},["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),i={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},wt=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,xt=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function Ct(e,s,t){if(0===e.length)return e;if(t&&"function"==typeof t)return t(e);for(var t=(new window.DOMParser).parseFromString(e,"text/html"),o=Object.keys(s),a=[].slice.call(t.body.querySelectorAll("*")),n=function(e,t){var n=a[e],e=n.nodeName.toLowerCase();if(-1===o.indexOf(n.nodeName.toLowerCase()))return n.parentNode.removeChild(n),"continue";var i=[].slice.call(n.attributes),r=[].concat(s["*"]||[],s[e]||[]);i.forEach(function(e){!function(e,t){var n=e.nodeName.toLowerCase();if(-1!==t.indexOf(n))return-1===bt.indexOf(n)||Boolean(e.nodeValue.match(wt)||e.nodeValue.match(xt));for(var i=t.filter(function(e){return e instanceof RegExp}),r=0,s=i.length;r<s;r++)if(n.match(i[r]))return 1}(e,r)&&n.removeAttribute(e.nodeName)})},i=0,r=a.length;i<r;i++)n(i);return t.body.innerHTML}var T="tooltip",kt="bs.tooltip",S="."+kt,Et=c.fn[T],Dt="bs-tooltip",Tt=new RegExp("(^|\\s)"+Dt+"\\S+","g"),St=["sanitize","whiteList","sanitizeFn"],At={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object"},Ot={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},It={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:i},Nt="show",Lt="out",jt={HIDE:"hide"+S,HIDDEN:"hidden"+S,SHOW:"show"+S,SHOWN:"shown"+S,INSERTED:"inserted"+S,CLICK:"click"+S,FOCUSIN:"focusin"+S,FOCUSOUT:"focusout"+S,MOUSEENTER:"mouseenter"+S,MOUSELEAVE:"mouseleave"+S},Rt="fade",Mt="show",Pt=".tooltip-inner",zt=".arrow",Ft="hover",$t="focus",Ut="click",Bt="manual",A=function(){function i(e,t){if(void 0===r)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var e=i.prototype;return e.enable=function(){this._isEnabled=!0},e.disable=function(){this._isEnabled=!1},e.toggleEnabled=function(){this._isEnabled=!this._isEnabled},e.toggle=function(e){var t,n;this._isEnabled&&(e?(t=this.constructor.DATA_KEY,(n=c(e.currentTarget).data(t))||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),c(e.currentTarget).data(t,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)):c(this.getTipElement()).hasClass(Mt)?this._leave(null,this):this._enter(null,this))},e.dispose=function(){clearTimeout(this._timeout),c.removeData(this.element,this.constructor.DATA_KEY),c(this.element).off(this.constructor.EVENT_KEY),c(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&c(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},e.show=function(){var t=this;if("none"===c(this.element).css("display"))throw new Error("Please use show on visible elements");var e,n,i=c.Event(this.constructor.Event.SHOW);this.isWithContent()&&this._isEnabled&&(c(this.element).trigger(i),n=h.findShadowRoot(this.element),n=c.contains(null!==n?n:this.element.ownerDocument.documentElement,this.element),!i.isDefaultPrevented()&&n&&(i=this.getTipElement(),n=h.getUID(this.constructor.NAME),i.setAttribute("id",n),this.element.setAttribute("aria-describedby",n),this.setContent(),this.config.animation&&c(i).addClass(Rt),n="function"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,n=this._getAttachment(n),this.addAttachmentClass(n),e=this._getContainer(),c(i).data(this.constructor.DATA_KEY,this),c.contains(this.element.ownerDocument.documentElement,this.tip)||c(i).appendTo(e),c(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new r(this.element,i,{placement:n,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:zt},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){return t._handlePopperPlacementChange(e)}}),c(i).addClass(Mt),"ontouchstart"in document.documentElement&&c(document.body).children().on("mouseover",null,c.noop),e=function(){t.config.animation&&t._fixTransition();var e=t._hoverState;t._hoverState=null,c(t.element).trigger(t.constructor.Event.SHOWN),e===Lt&&t._leave(null,t)},c(this.tip).hasClass(Rt)?(n=h.getTransitionDurationFromElement(this.tip),c(this.tip).one(h.TRANSITION_END,e).emulateTransitionEnd(n)):e()))},e.hide=function(e){function t(){n._hoverState!==Nt&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),c(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),e&&e()}var n=this,i=this.getTipElement(),r=c.Event(this.constructor.Event.HIDE);c(this.element).trigger(r),r.isDefaultPrevented()||(c(i).removeClass(Mt),"ontouchstart"in document.documentElement&&c(document.body).children().off("mouseover",null,c.noop),this._activeTrigger[Ut]=!1,this._activeTrigger[$t]=!1,this._activeTrigger[Ft]=!1,c(this.tip).hasClass(Rt)?(r=h.getTransitionDurationFromElement(i),c(i).one(h.TRANSITION_END,t).emulateTransitionEnd(r)):t(),this._hoverState="")},e.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},e.isWithContent=function(){return Boolean(this.getTitle())},e.addAttachmentClass=function(e){c(this.getTipElement()).addClass(Dt+"-"+e)},e.getTipElement=function(){return this.tip=this.tip||c(this.config.template)[0],this.tip},e.setContent=function(){var e=this.getTipElement();this.setElementContent(c(e.querySelectorAll(Pt)),this.getTitle()),c(e).removeClass(Rt+" "+Mt)},e.setElementContent=function(e,t){"object"==typeof t&&(t.nodeType||t.jquery)?this.config.html?c(t).parent().is(e)||e.empty().append(t):e.text(c(t).text()):this.config.html?(this.config.sanitize&&(t=Ct(t,this.config.whiteList,this.config.sanitizeFn)),e.html(t)):e.text(t)},e.getTitle=function(){return this.element.getAttribute("data-original-title")||("function"==typeof this.config.title?this.config.title.call(this.element):this.config.title)},e._getOffset=function(){var t=this,e={};return"function"==typeof this.config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,t.config.offset(e.offsets,t.element)||{}),e}:e.offset=this.config.offset,e},e._getContainer=function(){return!1===this.config.container?document.body:h.isElement(this.config.container)?c(this.config.container):c(document).find(this.config.container)},e._getAttachment=function(e){return Ot[e.toUpperCase()]},e._setListeners=function(){var n=this;this.config.trigger.split(" ").forEach(function(e){var t;"click"===e?c(n.element).on(n.constructor.Event.CLICK,n.config.selector,function(e){return n.toggle(e)}):e!==Bt&&(t=e===Ft?n.constructor.Event.MOUSEENTER:n.constructor.Event.FOCUSIN,e=e===Ft?n.constructor.Event.MOUSELEAVE:n.constructor.Event.FOCUSOUT,c(n.element).on(t,n.config.selector,function(e){return n._enter(e)}).on(e,n.config.selector,function(e){return n._leave(e)}))}),c(this.element).closest(".modal").on("hide.bs.modal",function(){n.element&&n.hide()}),this.config.selector?this.config=a({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},e._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");!this.element.getAttribute("title")&&"string"==e||(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},e._enter=function(e,t){var n=this.constructor.DATA_KEY;(t=t||c(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),c(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusin"===e.type?$t:Ft]=!0),c(t.getTipElement()).hasClass(Mt)||t._hoverState===Nt?t._hoverState=Nt:(clearTimeout(t._timeout),t._hoverState=Nt,t.config.delay&&t.config.delay.show?t._timeout=setTimeout(function(){t._hoverState===Nt&&t.show()},t.config.delay.show):t.show())},e._leave=function(e,t){var n=this.constructor.DATA_KEY;(t=t||c(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),c(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusout"===e.type?$t:Ft]=!1),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=Lt,t.config.delay&&t.config.delay.hide?t._timeout=setTimeout(function(){t._hoverState===Lt&&t.hide()},t.config.delay.hide):t.hide())},e._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},e._getConfig=function(e){var t=c(this.element).data();return Object.keys(t).forEach(function(e){-1!==St.indexOf(e)&&delete t[e]}),"number"==typeof(e=a({},this.constructor.Default,t,"object"==typeof e&&e?e:{})).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),h.typeCheckConfig(T,e,this.constructor.DefaultType),e.sanitize&&(e.template=Ct(e.template,e.whiteList,e.sanitizeFn)),e},e._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},e._cleanTipClass=function(){var e=c(this.getTipElement()),t=e.attr("class").match(Tt);null!==t&&t.length&&e.removeClass(t.join(""))},e._handlePopperPlacementChange=function(e){var t=e.instance;this.tip=t.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},e._fixTransition=function(){var e=this.getTipElement(),t=this.config.animation;null===e.getAttribute("x-placement")&&(c(e).removeClass(Rt),this.config.animation=!1,this.hide(),this.show(),this.config.animation=t)},i._jQueryInterface=function(n){return this.each(function(){var e=c(this).data(kt),t="object"==typeof n&&n;if((e||!/dispose|hide/.test(n))&&(e||(e=new i(this,t),c(this).data(kt,e)),"string"==typeof n)){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return It}},{key:"NAME",get:function(){return T}},{key:"DATA_KEY",get:function(){return kt}},{key:"Event",get:function(){return jt}},{key:"EVENT_KEY",get:function(){return S}},{key:"DefaultType",get:function(){return At}}]),i}(),O=(c.fn[T]=A._jQueryInterface,c.fn[T].Constructor=A,c.fn[T].noConflict=function(){return c.fn[T]=Et,A._jQueryInterface},"popover"),Ht="bs.popover",I="."+Ht,qt=c.fn[O],Wt="bs-popover",Vt=new RegExp("(^|\\s)"+Wt+"\\S+","g"),Yt=a({},A.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Zt=a({},A.DefaultType,{content:"(string|element|function)"}),Kt="fade",Gt="show",Qt=".popover-header",Xt=".popover-body",Jt={HIDE:"hide"+I,HIDDEN:"hidden"+I,SHOW:"show"+I,SHOWN:"shown"+I,INSERTED:"inserted"+I,CLICK:"click"+I,FOCUSIN:"focusin"+I,FOCUSOUT:"focusout"+I,MOUSEENTER:"mouseenter"+I,MOUSELEAVE:"mouseleave"+I},en=function(e){var t;function i(){return e.apply(this,arguments)||this}t=e,(n=i).prototype=Object.create(t.prototype),(n.prototype.constructor=n).__proto__=t;var n=i.prototype;return n.isWithContent=function(){return this.getTitle()||this._getContent()},n.addAttachmentClass=function(e){c(this.getTipElement()).addClass(Wt+"-"+e)},n.getTipElement=function(){return this.tip=this.tip||c(this.config.template)[0],this.tip},n.setContent=function(){var e=c(this.getTipElement()),t=(this.setElementContent(e.find(Qt),this.getTitle()),this._getContent());"function"==typeof t&&(t=t.call(this.element)),this.setElementContent(e.find(Xt),t),e.removeClass(Kt+" "+Gt)},n._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},n._cleanTipClass=function(){var e=c(this.getTipElement()),t=e.attr("class").match(Vt);null!==t&&0<t.length&&e.removeClass(t.join(""))},i._jQueryInterface=function(n){return this.each(function(){var e=c(this).data(Ht),t="object"==typeof n?n:null;if((e||!/dispose|hide/.test(n))&&(e||(e=new i(this,t),c(this).data(Ht,e)),"string"==typeof n)){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Yt}},{key:"NAME",get:function(){return O}},{key:"DATA_KEY",get:function(){return Ht}},{key:"Event",get:function(){return Jt}},{key:"EVENT_KEY",get:function(){return I}},{key:"DefaultType",get:function(){return Zt}}]),i}(A),N=(c.fn[O]=en._jQueryInterface,c.fn[O].Constructor=en,c.fn[O].noConflict=function(){return c.fn[O]=qt,en._jQueryInterface},"scrollspy"),tn="bs.scrollspy",nn="."+tn,rn=c.fn[N],sn={offset:10,method:"auto",target:""},on={offset:"number",method:"string",target:"(string|element)"},an={ACTIVATE:"activate"+nn,SCROLL:"scroll"+nn,LOAD_DATA_API:"load"+nn+".data-api"},ln="dropdown-item",L="active",un='[data-spy="scroll"]',cn=".nav, .list-group",hn=".nav-link",dn=".nav-item",fn=".list-group-item",pn=".dropdown",gn=".dropdown-item",mn=".dropdown-toggle",vn="offset",yn="position",_n=function(){function n(e,t){var n=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(t),this._selector=this._config.target+" "+hn+","+this._config.target+" "+fn+","+this._config.target+" "+gn,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,c(this._scrollElement).on(an.SCROLL,function(e){return n._process(e)}),this.refresh(),this._process()}var e=n.prototype;return e.refresh=function(){var t=this,e=this._scrollElement===this._scrollElement.window?vn:yn,i="auto"===this._config.method?e:this._config.method,r=i===yn?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map(function(e){var t,e=h.getSelectorFromElement(e);if(t=e?document.querySelector(e):t){var n=t.getBoundingClientRect();if(n.width||n.height)return[c(t)[i]().top+r,e]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},e.dispose=function(){c.removeData(this._element,tn),c(this._scrollElement).off(nn),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},e._getConfig=function(e){var t;return"string"!=typeof(e=a({},sn,"object"==typeof e&&e?e:{})).target&&((t=c(e.target).attr("id"))||(t=h.getUID(N),c(e.target).attr("id",t)),e.target="#"+t),h.typeCheckConfig(N,e,on),e},e._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},e._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},e._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},e._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),n<=e)return t=this._targets[this._targets.length-1],void(this._activeTarget!==t&&this._activate(t));if(this._activeTarget&&e<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;)this._activeTarget!==this._targets[i]&&e>=this._offsets[i]&&(void 0===this._offsets[i+1]||e<this._offsets[i+1])&&this._activate(this._targets[i])},e._activate=function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",").map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'}),e=c([].slice.call(document.querySelectorAll(e.join(","))));e.hasClass(ln)?(e.closest(pn).find(mn).addClass(L),e.addClass(L)):(e.addClass(L),e.parents(cn).prev(hn+", "+fn).addClass(L),e.parents(cn).prev(dn).children(hn).addClass(L)),c(this._scrollElement).trigger(an.ACTIVATE,{relatedTarget:t})},e._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter(function(e){return e.classList.contains(L)}).forEach(function(e){return e.classList.remove(L)})},n._jQueryInterface=function(t){return this.each(function(){var e=c(this).data(tn);if(e||(e=new n(this,"object"==typeof t&&t),c(this).data(tn,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},o(n,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return sn}}]),n}(),bn=(c(window).on(an.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(un)),t=e.length;t--;){var n=c(e[t]);_n._jQueryInterface.call(n,n.data())}}),c.fn[N]=_n._jQueryInterface,c.fn[N].Constructor=_n,c.fn[N].noConflict=function(){return c.fn[N]=rn,_n._jQueryInterface},"bs.tab"),t="."+bn,wn=c.fn.tab,xn={HIDE:"hide"+t,HIDDEN:"hidden"+t,SHOW:"show"+t,SHOWN:"shown"+t,CLICK_DATA_API:"click"+t+".data-api"},Cn="dropdown-menu",kn="active",En="disabled",Dn="fade",Tn="show",Sn=".dropdown",An=".nav, .list-group",On=".active",In="> li > .active",s='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',Nn=".dropdown-toggle",Ln="> .dropdown-menu .active",jn=function(){function i(e){this._element=e}var e=i.prototype;return e.show=function(){var e,t,n,i,r,s,o=this;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&c(this._element).hasClass(kn)||c(this._element).hasClass(En)||(t=c(this._element).closest(An)[0],n=h.getSelectorFromElement(this._element),t&&(r="UL"===t.nodeName||"OL"===t.nodeName?In:On,i=(i=c.makeArray(c(t).find(r)))[i.length-1]),r=c.Event(xn.HIDE,{relatedTarget:this._element}),s=c.Event(xn.SHOW,{relatedTarget:i}),i&&c(i).trigger(r),c(this._element).trigger(s),s.isDefaultPrevented()||r.isDefaultPrevented()||(n&&(e=document.querySelector(n)),this._activate(this._element,t),s=function(){var e=c.Event(xn.HIDDEN,{relatedTarget:o._element}),t=c.Event(xn.SHOWN,{relatedTarget:i});c(i).trigger(e),c(o._element).trigger(t)},e?this._activate(e,e.parentNode,s):s()))},e.dispose=function(){c.removeData(this._element,bn),this._element=null},e._activate=function(e,t,n){function i(){return r._transitionComplete(e,s,n)}var r=this,s=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?c(t).children(On):c(t).find(In))[0],t=n&&s&&c(s).hasClass(Dn);s&&t?(t=h.getTransitionDurationFromElement(s),c(s).removeClass(Tn).one(h.TRANSITION_END,i).emulateTransitionEnd(t)):i()},e._transitionComplete=function(e,t,n){var i;t&&(c(t).removeClass(kn),(i=c(t.parentNode).find(Ln)[0])&&c(i).removeClass(kn),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)),c(e).addClass(kn),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),h.reflow(e),e.classList.contains(Dn)&&e.classList.add(Tn),e.parentNode&&c(e.parentNode).hasClass(Cn)&&((i=c(e).closest(Sn)[0])&&(t=[].slice.call(i.querySelectorAll(Nn)),c(t).addClass(kn)),e.setAttribute("aria-expanded",!0)),n&&n()},i._jQueryInterface=function(n){return this.each(function(){var e=c(this),t=e.data(bn);if(t||(t=new i(this),e.data(bn,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),i}(),j=(c(document).on(xn.CLICK_DATA_API,s,function(e){e.preventDefault(),jn._jQueryInterface.call(c(this),"show")}),c.fn.tab=jn._jQueryInterface,c.fn.tab.Constructor=jn,c.fn.tab.noConflict=function(){return c.fn.tab=wn,jn._jQueryInterface},"toast"),Rn="bs.toast",i="."+Rn,Mn=c.fn[j],R={CLICK_DISMISS:"click.dismiss"+i,HIDE:"hide"+i,HIDDEN:"hidden"+i,SHOW:"show"+i,SHOWN:"shown"+i},Pn="fade",zn="hide",Fn="show",$n="showing",Un={animation:"boolean",autohide:"boolean",delay:"number"},Bn={animation:!0,autohide:!0,delay:500},Hn='[data-dismiss="toast"]',qn=function(){function i(e,t){this._element=e,this._config=this._getConfig(t),this._timeout=null,this._setListeners()}var e=i.prototype;return e.show=function(){function e(){n._element.classList.remove($n),n._element.classList.add(Fn),c(n._element).trigger(R.SHOWN),n._config.autohide&&n.hide()}var t,n=this;c(this._element).trigger(R.SHOW),this._config.animation&&this._element.classList.add(Pn);this._element.classList.remove(zn),this._element.classList.add($n),this._config.animation?(t=h.getTransitionDurationFromElement(this._element),c(this._element).one(h.TRANSITION_END,e).emulateTransitionEnd(t)):e()},e.hide=function(e){var t=this;this._element.classList.contains(Fn)&&(c(this._element).trigger(R.HIDE),e?this._close():this._timeout=setTimeout(function(){t._close()},this._config.delay))},e.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(Fn)&&this._element.classList.remove(Fn),c(this._element).off(R.CLICK_DISMISS),c.removeData(this._element,Rn),this._element=null,this._config=null},e._getConfig=function(e){return e=a({},Bn,c(this._element).data(),"object"==typeof e&&e?e:{}),h.typeCheckConfig(j,e,this.constructor.DefaultType),e},e._setListeners=function(){var e=this;c(this._element).on(R.CLICK_DISMISS,Hn,function(){return e.hide(!0)})},e._close=function(){function e(){n._element.classList.add(zn),c(n._element).trigger(R.HIDDEN)}var t,n=this;this._element.classList.remove(Fn),this._config.animation?(t=h.getTransitionDurationFromElement(this._element),c(this._element).one(h.TRANSITION_END,e).emulateTransitionEnd(t)):e()},i._jQueryInterface=function(n){return this.each(function(){var e=c(this),t=e.data(Rn);if(t||(t=new i(this,"object"==typeof n&&n),e.data(Rn,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n](this)}})},o(i,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"DefaultType",get:function(){return Un}},{key:"Default",get:function(){return Bn}}]),i}();if(c.fn[j]=qn._jQueryInterface,c.fn[j].Constructor=qn,c.fn[j].noConflict=function(){return c.fn[j]=Mn,qn._jQueryInterface},void 0===c)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");t=c.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||4<=t[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");e.Util=h,e.Alert=n,e.Button=ne,e.Carousel=p,e.Collapse=Pe,e.Dropdown=x,e.Modal=_t,e.Popover=en,e.Scrollspy=_n,e.Tab=jn,e.Toast=qn,e.Tooltip=A,Object.defineProperty(e,"__esModule",{value:!0})}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(w,x){function C(){return new Date(Date.UTC.apply(Date,arguments))}function k(){var e=new Date;return C(e.getFullYear(),e.getMonth(),e.getDate())}function s(e,t){return e.getUTCFullYear()===t.getUTCFullYear()&&e.getUTCMonth()===t.getUTCMonth()&&e.getUTCDate()===t.getUTCDate()}function e(e,t){return function(){return t!==x&&w.fn.datepicker.deprecated(t),this[e].apply(this,arguments)}}function E(e,t){w.data(e,"datepicker",this),this._events=[],this._secondaryEvents=[],this._process_options(t),this.dates=new n,this.viewDate=this.o.defaultViewDate,this.focusDate=null,this.element=w(e),this.isInput=this.element.is("input"),this.inputField=this.isInput?this.element:this.element.find("input"),this.component=!!this.element.hasClass("date")&&this.element.find(".add-on, .input-group-addon, .input-group-append, .input-group-prepend, .btn"),this.component&&0===this.component.length&&(this.component=!1),this.isInline=!this.component&&this.element.is("div"),this.picker=w(T.template),this._check_template(this.o.templates.leftArrow)&&this.picker.find(".prev").html(this.o.templates.leftArrow),this._check_template(this.o.templates.rightArrow)&&this.picker.find(".next").html(this.o.templates.rightArrow),this._buildEvents(),this._attachEvents(),this.isInline?this.picker.addClass("datepicker-inline").appendTo(this.element):this.picker.addClass("datepicker-dropdown dropdown-menu"),this.o.rtl&&this.picker.addClass("datepicker-rtl"),this.o.calendarWeeks&&this.picker.find(".datepicker-days .datepicker-switch, thead .datepicker-title, tfoot .today, tfoot .clear").attr("colspan",function(e,t){return Number(t)+1}),this._process_options({startDate:this._o.startDate,endDate:this._o.endDate,daysOfWeekDisabled:this.o.daysOfWeekDisabled,daysOfWeekHighlighted:this.o.daysOfWeekHighlighted,datesDisabled:this.o.datesDisabled}),this._allow_update=!1,this.setViewMode(this.o.startView),this._allow_update=!0,this.fillDow(),this.fillMonths(),this.update(),this.isInline&&this.show()}function l(e,t){w.data(e,"datepicker",this),this.element=w(e),this.inputs=w.map(t.inputs,function(e){return e.jquery?e[0]:e}),delete t.inputs,this.keepEmptyValues=t.keepEmptyValues,delete t.keepEmptyValues,r.call(w(this.inputs),t).on("changeDate",w.proxy(this.dateUpdated,this)),this.pickers=w.map(this.inputs,function(e){return w.data(e,"datepicker")}),this.updateDates()}t={get:function(e){return this.slice(e)[0]},contains:function(e){for(var t=e&&e.valueOf(),n=0,i=this.length;n<i;n++)if(0<=this[n].valueOf()-t&&this[n].valueOf()-t<864e5)return n;return-1},remove:function(e){this.splice(e,1)},replace:function(e){e&&(w.isArray(e)||(e=[e]),this.clear(),this.push.apply(this,e))},clear:function(){this.length=0},copy:function(){var e=new n;return e.replace(this),e}};var t,n=function(){var e=[];return e.push.apply(e,arguments),w.extend(e,t),e},i=(E.prototype={constructor:E,_resolveViewName:function(n){return w.each(T.viewModes,function(e,t){if(n===e||-1!==w.inArray(n,t.names))return n=e,!1}),n},_resolveDaysOfWeek:function(e){return w.isArray(e)||(e=e.split(/[,\s]*/)),w.map(e,Number)},_check_template:function(e){try{return e===x||""===e?!1:(e.match(/[<>]/g)||[]).length<=0||0<w(e).length}catch(e){return!1}},_process_options:function(e){this._o=w.extend({},this._o,e);var t,n,i=this.o=w.extend({},this._o),e=i.language,r=(D[e]||(e=e.split("-")[0],D[e]||(e=u.language)),i.language=e,i.startView=this._resolveViewName(i.startView),i.minViewMode=this._resolveViewName(i.minViewMode),i.maxViewMode=this._resolveViewName(i.maxViewMode),i.startView=Math.max(this.o.minViewMode,Math.min(this.o.maxViewMode,i.startView)),!0!==i.multidate&&(i.multidate=Number(i.multidate)||!1,!1!==i.multidate&&(i.multidate=Math.max(0,i.multidate))),i.multidateSeparator=String(i.multidateSeparator),i.weekStart%=7,i.weekEnd=(i.weekStart+6)%7,T.parseFormat(i.format)),s=(i.startDate!==-1/0&&(i.startDate?i.startDate instanceof Date?i.startDate=this._local_to_utc(this._zero_time(i.startDate)):i.startDate=T.parseDate(i.startDate,r,i.language,i.assumeNearbyYear):i.startDate=-1/0),i.endDate!==1/0&&(i.endDate?i.endDate instanceof Date?i.endDate=this._local_to_utc(this._zero_time(i.endDate)):i.endDate=T.parseDate(i.endDate,r,i.language,i.assumeNearbyYear):i.endDate=1/0),i.daysOfWeekDisabled=this._resolveDaysOfWeek(i.daysOfWeekDisabled||[]),i.daysOfWeekHighlighted=this._resolveDaysOfWeek(i.daysOfWeekHighlighted||[]),i.datesDisabled=i.datesDisabled||[],w.isArray(i.datesDisabled)||(i.datesDisabled=i.datesDisabled.split(",")),i.datesDisabled=w.map(i.datesDisabled,function(e){return T.parseDate(e,r,i.language,i.assumeNearbyYear)}),String(i.orientation).toLowerCase().split(/\s+/g)),e=i.orientation.toLowerCase(),s=w.grep(s,function(e){return/^auto|left|right|top|bottom$/.test(e)});if(i.orientation={x:"auto",y:"auto"},e&&"auto"!==e)if(1===s.length)switch(s[0]){case"top":case"bottom":i.orientation.y=s[0];break;case"left":case"right":i.orientation.x=s[0]}else e=w.grep(s,function(e){return/^left|right$/.test(e)}),i.orientation.x=e[0]||"auto",e=w.grep(s,function(e){return/^top|bottom$/.test(e)}),i.orientation.y=e[0]||"auto";i.defaultViewDate instanceof Date||"string"==typeof i.defaultViewDate?i.defaultViewDate=T.parseDate(i.defaultViewDate,r,i.language,i.assumeNearbyYear):i.defaultViewDate?(e=i.defaultViewDate.year||(new Date).getFullYear(),t=i.defaultViewDate.month||0,n=i.defaultViewDate.day||1,i.defaultViewDate=C(e,t,n)):i.defaultViewDate=k()},_applyEvents:function(e){for(var t,n,i,r=0;r<e.length;r++)t=e[r][0],2===e[r].length?(n=x,i=e[r][1]):3===e[r].length&&(n=e[r][1],i=e[r][2]),t.on(i,n)},_unapplyEvents:function(e){for(var t,n,i,r=0;r<e.length;r++)t=e[r][0],2===e[r].length?(i=x,n=e[r][1]):3===e[r].length&&(i=e[r][1],n=e[r][2]),t.off(n,i)},_buildEvents:function(){var e={keyup:w.proxy(function(e){-1===w.inArray(e.keyCode,[27,37,39,38,40,32,13,9])&&this.update()},this),keydown:w.proxy(this.keydown,this),paste:w.proxy(this.paste,this)};!0===this.o.showOnFocus&&(e.focus=w.proxy(this.show,this)),this.isInput?this._events=[[this.element,e]]:this.component&&this.inputField.length?this._events=[[this.inputField,e],[this.component,{click:w.proxy(this.show,this)}]]:this._events=[[this.element,{click:w.proxy(this.show,this),keydown:w.proxy(this.keydown,this)}]],this._events.push([this.element,"*",{blur:w.proxy(function(e){this._focused_from=e.target},this)}],[this.element,{blur:w.proxy(function(e){this._focused_from=e.target},this)}]),this.o.immediateUpdates&&this._events.push([this.element,{"changeYear changeMonth":w.proxy(function(e){this.update(e.date)},this)}]),this._secondaryEvents=[[this.picker,{click:w.proxy(this.click,this)}],[this.picker,".prev, .next",{click:w.proxy(this.navArrowsClick,this)}],[this.picker,".day:not(.disabled)",{click:w.proxy(this.dayCellClick,this)}],[w(window),{resize:w.proxy(this.place,this)}],[w(document),{"mousedown touchstart":w.proxy(function(e){this.element.is(e.target)||this.element.find(e.target).length||this.picker.is(e.target)||this.picker.find(e.target).length||this.isInline||this.hide()},this)}]]},_attachEvents:function(){this._detachEvents(),this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents(),this._applyEvents(this._secondaryEvents)},_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents)},_trigger:function(e,t){t=t||this.dates.get(-1),t=this._utc_to_local(t);this.element.trigger({type:e,date:t,viewMode:this.viewMode,dates:w.map(this.dates,this._utc_to_local),format:w.proxy(function(e,t){0===arguments.length?(e=this.dates.length-1,t=this.o.format):"string"==typeof e&&(t=e,e=this.dates.length-1),t=t||this.o.format;var n=this.dates.get(e);return T.formatDate(n,t,this.o.language)},this)})},show:function(){if(!(this.inputField.is(":disabled")||this.inputField.prop("readonly")&&!1===this.o.enableOnReadonly))return this.isInline||this.picker.appendTo(this.o.container),this.place(),this.picker.show(),this._attachSecondaryEvents(),this._trigger("show"),(window.navigator.msMaxTouchPoints||"ontouchstart"in document)&&this.o.disableTouchKeyboard&&w(this.element).blur(),this},hide:function(){return this.isInline||!this.picker.is(":visible")||(this.focusDate=null,this.picker.hide().detach(),this._detachSecondaryEvents(),this.setViewMode(this.o.startView),this.o.forceParse&&this.inputField.val()&&this.setValue(),this._trigger("hide")),this},destroy:function(){return this.hide(),this._detachEvents(),this._detachSecondaryEvents(),this.picker.remove(),delete this.element.data().datepicker,this.isInput||delete this.element.data().date,this},paste:function(e){var t;if(e.originalEvent.clipboardData&&e.originalEvent.clipboardData.types&&-1!==w.inArray("text/plain",e.originalEvent.clipboardData.types))t=e.originalEvent.clipboardData.getData("text/plain");else{if(!window.clipboardData)return;t=window.clipboardData.getData("Text")}this.setDate(t),this.update(),e.preventDefault()},_utc_to_local:function(e){if(!e)return e;var t=new Date(e.getTime()+6e4*e.getTimezoneOffset());return t=t.getTimezoneOffset()!==e.getTimezoneOffset()?new Date(e.getTime()+6e4*t.getTimezoneOffset()):t},_local_to_utc:function(e){return e&&new Date(e.getTime()-6e4*e.getTimezoneOffset())},_zero_time:function(e){return e&&new Date(e.getFullYear(),e.getMonth(),e.getDate())},_zero_utc_time:function(e){return e&&C(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate())},getDates:function(){return w.map(this.dates,this._utc_to_local)},getUTCDates:function(){return w.map(this.dates,function(e){return new Date(e)})},getDate:function(){return this._utc_to_local(this.getUTCDate())},getUTCDate:function(){var e=this.dates.get(-1);return e!==x?new Date(e):null},clearDates:function(){this.inputField.val(""),this.update(),this._trigger("changeDate"),this.o.autoclose&&this.hide()},setDates:function(){var e=w.isArray(arguments[0])?arguments[0]:arguments;return this.update.apply(this,e),this._trigger("changeDate"),this.setValue(),this},setUTCDates:function(){var e=w.isArray(arguments[0])?arguments[0]:arguments;return this.setDates.apply(this,w.map(e,this._utc_to_local)),this},setDate:e("setDates"),setUTCDate:e("setUTCDates"),remove:e("destroy","Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead"),setValue:function(){var e=this.getFormattedDate();return this.inputField.val(e),this},getFormattedDate:function(t){t===x&&(t=this.o.format);var n=this.o.language;return w.map(this.dates,function(e){return T.formatDate(e,t,n)}).join(this.o.multidateSeparator)},getStartDate:function(){return this.o.startDate},setStartDate:function(e){return this._process_options({startDate:e}),this.update(),this.updateNavArrows(),this},getEndDate:function(){return this.o.endDate},setEndDate:function(e){return this._process_options({endDate:e}),this.update(),this.updateNavArrows(),this},setDaysOfWeekDisabled:function(e){return this._process_options({daysOfWeekDisabled:e}),this.update(),this},setDaysOfWeekHighlighted:function(e){return this._process_options({daysOfWeekHighlighted:e}),this.update(),this},setDatesDisabled:function(e){return this._process_options({datesDisabled:e}),this.update(),this},place:function(){if(this.isInline)return this;var e=this.picker.outerWidth(),t=this.picker.outerHeight(),n=w(this.o.container),i=n.width(),r=("body"===this.o.container?w(document):n).scrollTop(),n=n.offset(),s=[0],o=(this.element.parents().each(function(){var e=w(this).css("z-index");"auto"!==e&&0!==Number(e)&&s.push(Number(e))}),Math.max.apply(Math,s)+this.o.zIndexOffset),a=(this.component?this.component.parent():this.element).offset(),l=this.component?this.component.outerHeight(!0):this.element.outerHeight(!1),u=this.component?this.component.outerWidth(!0):this.element.outerWidth(!1),c=a.left-n.left,n=a.top-n.top;"body"!==this.o.container&&(n+=r),this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"),"auto"!==this.o.orientation.x?(this.picker.addClass("datepicker-orient-"+this.o.orientation.x),"right"===this.o.orientation.x&&(c-=e-u)):a.left<0?(this.picker.addClass("datepicker-orient-left"),c-=a.left-10):i<c+e?(this.picker.addClass("datepicker-orient-right"),c+=u-e):this.o.rtl?this.picker.addClass("datepicker-orient-right"):this.picker.addClass("datepicker-orient-left");a=this.o.orientation.y;return"auto"===a&&(a=-r+n-t<0?"bottom":"top"),this.picker.addClass("datepicker-orient-"+a),"top"===a?n-=t+parseInt(this.picker.css("padding-top")):n+=l,this.o.rtl?this.picker.css({top:n,right:i-(c+u),zIndex:o}):this.picker.css({top:n,left:c,zIndex:o}),this},_allow_update:!0,update:function(){if(!this._allow_update)return this;var e=this.dates.copy(),n=[],t=!1;return arguments.length?(w.each(arguments,w.proxy(function(e,t){t instanceof Date&&(t=this._local_to_utc(t)),n.push(t)},this)),t=!0):(n=(n=this.isInput?this.element.val():this.element.data("date")||this.inputField.val())&&this.o.multidate?n.split(this.o.multidateSeparator):[n],delete this.element.data().date),n=w.map(n,w.proxy(function(e){return T.parseDate(e,this.o.format,this.o.language,this.o.assumeNearbyYear)},this)),n=w.grep(n,w.proxy(function(e){return!this.dateWithinRange(e)||!e},this),!0),this.dates.replace(n),this.o.updateViewDate&&(this.dates.length?this.viewDate=new Date(this.dates.get(-1)):this.viewDate<this.o.startDate?this.viewDate=new Date(this.o.startDate):this.viewDate>this.o.endDate?this.viewDate=new Date(this.o.endDate):this.viewDate=this.o.defaultViewDate),t?(this.setValue(),this.element.change()):this.dates.length&&String(e)!==String(this.dates)&&t&&(this._trigger("changeDate"),this.element.change()),!this.dates.length&&e.length&&(this._trigger("clearDate"),this.element.change()),this.fill(),this},fillDow:function(){if(this.o.showWeekDays){var e=this.o.weekStart,t="<tr>";for(this.o.calendarWeeks&&(t+='<th class="cw">&#160;</th>');e<this.o.weekStart+7;)t+='<th class="dow',-1!==w.inArray(e,this.o.daysOfWeekDisabled)&&(t+=" disabled"),t+='">'+D[this.o.language].daysMin[e++%7]+"</th>";t+="</tr>",this.picker.find(".datepicker-days thead").append(t)}},fillMonths:function(){for(var e=this._utc_to_local(this.viewDate),t="",n=0;n<12;n++)t+='<span class="month'+(e&&e.getMonth()===n?" focused":"")+'">'+D[this.o.language].monthsShort[n]+"</span>";this.picker.find(".datepicker-months td").html(t)},setRange:function(e){e&&e.length?this.range=w.map(e,function(e){return e.valueOf()}):delete this.range,this.fill()},getClassNames:function(e){var t=[],n=this.viewDate.getUTCFullYear(),i=this.viewDate.getUTCMonth(),r=k();return e.getUTCFullYear()<n||e.getUTCFullYear()===n&&e.getUTCMonth()<i?t.push("old"):(e.getUTCFullYear()>n||e.getUTCFullYear()===n&&e.getUTCMonth()>i)&&t.push("new"),this.focusDate&&e.valueOf()===this.focusDate.valueOf()&&t.push("focused"),this.o.todayHighlight&&s(e,r)&&t.push("today"),-1!==this.dates.contains(e)&&t.push("active"),this.dateWithinRange(e)||t.push("disabled"),this.dateIsDisabled(e)&&t.push("disabled","disabled-date"),-1!==w.inArray(e.getUTCDay(),this.o.daysOfWeekHighlighted)&&t.push("highlighted"),this.range&&(e>this.range[0]&&e<this.range[this.range.length-1]&&t.push("range"),-1!==w.inArray(e.valueOf(),this.range)&&t.push("selected"),e.valueOf()===this.range[0]&&t.push("range-start"),e.valueOf()===this.range[this.range.length-1]&&t.push("range-end")),t},_fill_yearsView:function(e,t,n,i,r,s,o){for(var a,l,u,c="",h=n/10,e=this.picker.find(e),d=Math.floor(i/n)*n,f=d+9*h,p=Math.floor(this.viewDate.getFullYear()/h)*h,g=w.map(this.dates,function(e){return Math.floor(e.getUTCFullYear()/h)*h}),m=d-h;m<=f+h;m+=h)a=[t],l=null,m===d-h?a.push("old"):m===f+h&&a.push("new"),-1!==w.inArray(m,g)&&a.push("active"),(m<r||s<m)&&a.push("disabled"),m===p&&a.push("focused"),o!==w.noop&&((u=o(new Date(m,0,1)))===x?u={}:"boolean"==typeof u?u={enabled:u}:"string"==typeof u&&(u={classes:u}),!1===u.enabled&&a.push("disabled"),u.classes&&(a=a.concat(u.classes.split(/\s+/))),u.tooltip&&(l=u.tooltip)),c+='<span class="'+a.join(" ")+'"'+(l?' title="'+l+'"':"")+">"+m+"</span>";e.find(".datepicker-switch").text(d+"-"+f),e.find("td").html(c)},fill:function(){var e,t,n=new Date(this.viewDate),i=n.getUTCFullYear(),r=n.getUTCMonth(),s=this.o.startDate!==-1/0?this.o.startDate.getUTCFullYear():-1/0,o=this.o.startDate!==-1/0?this.o.startDate.getUTCMonth():-1/0,a=this.o.endDate!==1/0?this.o.endDate.getUTCFullYear():1/0,l=this.o.endDate!==1/0?this.o.endDate.getUTCMonth():1/0,u=D[this.o.language].today||D.en.today||"",c=D[this.o.language].clear||D.en.clear||"",h=D[this.o.language].titleFormat||D.en.titleFormat,d=k(),d=(!0===this.o.todayBtn||"linked"===this.o.todayBtn)&&d>=this.o.startDate&&d<=this.o.endDate&&!this.weekOfDateIsDisabled(d);if(!isNaN(i)&&!isNaN(r)){this.picker.find(".datepicker-days .datepicker-switch").text(T.formatDate(n,h,this.o.language)),this.picker.find("tfoot .today").text(u).css("display",d?"table-cell":"none"),this.picker.find("tfoot .clear").text(c).css("display",!0===this.o.clearBtn?"table-cell":"none"),this.picker.find("thead .datepicker-title").text(this.o.title).css("display","string"==typeof this.o.title&&""!==this.o.title?"table-cell":"none"),this.updateNavArrows(),this.fillMonths();var f=C(i,r,0),n=f.getUTCDate(),p=(f.setUTCDate(n-(f.getUTCDay()-this.o.weekStart+7)%7),new Date(f));f.getUTCFullYear()<100&&p.setUTCFullYear(f.getUTCFullYear()),p.setUTCDate(p.getUTCDate()+42);for(var g,p=p.valueOf(),m=[];f.valueOf()<p;){(g=f.getUTCDay())===this.o.weekStart&&(m.push("<tr>"),this.o.calendarWeeks)&&(v=new Date(+f+(this.o.weekStart-g-7)%7*864e5),v=new Date(Number(v)+(11-v.getUTCDay())%7*864e5),y=new Date(Number(y=C(v.getUTCFullYear(),0,1))+(11-y.getUTCDay())%7*864e5),m.push('<td class="cw">'+((v-y)/864e5/7+1)+"</td>")),(v=this.getClassNames(f)).push("day");var v,y=f.getUTCDate();this.o.beforeShowDay!==w.noop&&((t=this.o.beforeShowDay(this._utc_to_local(f)))===x?t={}:"boolean"==typeof t?t={enabled:t}:"string"==typeof t&&(t={classes:t}),!1===t.enabled&&v.push("disabled"),t.classes&&(v=v.concat(t.classes.split(/\s+/))),t.tooltip&&(e=t.tooltip),t.content&&(y=t.content)),v=w.isFunction(w.uniqueSort)?w.uniqueSort(v):w.unique(v),m.push('<td class="'+v.join(" ")+'"'+(e?' title="'+e+'"':"")+' data-date="'+f.getTime().toString()+'">'+y+"</td>"),e=null,g===this.o.weekEnd&&m.push("</tr>"),f.setUTCDate(f.getUTCDate()+1)}this.picker.find(".datepicker-days tbody").html(m.join(""));var _,h=D[this.o.language].monthsTitle||D.en.monthsTitle||"Months",b=this.picker.find(".datepicker-months").find(".datepicker-switch").text(this.o.maxViewMode<2?h:i).end().find("tbody span").removeClass("active");w.each(this.dates,function(e,t){t.getUTCFullYear()===i&&b.eq(t.getUTCMonth()).addClass("active")}),(i<s||a<i)&&b.addClass("disabled"),i===s&&b.slice(0,o).addClass("disabled"),i===a&&b.slice(l+1).addClass("disabled"),this.o.beforeShowMonth!==w.noop&&(_=this,w.each(b,function(e,t){e=new Date(i,e,1),e=_.o.beforeShowMonth(e);e===x?e={}:"boolean"==typeof e?e={enabled:e}:"string"==typeof e&&(e={classes:e}),!1!==e.enabled||w(t).hasClass("disabled")||w(t).addClass("disabled"),e.classes&&w(t).addClass(e.classes),e.tooltip&&w(t).prop("title",e.tooltip)})),this._fill_yearsView(".datepicker-years","year",10,i,s,a,this.o.beforeShowYear),this._fill_yearsView(".datepicker-decades","decade",100,i,s,a,this.o.beforeShowDecade),this._fill_yearsView(".datepicker-centuries","century",1e3,i,s,a,this.o.beforeShowCentury)}},updateNavArrows:function(){if(this._allow_update){var e,t,n=new Date(this.viewDate),i=n.getUTCFullYear(),r=n.getUTCMonth(),s=this.o.startDate!==-1/0?this.o.startDate.getUTCFullYear():-1/0,o=this.o.startDate!==-1/0?this.o.startDate.getUTCMonth():-1/0,a=this.o.endDate!==1/0?this.o.endDate.getUTCFullYear():1/0,l=this.o.endDate!==1/0?this.o.endDate.getUTCMonth():1/0,u=1;switch(this.viewMode){case 4:u*=10;case 3:u*=10;case 2:u*=10;case 1:e=Math.floor(i/u)*u<=s,t=Math.floor(i/u)*u+u>a;break;case 0:e=i<=s&&r<=o,t=a<=i&&l<=r}this.picker.find(".prev").toggleClass("disabled",e),this.picker.find(".next").toggleClass("disabled",t)}},click:function(e){var t,n;e.preventDefault(),e.stopPropagation(),(e=w(e.target)).hasClass("datepicker-switch")&&this.viewMode!==this.o.maxViewMode&&this.setViewMode(this.viewMode+1),e.hasClass("today")&&!e.hasClass("day")&&(this.setViewMode(0),this._setDate(k(),"linked"===this.o.todayBtn?null:"view")),e.hasClass("clear")&&this.clearDates(),e.hasClass("disabled")||(e.hasClass("month")||e.hasClass("year")||e.hasClass("decade")||e.hasClass("century"))&&(this.viewDate.setUTCDate(1),1===this.viewMode?(n=e.parent().find("span").index(e),t=this.viewDate.getUTCFullYear(),this.viewDate.setUTCMonth(n)):(n=0,t=Number(e.text()),this.viewDate.setUTCFullYear(t)),this._trigger(T.viewModes[this.viewMode-1].e,this.viewDate),this.viewMode===this.o.minViewMode?this._setDate(C(t,n,1)):(this.setViewMode(this.viewMode-1),this.fill())),this.picker.is(":visible")&&this._focused_from&&this._focused_from.focus(),delete this._focused_from},dayCellClick:function(e){e=w(e.currentTarget).data("date"),e=new Date(e);this.o.updateViewDate&&(e.getUTCFullYear()!==this.viewDate.getUTCFullYear()&&this._trigger("changeYear",this.viewDate),e.getUTCMonth()!==this.viewDate.getUTCMonth()&&this._trigger("changeMonth",this.viewDate)),this._setDate(e)},navArrowsClick:function(e){e=w(e.currentTarget).hasClass("prev")?-1:1;0!==this.viewMode&&(e*=12*T.viewModes[this.viewMode].navStep),this.viewDate=this.moveMonth(this.viewDate,e),this._trigger(T.viewModes[this.viewMode].e,this.viewDate),this.fill()},_toggle_multidate:function(e){var t=this.dates.contains(e);if(e||this.dates.clear(),-1!==t?(!0===this.o.multidate||1<this.o.multidate||this.o.toggleActive)&&this.dates.remove(t):(!1===this.o.multidate&&this.dates.clear(),this.dates.push(e)),"number"==typeof this.o.multidate)for(;this.dates.length>this.o.multidate;)this.dates.remove(0)},_setDate:function(e,t){t&&"date"!==t||this._toggle_multidate(e&&new Date(e)),(!t&&this.o.updateViewDate||"view"===t)&&(this.viewDate=e&&new Date(e)),this.fill(),this.setValue(),t&&"view"===t||this._trigger("changeDate"),this.inputField.trigger("change"),!this.o.autoclose||t&&"date"!==t||this.hide()},moveDay:function(e,t){var n=new Date(e);return n.setUTCDate(e.getUTCDate()+t),n},moveWeek:function(e,t){return this.moveDay(e,7*t)},moveMonth:function(e,t){if(!(n=e)||isNaN(n.getTime()))return this.o.defaultViewDate;var n;if(!t)return e;var i,r,s=new Date(e.valueOf()),o=s.getUTCDate(),a=s.getUTCMonth(),l=Math.abs(t);if(t=0<t?1:-1,1===l)r=-1===t?function(){return s.getUTCMonth()===a}:function(){return s.getUTCMonth()!==i},i=a+t,s.setUTCMonth(i),i=(i+12)%12;else{for(var u=0;u<l;u++)s=this.moveMonth(s,t);i=s.getUTCMonth(),s.setUTCDate(o),r=function(){return i!==s.getUTCMonth()}}for(;r();)s.setUTCDate(--o),s.setUTCMonth(i);return s},moveYear:function(e,t){return this.moveMonth(e,12*t)},moveAvailableDate:function(e,t,n){do{if(e=this[n](e,t),!this.dateWithinRange(e))return!1}while(n="moveDay",this.dateIsDisabled(e));return e},weekOfDateIsDisabled:function(e){return-1!==w.inArray(e.getUTCDay(),this.o.daysOfWeekDisabled)},dateIsDisabled:function(t){return this.weekOfDateIsDisabled(t)||0<w.grep(this.o.datesDisabled,function(e){return s(t,e)}).length},dateWithinRange:function(e){return e>=this.o.startDate&&e<=this.o.endDate},keydown:function(e){if(this.picker.is(":visible")){var t,n,i=!1,r=this.focusDate||this.viewDate;switch(e.keyCode){case 27:this.focusDate?(this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill()):this.hide(),e.preventDefault(),e.stopPropagation();break;case 37:case 38:case 39:case 40:if(!this.o.keyboardNavigation||7===this.o.daysOfWeekDisabled.length)break;t=37===e.keyCode||38===e.keyCode?-1:1,0===this.viewMode?e.ctrlKey?(n=this.moveAvailableDate(r,t,"moveYear"))&&this._trigger("changeYear",this.viewDate):e.shiftKey?(n=this.moveAvailableDate(r,t,"moveMonth"))&&this._trigger("changeMonth",this.viewDate):37===e.keyCode||39===e.keyCode?n=this.moveAvailableDate(r,t,"moveDay"):this.weekOfDateIsDisabled(r)||(n=this.moveAvailableDate(r,t,"moveWeek")):1===this.viewMode?(38!==e.keyCode&&40!==e.keyCode||(t*=4),n=this.moveAvailableDate(r,t,"moveMonth")):2===this.viewMode&&(38!==e.keyCode&&40!==e.keyCode||(t*=4),n=this.moveAvailableDate(r,t,"moveYear")),n&&(this.focusDate=this.viewDate=n,this.setValue(),this.fill(),e.preventDefault());break;case 13:if(!this.o.forceParse)break;r=this.focusDate||this.dates.get(-1)||this.viewDate,this.o.keyboardNavigation&&(this._toggle_multidate(r),i=!0),this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.setValue(),this.fill(),this.picker.is(":visible")&&(e.preventDefault(),e.stopPropagation(),this.o.autoclose&&this.hide());break;case 9:this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill(),this.hide()}i&&(this.dates.length?this._trigger("changeDate"):this._trigger("clearDate"),this.inputField.trigger("change"))}else 40!==e.keyCode&&27!==e.keyCode||(this.show(),e.stopPropagation())},setViewMode:function(e){this.viewMode=e,this.picker.children("div").hide().filter(".datepicker-"+T.viewModes[this.viewMode].clsName).show(),this.updateNavArrows(),this._trigger("changeViewMode",new Date(this.viewDate))}},l.prototype={updateDates:function(){this.dates=w.map(this.pickers,function(e){return e.getUTCDate()}),this.updateRanges()},updateRanges:function(){var n=w.map(this.dates,function(e){return e.valueOf()});w.each(this.pickers,function(e,t){t.setRange(n)})},clearDates:function(){w.each(this.pickers,function(e,t){t.clearDates()})},dateUpdated:function(e){if(!this.updating){this.updating=!0;var n=w.data(e.target,"datepicker");if(n!==x){var i=n.getUTCDate(),r=this.keepEmptyValues,e=w.inArray(e.target,this.inputs),t=e-1,s=e+1,o=this.inputs.length;if(-1!==e){if(w.each(this.pickers,function(e,t){t.getUTCDate()||t!==n&&r||t.setUTCDate(i)}),i<this.dates[t])for(;0<=t&&i<this.dates[t];)this.pickers[t--].setUTCDate(i);else if(i>this.dates[s])for(;s<o&&i>this.dates[s];)this.pickers[s++].setUTCDate(i);this.updateDates(),delete this.updating}}}},destroy:function(){w.map(this.pickers,function(e){e.destroy()}),w(this.inputs).off("changeDate",this.dateUpdated),delete this.element.data().datepicker},remove:e("destroy","Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead")},w.fn.datepicker),r=function(s){var o,a=Array.apply(null,arguments);if(a.shift(),this.each(function(){var e,t,n=w(this),i=n.data("datepicker"),r="object"==typeof s&&s;i||(e=function(e,t){function n(e,t){return t.toLowerCase()}var i,r,s=w(e).data(),o={},a=new RegExp("^"+t.toLowerCase()+"([A-Z])");for(r in t=new RegExp("^"+t.toLowerCase()),s)t.test(r)&&(i=r.replace(a,n),o[i]=s[r]);return o}(this,"date"),t=function(e){var n,i={};if(D[e]||(e=e.split("-")[0],D[e]))return n=D[e],w.each(c,function(e,t){t in n&&(i[t]=n[t])}),i}(w.extend({},u,e,r).language),t=w.extend({},u,t,e,r),i=n.hasClass("input-daterange")||t.inputs?(w.extend(t,{inputs:t.inputs||n.find("input").toArray()}),new l(this,t)):new E(this,t),n.data("datepicker",i)),"string"==typeof s&&"function"==typeof i[s]&&(o=i[s].apply(i,a))}),o===x||o instanceof E||o instanceof l)return this;if(1<this.length)throw new Error("Using only allowed for the collection of a single element ("+s+" function)");return o},u=(w.fn.datepicker=r,w.fn.datepicker.defaults={assumeNearbyYear:!1,autoclose:!1,beforeShowDay:w.noop,beforeShowMonth:w.noop,beforeShowYear:w.noop,beforeShowDecade:w.noop,beforeShowCentury:w.noop,calendarWeeks:!1,clearBtn:!1,toggleActive:!1,daysOfWeekDisabled:[],daysOfWeekHighlighted:[],datesDisabled:[],endDate:1/0,forceParse:!0,format:"mm/dd/yyyy",keepEmptyValues:!1,keyboardNavigation:!0,language:"en",minViewMode:0,maxViewMode:4,multidate:!1,multidateSeparator:",",orientation:"auto",rtl:!1,startDate:-1/0,startView:0,todayBtn:!1,todayHighlight:!1,updateViewDate:!0,weekStart:0,disableTouchKeyboard:!1,enableOnReadonly:!0,showOnFocus:!0,zIndexOffset:10,container:"body",immediateUpdates:!1,title:"",templates:{leftArrow:"&#x00AB;",rightArrow:"&#x00BB;"},showWeekDays:!0}),c=w.fn.datepicker.locale_opts=["format","rtl","weekStart"],D=(w.fn.datepicker.Constructor=E,w.fn.datepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear",titleFormat:"MM yyyy"}}),T={viewModes:[{names:["days","month"],clsName:"days",e:"changeMonth"},{names:["months","year"],clsName:"months",e:"changeYear",navStep:1},{names:["years","decade"],clsName:"years",e:"changeDecade",navStep:10},{names:["decades","century"],clsName:"decades",e:"changeCentury",navStep:100},{names:["centuries","millennium"],clsName:"centuries",e:"changeMillennium",navStep:1e3}],validParts:/dd?|DD?|mm?|MM?|yy(?:yy)?/g,nonpunctuation:/[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,parseFormat:function(e){if("function"==typeof e.toValue&&"function"==typeof e.toDisplay)return e;var t=e.replace(this.validParts,"\0").split("\0"),e=e.match(this.validParts);if(t&&t.length&&e&&0!==e.length)return{separators:t,parts:e};throw new Error("Invalid date format.")},parseDate:function(e,t,n,i){function r(){var e=this.slice(0,d[_].length),t=d[_].slice(0,e.length);return e.toLowerCase()===t.toLowerCase()}if(!e)return x;if(e instanceof Date)return e;if((t="string"==typeof t?T.parseFormat(t):t).toValue)return t.toValue(e,t,n);var s,o,a,l={d:"moveDay",m:"moveMonth",w:"moveWeek",y:"moveYear"},u={yesterday:"-1d",today:"+0d",tomorrow:"+1d"};if(/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/i.test(e=e in u?u[e]:e)){for(d=e.match(/([\-+]\d+)([dmwy])/gi),e=new Date,_=0;_<d.length;_++)s=d[_].match(/([\-+]\d+)([dmwy])/i),o=Number(s[1]),a=l[s[2].toLowerCase()],e=E.prototype[a](e,o);return E.prototype._zero_utc_time(e)}var c,h,d=e&&e.match(this.nonpunctuation)||[],f={},p=["yyyy","yy","M","MM","m","mm","d","dd"],g={yyyy:function(e,t){return e.setUTCFullYear(i?(!0===(e=i)&&(e=10),(n=t)<100&&(n+=2e3)>(new Date).getFullYear()+e&&(n-=100),n):t);var n},m:function(e,t){if(isNaN(e))return e;for(--t;t<0;)t+=12;for(e.setUTCMonth(t%=12);e.getUTCMonth()!==t;)e.setUTCDate(e.getUTCDate()-1);return e},d:function(e,t){return e.setUTCDate(t)}},m=(g.yy=g.yyyy,g.M=g.MM=g.mm=g.m,g.dd=g.d,e=k(),t.parts.slice());if(d.length!==m.length&&(m=w(m).filter(function(e,t){return-1!==w.inArray(t,p)}).toArray()),d.length===m.length){for(var v,y,_=0,b=m.length;_<b;_++){if(c=parseInt(d[_],10),s=m[_],isNaN(c))switch(s){case"MM":h=w(D[n].months).filter(r),c=w.inArray(h[0],D[n].months)+1;break;case"M":h=w(D[n].monthsShort).filter(r),c=w.inArray(h[0],D[n].monthsShort)+1}f[s]=c}for(_=0;_<p.length;_++)(y=p[_])in f&&!isNaN(f[y])&&(v=new Date(e),g[y](v,f[y]),isNaN(v)||(e=v))}return e},formatDate:function(e,t,n){if(!e)return"";if((t="string"==typeof t?T.parseFormat(t):t).toDisplay)return t.toDisplay(e,t,n);var i={d:e.getUTCDate(),D:D[n].daysShort[e.getUTCDay()],DD:D[n].days[e.getUTCDay()],m:e.getUTCMonth()+1,M:D[n].monthsShort[e.getUTCMonth()],MM:D[n].months[e.getUTCMonth()],yy:e.getUTCFullYear().toString().substring(2),yyyy:e.getUTCFullYear()};i.dd=(i.d<10?"0":"")+i.d,i.mm=(i.m<10?"0":"")+i.m,e=[];for(var r=w.extend([],t.separators),s=0,o=t.parts.length;s<=o;s++)r.length&&e.push(r.shift()),e.push(i[t.parts[s]]);return e.join("")},headTemplate:'<thead><tr><th colspan="7" class="datepicker-title"></th></tr><tr><th class="prev">'+u.templates.leftArrow+'</th><th colspan="5" class="datepicker-switch"></th><th class="next">'+u.templates.rightArrow+"</th></tr></thead>",contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'};T.template='<div class="datepicker"><div class="datepicker-days"><table class="table-condensed">'+T.headTemplate+"<tbody></tbody>"+T.footTemplate+'</table></div><div class="datepicker-months"><table class="table-condensed">'+T.headTemplate+T.contTemplate+T.footTemplate+'</table></div><div class="datepicker-years"><table class="table-condensed">'+T.headTemplate+T.contTemplate+T.footTemplate+'</table></div><div class="datepicker-decades"><table class="table-condensed">'+T.headTemplate+T.contTemplate+T.footTemplate+'</table></div><div class="datepicker-centuries"><table class="table-condensed">'+T.headTemplate+T.contTemplate+T.footTemplate+"</table></div></div>",w.fn.datepicker.DPGlobal=T,w.fn.datepicker.noConflict=function(){return w.fn.datepicker=i,this},w.fn.datepicker.version="1.9.0",w.fn.datepicker.deprecated=function(e){var t=window.console;t&&t.warn&&t.warn("DEPRECATED: "+e)},w(document).on("focus.datepicker.data-api click.datepicker.data-api",'[data-provide="datepicker"]',function(e){var t=w(this);t.data("datepicker")||(e.preventDefault(),r.call(t,"show"))}),w(function(){r.call(w('[data-provide="datepicker-inline"]'))})}),function(s){"use strict";function r(e,t){this.$element=s(e),this.options=s.extend({},this.defaults(),t),this.render()}r.VERSION="3.6.0",r.DEFAULTS={on:"On",off:"Off",onstyle:"primary",offstyle:"light",size:"normal",style:"",width:null,height:null},r.prototype.defaults=function(){return{on:this.$element.attr("data-on")||r.DEFAULTS.on,off:this.$element.attr("data-off")||r.DEFAULTS.off,onstyle:this.$element.attr("data-onstyle")||r.DEFAULTS.onstyle,offstyle:this.$element.attr("data-offstyle")||r.DEFAULTS.offstyle,size:this.$element.attr("data-size")||r.DEFAULTS.size,style:this.$element.attr("data-style")||r.DEFAULTS.style,width:this.$element.attr("data-width")||r.DEFAULTS.width,height:this.$element.attr("data-height")||r.DEFAULTS.height}},r.prototype.render=function(){this._onstyle="btn-"+this.options.onstyle,this._offstyle="btn-"+this.options.offstyle;var e="large"===this.options.size||"lg"===this.options.size?"btn-lg":"small"===this.options.size||"sm"===this.options.size?"btn-sm":"mini"===this.options.size||"xs"===this.options.size?"btn-xs":"",t=s('<label for="'+this.$element.prop("id")+'" class="btn">').html(this.options.on).addClass(this._onstyle+" "+e),n=s('<label for="'+this.$element.prop("id")+'" class="btn">').html(this.options.off).addClass(this._offstyle+" "+e),i=s('<span class="toggle-handle btn btn-light">').addClass(e),r=s('<div class="toggle-group">').append(t,n,i),e=s('<div class="toggle btn" data-toggle="toggle" role="button">').addClass(this.$element.prop("checked")?this._onstyle:this._offstyle+" off").addClass(e).addClass(this.options.style),e=(this.$element.wrap(e),s.extend(this,{$toggle:this.$element.parent(),$toggleOn:t,$toggleOff:n,$toggleGroup:r}),this.$toggle.append(r),this.options.width||Math.max(t.outerWidth(),n.outerWidth())+i.outerWidth()/2),r=this.options.height||Math.max(t.outerHeight(),n.outerHeight());t.addClass("toggle-on"),n.addClass("toggle-off"),this.$toggle.css({width:e,height:r}),this.options.height&&(t.css("line-height",t.height()+"px"),n.css("line-height",n.height()+"px")),this.update(!0),this.trigger(!0)},r.prototype.toggle=function(){this.$element.prop("checked")?this.off():this.on()},r.prototype.on=function(e){if(this.$element.prop("disabled"))return!1;this.$toggle.removeClass(this._offstyle+" off").addClass(this._onstyle),this.$element.prop("checked",!0),e||this.trigger()},r.prototype.off=function(e){if(this.$element.prop("disabled"))return!1;this.$toggle.removeClass(this._onstyle).addClass(this._offstyle+" off"),this.$element.prop("checked",!1),e||this.trigger()},r.prototype.enable=function(){this.$toggle.removeClass("disabled"),this.$toggle.removeAttr("disabled"),this.$element.prop("disabled",!1)},r.prototype.disable=function(){this.$toggle.addClass("disabled"),this.$toggle.attr("disabled","disabled"),this.$element.prop("disabled",!0)},r.prototype.update=function(e){this.$element.prop("disabled")?this.disable():this.enable(),this.$element.prop("checked")?this.on(e):this.off(e)},r.prototype.trigger=function(e){this.$element.off("change.bs.toggle"),e||this.$element.change(),this.$element.on("change.bs.toggle",s.proxy(function(){this.update()},this))},r.prototype.destroy=function(){this.$element.off("change.bs.toggle"),this.$toggleGroup.remove(),this.$element.removeData("bs.toggle"),this.$element.unwrap()};var e=s.fn.bootstrapToggle;s.fn.bootstrapToggle=function(n){var i=Array.prototype.slice.call(arguments,1)[0];return this.each(function(){var e=s(this),t=e.data("bs.toggle");t||e.data("bs.toggle",t=new r(this,"object"==typeof n&&n)),"string"==typeof n&&t[n]&&"boolean"==typeof i?t[n](i):"string"==typeof n&&t[n]&&t[n]()})},s.fn.bootstrapToggle.Constructor=r,s.fn.toggle.noConflict=function(){return s.fn.bootstrapToggle=e,this},s(function(){s("input[type=checkbox][data-toggle^=toggle]").bootstrapToggle()}),s(document).on("click.bs.toggle","div[data-toggle^=toggle]",function(e){s(this).find("input[type=checkbox]").bootstrapToggle("toggle"),e.preventDefault()})}(jQuery),function(e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).JSZip=e()}(function(){return function i(r,s,o){function a(t,e){if(!s[t]){if(!r[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}n=s[t]={exports:{}};r[t][0].call(n.exports,function(e){return a(r[t][1][e]||e)},n,n.exports,i,r,s,o)}return s[t].exports}for(var l="function"==typeof require&&require,e=0;e<o.length;e++)a(o[e]);return a}({1:[function(e,t,n){"use strict";var h=e("./utils"),c=e("./support"),d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";n.encode=function(e){for(var t,n,i,r,s,o,a=[],l=0,u=e.length,c="string"!==h.getTypeOf(e);l<e.length;)o=u-l,i=c?(t=e[l++],n=l<u?e[l++]:0,l<u?e[l++]:0):(t=e.charCodeAt(l++),n=l<u?e.charCodeAt(l++):0,l<u?e.charCodeAt(l++):0),r=(3&t)<<4|n>>4,s=1<o?(15&n)<<2|i>>6:64,o=2<o?63&i:64,a.push(d.charAt(t>>2)+d.charAt(r)+d.charAt(s)+d.charAt(o));return a.join("")},n.decode=function(e){var t,n,i,r,s,o=0,a=0;if("data:"===e.substr(0,"data:".length))throw new Error("Invalid base64 input, it looks like a data url.");var l,u=3*(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(e.charAt(e.length-1)===d.charAt(64)&&u--,e.charAt(e.length-2)===d.charAt(64)&&u--,u%1!=0)throw new Error("Invalid base64 input, bad content length.");for(l=new(c.uint8array?Uint8Array:Array)(0|u);o<e.length;)t=d.indexOf(e.charAt(o++))<<2|(r=d.indexOf(e.charAt(o++)))>>4,n=(15&r)<<4|(r=d.indexOf(e.charAt(o++)))>>2,i=(3&r)<<6|(s=d.indexOf(e.charAt(o++))),l[a++]=t,64!==r&&(l[a++]=n),64!==s&&(l[a++]=i);return l}},{"./support":30,"./utils":32}],2:[function(e,t,n){"use strict";var i=e("./external"),r=e("./stream/DataWorker"),s=e("./stream/Crc32Probe"),o=e("./stream/DataLengthProbe");function a(e,t,n,i,r){this.compressedSize=e,this.uncompressedSize=t,this.crc32=n,this.compression=i,this.compressedContent=r}a.prototype={getContentWorker:function(){var e=new r(i.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),t=this;return e.on("end",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),e},getCompressedWorker:function(){return new r(i.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},a.createWorkerFrom=function(e,t,n){return e.pipe(new s).pipe(new o("uncompressedSize")).pipe(t.compressWorker(n)).pipe(new o("compressedSize")).withStreamInfo("compression",t)},t.exports=a},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,n){"use strict";var i=e("./stream/GenericWorker");n.STORE={magic:"\0\0",compressWorker:function(e){return new i("STORE compression")},uncompressWorker:function(){return new i("STORE decompression")}},n.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,n){"use strict";var i=e("./utils"),o=function(){for(var e=[],t=0;t<256;t++){for(var n=t,i=0;i<8;i++)n=1&n?3988292384^n>>>1:n>>>1;e[t]=n}return e}();t.exports=function(e,t){return void 0!==e&&e.length?("string"!==i.getTypeOf(e)?function(e,t,n){var i=o,r=0+n;e^=-1;for(var s=0;s<r;s++)e=e>>>8^i[255&(e^t[s])];return-1^e}:function(e,t,n){var i=o,r=0+n;e^=-1;for(var s=0;s<r;s++)e=e>>>8^i[255&(e^t.charCodeAt(s))];return-1^e})(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,n){"use strict";n.base64=!1,n.binary=!1,n.dir=!1,n.createFolders=!0,n.date=null,n.compression=null,n.compressionOptions=null,n.comment=null,n.unixPermissions=null,n.dosPermissions=null},{}],6:[function(e,t,n){"use strict";e="undefined"!=typeof Promise?Promise:e("lie");t.exports={Promise:e}},{lie:37}],7:[function(e,t,n){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,r=e("pako"),s=e("./utils"),o=e("./stream/GenericWorker"),a=i?"uint8array":"array";function l(e,t){o.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}n.magic="\b\0",s.inherits(l,o),l.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(a,e.data),!1)},l.prototype.flush=function(){o.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},l.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this._pako=null},l.prototype._createPako=function(){this._pako=new r[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},n.compressWorker=function(e){return new l("Deflate",e)},n.uncompressWorker=function(){return new l("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,n){"use strict";function y(e,t){for(var n="",i=0;i<t;i++)n+=String.fromCharCode(255&e),e>>>=8;return n}function i(e,t,n,i,r,s){var o=e.file,a=e.compression,l=s!==b.utf8encode,u=_.transformTo("string",s(o.name)),c=_.transformTo("string",b.utf8encode(o.name)),h=o.comment,s=_.transformTo("string",s(h)),d=_.transformTo("string",b.utf8encode(h)),f=c.length!==o.name.length,h=d.length!==h.length,p="",g=o.dir,m=o.date,v={crc32:0,compressedSize:0,uncompressedSize:0},n=(t&&!n||(v.crc32=e.crc32,v.compressedSize=e.compressedSize,v.uncompressedSize=e.uncompressedSize),0),e=(t&&(n|=8),l||!f&&!h||(n|=2048),0),t=0,m=(g&&(e|=16),"UNIX"===r?(t=798,e|=(65535&((l=o.unixPermissions)?l:g?16893:33204))<<16):(t=20,e|=63&(o.dosPermissions||0)),r=m.getUTCHours(),r=(r=((r<<=6)|m.getUTCMinutes())<<5)|m.getUTCSeconds()/2,l=m.getUTCFullYear()-1980,l=(l=((l<<=4)|m.getUTCMonth()+1)<<5)|m.getUTCDate(),f&&(g=y(1,1)+y(w(u),4)+c,p+="up"+y(g.length,2)+g),h&&(o=y(1,1)+y(w(s),4)+d,p+="uc"+y(o.length,2)+o),""),m=(m=(m=(m=(m=(m=(m=(m=(m=(m+="\n\0")+y(n,2))+a.magic)+y(r,2))+y(l,2))+y(v.crc32,4))+y(v.compressedSize,4))+y(v.uncompressedSize,4))+y(u.length,2))+y(p.length,2);return{fileRecord:x.LOCAL_FILE_HEADER+m+u+p,dirRecord:x.CENTRAL_FILE_HEADER+y(t,2)+m+y(s.length,2)+"\0\0\0\0"+y(e,4)+y(i,4)+u+p+s}}var _=e("../utils"),r=e("../stream/GenericWorker"),b=e("../utf8"),w=e("../crc32"),x=e("../signature");function s(e,t,n,i){r.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=n,this.encodeFileName=i,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}_.inherits(s,r),s.prototype.push=function(e){var t=e.meta.percent||0,n=this.entriesCount,i=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,r.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:n?(t+100*(n-i-1))/n:100}}))},s.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;t?(e=i(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName),this.push({data:e.fileRecord,meta:{percent:0}})):this.accumulate=!0},s.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,n=i(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),t)this.push({data:(t=e,x.DATA_DESCRIPTOR+y(t.crc32,4)+y(t.compressedSize,4)+y(t.uncompressedSize,4)),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var n=this.bytesWritten-e,n=function(e,t,n,i,r){r=_.transformTo("string",r(i));return x.CENTRAL_DIRECTORY_END+"\0\0\0\0"+y(e,2)+y(e,2)+y(t,4)+y(n,4)+y(r.length,2)+r}(this.dirRecords.length,n,e,this.zipComment,this.encodeFileName);this.push({data:n,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",function(e){t.processChunk(e)}),e.on("end",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()}),e.on("error",function(e){t.error(e)}),this},s.prototype.resume=function(){return!!r.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(e){var t=this._sources;if(!r.prototype.error.call(this,e))return!1;for(var n=0;n<t.length;n++)try{t[n].error(e)}catch(e){}return!0},s.prototype.lock=function(){r.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=s},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,n){"use strict";var u=e("../compressions"),i=e("./ZipFileWorker");n.generateWorker=function(e,o,t){var a=new i(o.streamFiles,t,o.platform,o.encodeFileName),l=0;try{e.forEach(function(e,t){l++;var n=function(e,t){e=e||t,t=u[e];if(t)return t;throw new Error(e+" is not a valid compression method !")}(t.options.compression,o.compression),i=t.options.compressionOptions||o.compressionOptions||{},r=t.dir,s=t.date;t._compressWorker(n,i).withStreamInfo("file",{name:e,dir:r,date:s,comment:t.comment||"",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(a)}),a.entriesCount=l}catch(e){a.error(e)}return a}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,n){"use strict";function i(){if(!(this instanceof i))return new i;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var e,t=new i;for(e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t}}(i.prototype=e("./object")).loadAsync=e("./load"),i.support=e("./support"),i.defaults=e("./defaults"),i.version="3.10.0",i.loadAsync=function(e,t){return(new i).loadAsync(e,t)},i.external=e("./external"),t.exports=i},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,n){"use strict";var l=e("./utils"),r=e("./external"),i=e("./utf8"),s=e("./zipEntries"),u=e("./stream/Crc32Probe"),c=e("./nodejsUtils");t.exports=function(e,o){var a=this;return o=l.extend(o||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:i.utf8decode}),c.isNode&&c.isStream(e)?r.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):l.prepareContent("the loaded zip file",e,!0,o.optimizedBinaryString,o.base64).then(function(e){var t=new s(o);return t.load(e),t}).then(function(e){var t=[r.Promise.resolve(e)],n=e.files;if(o.checkCRC32)for(var i=0;i<n.length;i++)t.push(function(i){return new r.Promise(function(e,t){var n=i.decompressed.getContentWorker().pipe(new u);n.on("error",function(e){t(e)}).on("end",function(){n.streamInfo.crc32!==i.decompressed.crc32?t(new Error("Corrupted zip : CRC32 mismatch")):e()}).resume()})}(n[i]));return r.Promise.all(t)}).then(function(e){for(var e=e.shift(),t=e.files,n=0;n<t.length;n++){var i=t[n],r=i.fileNameStr,s=l.resolve(i.fileNameStr);a.file(s,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:o.createFolders}),i.dir||(a.file(s).unsafeOriginalName=r)}return e.zipComment.length&&(a.comment=e.zipComment),a})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,n){"use strict";var i=e("../utils"),r=e("../stream/GenericWorker");function s(e,t){r.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}i.inherits(s,r),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",function(e){t.push({data:e,meta:{percent:0}})}).on("error",function(e){t.isPaused?this.generatedError=e:t.error(e)}).on("end",function(){t.isPaused?t._upstreamEnded=!0:t.end()})},s.prototype.pause=function(){return!!r.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!r.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,n){"use strict";var r=e("readable-stream").Readable;function i(e,t,n){r.call(this,t),this._helper=e;var i=this;e.on("data",function(e,t){i.push(e)||i._helper.pause(),n&&n(t)}).on("error",function(e){i.emit("error",e)}).on("end",function(){i.push(null)})}e("../utils").inherits(i,r),i.prototype._read=function(){this._helper.resume()},t.exports=i},{"../utils":32,"readable-stream":16}],14:[function(e,t,n){"use strict";t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);e=new Buffer(e);return e.fill(0),e},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,n){"use strict";function r(e,t,n){var i=l.getTypeOf(t),r=l.extend(n||{},h),s=(r.date=r.date||new Date,null!==r.compression&&(r.compression=r.compression.toUpperCase()),"string"==typeof r.unixPermissions&&(r.unixPermissions=parseInt(r.unixPermissions,8)),r.unixPermissions&&16384&r.unixPermissions&&(r.dir=!0),r.dosPermissions&&16&r.dosPermissions&&(r.dir=!0),r.dir&&(e=v(e)),r.createFolders&&(s=o(e))&&a.call(this,s,!0),"string"===i&&!1===r.binary&&!1===r.base64),i=(n&&void 0!==n.binary||(r.binary=!s),(t instanceof d&&0===t.uncompressedSize||r.dir||!t||0===t.length)&&(r.base64=!1,r.binary=!0,t="",r.compression="STORE"),t instanceof d||t instanceof u?t:g.isNode&&g.isStream(t)?new m(e,t):l.prepareContent(e,t,r.binary,r.optimizedBinaryString,r.base64)),n=new f(e,i,r);this.files[e]=n}function o(e){var t=(e="/"===e.slice(-1)?e.substring(0,e.length-1):e).lastIndexOf("/");return 0<t?e.substring(0,t):""}function a(e,t){return t=void 0!==t?t:h.createFolders,e=v(e),this.files[e]||r.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]}var s=e("./utf8"),l=e("./utils"),u=e("./stream/GenericWorker"),c=e("./stream/StreamHelper"),h=e("./defaults"),d=e("./compressedObject"),f=e("./zipObject"),p=e("./generate"),g=e("./nodejsUtils"),m=e("./nodejs/NodejsStreamInputAdapter"),v=function(e){return"/"!==e.slice(-1)&&(e+="/"),e};function y(e){return"[object RegExp]"===Object.prototype.toString.call(e)}t.exports={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,n,i;for(t in this.files)i=this.files[t],(n=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(n,i)},filter:function(n){var i=[];return this.forEach(function(e,t){n(e,t)&&i.push(t)}),i},file:function(e,t,n){if(1!==arguments.length)return e=this.root+e,r.call(this,e,t,n),this;var i;if(y(e))return i=e,this.filter(function(e,t){return!t.dir&&i.test(e)});t=this.files[this.root+e];return t&&!t.dir?t:null},folder:function(n){if(!n)return this;if(y(n))return this.filter(function(e,t){return t.dir&&n.test(e)});var e=this.root+n,e=a.call(this,e),t=this.clone();return t.root=e.name,t},remove:function(n){n=this.root+n;var e=this.files[n];if(e||("/"!==n.slice(-1)&&(n+="/"),e=this.files[n]),e&&!e.dir)delete this.files[n];else for(var t=this.filter(function(e,t){return t.name.slice(0,n.length)===n}),i=0;i<t.length;i++)delete this.files[t[i].name];return this},generate:function(e){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t={};try{if((t=l.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:s.utf8encode})).type=t.type.toLowerCase(),t.compression=t.compression.toUpperCase(),"binarystring"===t.type&&(t.type="string"),!t.type)throw new Error("No output type specified.");l.checkSupport(t.type),"darwin"!==t.platform&&"freebsd"!==t.platform&&"linux"!==t.platform&&"sunos"!==t.platform||(t.platform="UNIX"),"win32"===t.platform&&(t.platform="DOS");var n=t.comment||this.comment||"",i=p.generateWorker(this,t,n)}catch(e){(i=new u("error")).error(e)}return new c(i,t.type||"string",t.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}}},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,n){t.exports=e("stream")},{stream:void 0}],17:[function(e,t,n){"use strict";var i=e("./DataReader");function r(e){i.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(r,i),r.prototype.byteAt=function(e){return this.data[this.zero+e]},r.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),n=e.charCodeAt(1),i=e.charCodeAt(2),r=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===n&&this.data[s+2]===i&&this.data[s+3]===r)return s-this.zero;return-1},r.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1),i=e.charCodeAt(2),e=e.charCodeAt(3),r=this.readData(4);return t===r[0]&&n===r[1]&&i===r[2]&&e===r[3]},r.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=r},{"../utils":32,"./DataReader":18}],18:[function(e,t,n){"use strict";var i=e("../utils");function r(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}r.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(e){},readInt:function(e){var t,n=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)n=(n<<8)+this.byteAt(t);return this.index+=e,n},readString:function(e){return i.transformTo("string",this.readData(e))},readData:function(e){},lastIndexOfSignature:function(e){},readAndCheckSignature:function(e){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=r},{"../utils":32}],19:[function(e,t,n){"use strict";var i=e("./Uint8ArrayReader");function r(e){i.call(this,e)}e("../utils").inherits(r,i),r.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=r},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,n){"use strict";var i=e("./DataReader");function r(e){i.call(this,e)}e("../utils").inherits(r,i),r.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},r.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},r.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},r.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=r},{"../utils":32,"./DataReader":18}],21:[function(e,t,n){"use strict";var i=e("./ArrayReader");function r(e){i.call(this,e)}e("../utils").inherits(r,i),r.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=r},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,n){"use strict";var i=e("../utils"),r=e("../support"),s=e("./ArrayReader"),o=e("./StringReader"),a=e("./NodeBufferReader"),l=e("./Uint8ArrayReader");t.exports=function(e){var t=i.getTypeOf(e);return i.checkSupport(t),"string"!==t||r.uint8array?"nodebuffer"===t?new a(e):r.uint8array?new l(i.transformTo("uint8array",e)):new s(i.transformTo("array",e)):new o(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,n){"use strict";n.LOCAL_FILE_HEADER="PK",n.CENTRAL_FILE_HEADER="PK",n.CENTRAL_DIRECTORY_END="PK",n.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",n.ZIP64_CENTRAL_DIRECTORY_END="PK",n.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,n){"use strict";var i=e("./GenericWorker"),r=e("../utils");function s(e){i.call(this,"ConvertWorker to "+e),this.destType=e}r.inherits(s,i),s.prototype.processChunk=function(e){this.push({data:r.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,n){"use strict";var i=e("./GenericWorker"),r=e("../crc32");function s(){i.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(s,i),s.prototype.processChunk=function(e){this.streamInfo.crc32=r(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,n){"use strict";var i=e("../utils"),r=e("./GenericWorker");function s(e){r.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}i.inherits(s,r),s.prototype.processChunk=function(e){var t;e&&(t=this.streamInfo[this.propName]||0,this.streamInfo[this.propName]=t+e.data.length),r.prototype.processChunk.call(this,e)},t.exports=s},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,n){"use strict";var i=e("../utils"),r=e("./GenericWorker");function s(e){r.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=i.getTypeOf(e),t.isPaused||t._tickAndRepeat()},function(e){t.error(e)})}i.inherits(s,r),s.prototype.cleanUp=function(){r.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!r.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,i.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(i.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,n){"use strict";function i(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}i.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var n=0;n<this._listeners[e].length;n++)this._listeners[e][n].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",function(e){t.processChunk(e)}),e.on("end",function(){t.end()}),e.on("error",function(e){t.error(e)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=i},{}],29:[function(e,t,n){"use strict";var u=e("../utils"),r=e("./ConvertWorker"),s=e("./GenericWorker"),c=e("../base64"),i=e("../support"),o=e("../external"),a=null;if(i.nodestream)try{a=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function l(e,t,n){var i=t;switch(t){case"blob":case"arraybuffer":i="uint8array";break;case"base64":i="string"}try{this._internalType=i,this._outputType=t,this._mimeType=n,u.checkSupport(i),this._worker=e.pipe(new r(i)),e.lock()}catch(e){this._worker=new s("error"),this._worker.error(e)}}l.prototype={accumulate:function(e){return a=this,l=e,new o.Promise(function(t,n){var i=[],r=a._internalType,s=a._outputType,o=a._mimeType;a.on("data",function(e,t){i.push(e),l&&l(t)}).on("error",function(e){i=[],n(e)}).on("end",function(){try{var e=function(e,t,n){switch(e){case"blob":return u.newBlob(u.transformTo("arraybuffer",t),n);case"base64":return c.encode(t);default:return u.transformTo(e,t)}}(s,function(e,t){for(var n=0,i=null,r=0,s=0;s<t.length;s++)r+=t[s].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(i=new Uint8Array(r),s=0;s<t.length;s++)i.set(t[s],n),n+=t[s].length;return i;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(r,i),o);t(e)}catch(e){n(e)}i=[]}).resume()});var a,l},on:function(e,t){var n=this;return"data"===e?this._worker.on(e,function(e){t.call(n,e.data,e.meta)}):this._worker.on(e,function(){u.delay(t,arguments,n)}),this},resume:function(){return u.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(u.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new a(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=l},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,n){"use strict";if(n.base64=!0,n.array=!0,n.string=!0,n.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,n.nodebuffer="undefined"!=typeof Buffer,n.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)n.blob=!1;else{var i=new ArrayBuffer(0);try{n.blob=0===new Blob([i],{type:"application/zip"}).size}catch(e){try{var r=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);r.append(i),n.blob=0===r.getBlob("application/zip").size}catch(e){n.blob=!1}}}try{n.nodestream=!!e("readable-stream").Readable}catch(e){n.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,r){"use strict";for(var l=e("./utils"),u=e("./support"),c=e("./nodejsUtils"),n=e("./stream/GenericWorker"),h=new Array(256),i=0;i<256;i++)h[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function s(){n.call(this,"utf-8 decode"),this.leftOver=null}function o(){n.call(this,"utf-8 encode")}h[254]=h[254]=1,r.utf8encode=function(e){if(u.nodebuffer)return c.newBufferFrom(e,"utf-8");for(var t,n,i,r,s=e,o=s.length,a=0,l=0;l<o;l++)55296==(64512&(n=s.charCodeAt(l)))&&l+1<o&&56320==(64512&(i=s.charCodeAt(l+1)))&&(n=65536+(n-55296<<10)+(i-56320),l++),a+=n<128?1:n<2048?2:n<65536?3:4;for(t=new(u.uint8array?Uint8Array:Array)(a),l=r=0;r<a;l++)55296==(64512&(n=s.charCodeAt(l)))&&l+1<o&&56320==(64512&(i=s.charCodeAt(l+1)))&&(n=65536+(n-55296<<10)+(i-56320),l++),n<128?t[r++]=n:(n<2048?t[r++]=192|n>>>6:(n<65536?t[r++]=224|n>>>12:(t[r++]=240|n>>>18,t[r++]=128|n>>>12&63),t[r++]=128|n>>>6&63),t[r++]=128|63&n);return t},r.utf8decode=function(e){if(u.nodebuffer)return l.transformTo("nodebuffer",e).toString("utf-8");for(var t,n,i,r=e=l.transformTo(u.uint8array?"uint8array":"array",e),s=r.length,o=new Array(2*s),a=t=0;a<s;)if((n=r[a++])<128)o[t++]=n;else if(4<(i=h[n]))o[t++]=65533,a+=i-1;else{for(n&=2===i?31:3===i?15:7;1<i&&a<s;)n=n<<6|63&r[a++],i--;1<i?o[t++]=65533:n<65536?o[t++]=n:(n-=65536,o[t++]=55296|n>>10&1023,o[t++]=56320|1023&n)}return o.length!==t&&(o.subarray?o=o.subarray(0,t):o.length=t),l.applyFromCharCode(o)},l.inherits(s,n),s.prototype.processChunk=function(e){var t=l.transformTo(u.uint8array?"uint8array":"array",e.data),n=(this.leftOver&&this.leftOver.length&&(u.uint8array?(n=t,(t=new Uint8Array(n.length+this.leftOver.length)).set(this.leftOver,0),t.set(n,this.leftOver.length)):t=this.leftOver.concat(t),this.leftOver=null),function(e,t){for(var n=(t=(t=t||e.length)>e.length?e.length:t)-1;0<=n&&128==(192&e[n]);)n--;return!(n<0)&&0!==n&&n+h[e[n]]>t?n:t}(t)),i=t;n!==t.length&&(u.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:r.utf8decode(i),meta:e.meta})},s.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},r.Utf8DecodeWorker=s,l.inherits(o,n),o.prototype.processChunk=function(e){this.push({data:r.utf8encode(e.data),meta:e.meta})},r.Utf8EncodeWorker=o},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,o){"use strict";var a=e("./support"),l=e("./base64"),n=e("./nodejsUtils"),u=e("./external");function i(e){return e}function c(e,t){for(var n=0;n<e.length;++n)t[n]=255&e.charCodeAt(n);return t}e("setimmediate"),o.newBlob=function(t,n){o.checkSupport("blob");try{return new Blob([t],{type:n})}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return i.append(t),i.getBlob(n)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var r={stringifyByChunk:function(e,t,n){var i=[],r=0,s=e.length;if(s<=n)return String.fromCharCode.apply(null,e);for(;r<s;)"array"===t||"nodebuffer"===t?i.push(String.fromCharCode.apply(null,e.slice(r,Math.min(r+n,s)))):i.push(String.fromCharCode.apply(null,e.subarray(r,Math.min(r+n,s)))),r+=n;return i.join("")},stringifyByChar:function(e){for(var t="",n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return t},applyCanBeUsed:{uint8array:function(){try{return a.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return a.nodebuffer&&1===String.fromCharCode.apply(null,n.allocBuffer(1)).length}catch(e){return!1}}()}};function s(e){var t=65536,n=o.getTypeOf(e),i=!0;if("uint8array"===n?i=r.applyCanBeUsed.uint8array:"nodebuffer"===n&&(i=r.applyCanBeUsed.nodebuffer),i)for(;1<t;)try{return r.stringifyByChunk(e,n,t)}catch(e){t=Math.floor(t/2)}return r.stringifyByChar(e)}function h(e,t){for(var n=0;n<e.length;n++)t[n]=e[n];return t}o.applyFromCharCode=s;var d={};d.string={string:i,array:function(e){return c(e,new Array(e.length))},arraybuffer:function(e){return d.string.uint8array(e).buffer},uint8array:function(e){return c(e,new Uint8Array(e.length))},nodebuffer:function(e){return c(e,n.allocBuffer(e.length))}},d.array={string:s,array:i,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return n.newBufferFrom(e)}},d.arraybuffer={string:function(e){return s(new Uint8Array(e))},array:function(e){return h(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:i,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return n.newBufferFrom(new Uint8Array(e))}},d.uint8array={string:s,array:function(e){return h(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:i,nodebuffer:function(e){return n.newBufferFrom(e)}},d.nodebuffer={string:s,array:function(e){return h(e,new Array(e.length))},arraybuffer:function(e){return d.nodebuffer.uint8array(e).buffer},uint8array:function(e){return h(e,new Uint8Array(e.length))},nodebuffer:i},o.transformTo=function(e,t){if(t=t||"",!e)return t;o.checkSupport(e);var n=o.getTypeOf(t);return d[n][e](t)},o.resolve=function(e){for(var t=e.split("/"),n=[],i=0;i<t.length;i++){var r=t[i];"."===r||""===r&&0!==i&&i!==t.length-1||(".."===r?n.pop():n.push(r))}return n.join("/")},o.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":a.nodebuffer&&n.isBuffer(e)?"nodebuffer":a.uint8array&&e instanceof Uint8Array?"uint8array":a.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},o.checkSupport=function(e){if(!a[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},o.MAX_VALUE_16BITS=65535,o.MAX_VALUE_32BITS=-1,o.pretty=function(e){for(var t,n="",i=0;i<(e||"").length;i++)n+="\\x"+((t=e.charCodeAt(i))<16?"0":"")+t.toString(16).toUpperCase();return n},o.delay=function(e,t,n){setImmediate(function(){e.apply(n||null,t||[])})},o.inherits=function(e,t){function n(){}n.prototype=t.prototype,e.prototype=new n},o.extend=function(){for(var e,t={},n=0;n<arguments.length;n++)for(e in arguments[n])arguments[n].hasOwnProperty(e)&&void 0===t[e]&&(t[e]=arguments[n][e]);return t},o.prepareContent=function(n,e,i,r,s){return u.Promise.resolve(e).then(function(i){return a.blob&&(i instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(i)))&&"undefined"!=typeof FileReader?new u.Promise(function(t,n){var e=new FileReader;e.onload=function(e){t(e.target.result)},e.onerror=function(e){n(e.target.error)},e.readAsArrayBuffer(i)}):i}).then(function(e){var t=o.getTypeOf(e);return t?("arraybuffer"===t?e=o.transformTo("uint8array",e):"string"===t&&(s?e=l.decode(e):i&&!0!==r&&(e=c(t=e,new(a.uint8array?Uint8Array:Array)(t.length)))),e):u.Promise.reject(new Error("Can't read the data of '"+n+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,n){"use strict";var i=e("./reader/readerFor"),r=e("./utils"),s=e("./signature"),o=e("./zipEntry"),a=(e("./utf8"),e("./support"));function l(e){this.files=[],this.loadOptions=e}l.prototype={checkSignature:function(e){var t;if(!this.reader.readAndCheckSignature(e))throw this.reader.index-=4,t=this.reader.readString(4),new Error("Corrupted zip or bug: unexpected signature ("+r.pretty(t)+", expected "+r.pretty(e)+")")},isSignature:function(e,t){var n=this.reader.index,e=(this.reader.setIndex(e),this.reader.readString(4)===t);return this.reader.setIndex(n),e},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=a.uint8array?"uint8array":"array",t=r.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(t)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,n,i=this.zip64EndOfCentralSize-44;0<i;)e=this.reader.readInt(2),t=this.reader.readInt(4),n=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:n}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){for(var e,t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new o({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===r.MAX_VALUE_16BITS||this.diskWithCentralDirStart===r.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===r.MAX_VALUE_16BITS||this.centralDirRecords===r.MAX_VALUE_16BITS||this.centralDirSize===r.MAX_VALUE_32BITS||this.centralDirOffset===r.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}e=this.centralDirOffset+this.centralDirSize,e=t-(e=this.zip64?e+20+(12+this.zip64EndOfCentralSize):e);if(0<e)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=e);else if(e<0)throw new Error("Corrupted zip: missing "+Math.abs(e)+" bytes.")},prepareReader:function(e){this.reader=i(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=l},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(e,t,n){"use strict";var i=e("./reader/readerFor"),r=e("./utils"),s=e("./compressedObject"),o=e("./crc32"),a=e("./utf8"),l=e("./compressions"),u=e("./support");function c(e,t){this.options=e,this.loadOptions=t}c.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t;if(e.skip(22),this.fileNameLength=e.readInt(2),t=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(t),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in l)if(l.hasOwnProperty(t)&&l[t].magic===e)return l[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+r.pretty(this.compressionMethod)+" unknown (inner file : "+r.transformTo("string",this.fileName)+")");this.decompressed=new s(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(e){var t;this.extraFields[1]&&(t=i(this.extraFields[1].value),this.uncompressedSize===r.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===r.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===r.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===r.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4)))},readExtraFields:function(e){var t,n,i,r=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<r;)t=e.readInt(2),n=e.readInt(2),i=e.readData(n),this.extraFields[t]={id:t,length:n,value:i};e.setIndex(r)},handleUTF8:function(){var e,t=u.uint8array?"uint8array":"array";this.useUTF8()?(this.fileNameStr=a.utf8decode(this.fileName),this.fileCommentStr=a.utf8decode(this.fileComment)):(null!==(e=this.findExtraFieldUnicodePath())?this.fileNameStr=e:(e=r.transformTo(t,this.fileName),this.fileNameStr=this.loadOptions.decodeFileName(e)),null!==(e=this.findExtraFieldUnicodeComment())?this.fileCommentStr=e:(e=r.transformTo(t,this.fileComment),this.fileCommentStr=this.loadOptions.decodeFileName(e)))},findExtraFieldUnicodePath:function(){var e,t=this.extraFields[28789];return!t||1!==(e=i(t.value)).readInt(1)||o(this.fileName)!==e.readInt(4)?null:a.utf8decode(e.readData(t.length-5))},findExtraFieldUnicodeComment:function(){var e,t=this.extraFields[25461];return!t||1!==(e=i(t.value)).readInt(1)||o(this.fileComment)!==e.readInt(4)?null:a.utf8decode(e.readData(t.length-5))}},t.exports=c},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,n){"use strict";function i(e,t,n){this.name=e,this.dir=n.dir,this.date=n.date,this.comment=n.comment,this.unixPermissions=n.unixPermissions,this.dosPermissions=n.dosPermissions,this._data=t,this._dataBinary=n.binary,this.options={compression:n.compression,compressionOptions:n.compressionOptions}}var s=e("./stream/StreamHelper"),r=e("./stream/DataWorker"),o=e("./utf8"),a=e("./compressedObject"),l=e("./stream/GenericWorker");i.prototype={internalStream:function(e){var t=null,n="string";try{if(!e)throw new Error("No output type specified.");var i="string"===(n=e.toLowerCase())||"text"===n,r=("binarystring"!==n&&"text"!==n||(n="string"),t=this._decompressWorker(),!this._dataBinary);r&&!i&&(t=t.pipe(new o.Utf8EncodeWorker)),!r&&i&&(t=t.pipe(new o.Utf8DecodeWorker))}catch(e){(t=new l("error")).error(e)}return new s(t,n,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof a&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var n=this._decompressWorker();return this._dataBinary||(n=n.pipe(new o.Utf8EncodeWorker)),a.createWorkerFrom(n,e,t)},_decompressWorker:function(){return this._data instanceof a?this._data.getContentWorker():this._data instanceof l?this._data:new r(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],c=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},h=0;h<u.length;h++)i.prototype[u[h]]=c;t.exports=i},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,u,t){!function(t){"use strict";var i,e,n,r,s=t.MutationObserver||t.WebKitMutationObserver,o=s?(e=0,s=new s(l),n=t.document.createTextNode(""),s.observe(n,{characterData:!0}),function(){n.data=e=++e%2}):t.setImmediate||void 0===t.MessageChannel?"document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){l(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(l,0)}:((r=new t.MessageChannel).port1.onmessage=l,function(){r.port2.postMessage(0)}),a=[];function l(){var e,t;i=!0;for(var n=a.length;n;){for(t=a,a=[],e=-1;++e<n;)t[e]();n=a.length}i=!1}u.exports=function(e){1!==a.push(e)||i||o()}}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,n){"use strict";var r=e("immediate");function l(){}var u={},s=["REJECTED"],o=["FULFILLED"],i=["PENDING"];function a(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=i,this.queue=[],this.outcome=void 0,e!==l&&f(this,e)}function c(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function h(t,n,i){r(function(){var e;try{e=n(i)}catch(e){return u.reject(t,e)}e===t?u.reject(t,new TypeError("Cannot resolve promise with itself")):u.resolve(t,e)})}function d(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function f(t,e){var n=!1;function i(e){n||(n=!0,u.reject(t,e))}function r(e){n||(n=!0,u.resolve(t,e))}var s=p(function(){e(r,i)});"error"===s.status&&i(s.value)}function p(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}(t.exports=a).prototype.finally=function(t){if("function"!=typeof t)return this;var n=this.constructor;return this.then(function(e){return n.resolve(t()).then(function(){return e})},function(e){return n.resolve(t()).then(function(){throw e})})},a.prototype.catch=function(e){return this.then(null,e)},a.prototype.then=function(e,t){if("function"!=typeof e&&this.state===o||"function"!=typeof t&&this.state===s)return this;var n=new this.constructor(l);return this.state!==i?h(n,this.state===o?e:t,this.outcome):this.queue.push(new c(n,e,t)),n},c.prototype.callFulfilled=function(e){u.resolve(this.promise,e)},c.prototype.otherCallFulfilled=function(e){h(this.promise,this.onFulfilled,e)},c.prototype.callRejected=function(e){u.reject(this.promise,e)},c.prototype.otherCallRejected=function(e){h(this.promise,this.onRejected,e)},u.resolve=function(e,t){var n=p(d,t);if("error"===n.status)return u.reject(e,n.value);n=n.value;if(n)f(e,n);else{e.state=o,e.outcome=t;for(var i=-1,r=e.queue.length;++i<r;)e.queue[i].callFulfilled(t)}return e},u.reject=function(e,t){e.state=s,e.outcome=t;for(var n=-1,i=e.queue.length;++n<i;)e.queue[n].callRejected(t);return e},a.resolve=function(e){return e instanceof this?e:u.resolve(new this(l),e)},a.reject=function(e){var t=new this(l);return u.reject(t,e)},a.all=function(e){var n=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var i=e.length,r=!1;if(!i)return this.resolve([]);for(var s=new Array(i),o=0,t=-1,a=new this(l);++t<i;)!function(e,t){n.resolve(e).then(function(e){s[t]=e,++o!==i||r||(r=!0,u.resolve(a,s))},function(e){r||(r=!0,u.reject(a,e))})}(e[t],t);return a},a.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,n=!1;if(!t)return this.resolve([]);for(var i,r=-1,s=new this(l);++r<t;)i=e[r],this.resolve(i).then(function(e){n||(n=!0,u.resolve(s,e))},function(e){n||(n=!0,u.reject(s,e))});return s}},{immediate:36}],38:[function(e,t,n){"use strict";var i={};(0,e("./lib/utils/common").assign)(i,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=i},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,n){"use strict";var o=e("./zlib/deflate"),a=e("./utils/common"),l=e("./utils/strings"),i=e("./zlib/messages"),r=e("./zlib/zstream"),u=Object.prototype.toString;function s(e){if(!(this instanceof s))return new s(e);this.options=a.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},e||{});var e=this.options,t=(e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new r,this.strm.avail_out=0,o.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy));if(0!==t)throw new Error(i[t]);if(e.header&&o.deflateSetHeader(this.strm,e.header),e.dictionary){e="string"==typeof e.dictionary?l.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary;if(0!==(t=o.deflateSetDictionary(this.strm,e)))throw new Error(i[t]);this._dict_set=!0}}function c(e,t){t=new s(t);if(t.push(e,!0),t.err)throw t.msg||i[t.err];return t.result}s.prototype.push=function(e,t){var n,i,r=this.strm,s=this.options.chunkSize;if(this.ended)return!1;i=t===~~t?t:!0===t?4:0,"string"==typeof e?r.input=l.string2buf(e):"[object ArrayBuffer]"===u.call(e)?r.input=new Uint8Array(e):r.input=e,r.next_in=0,r.avail_in=r.input.length;do{if(0===r.avail_out&&(r.output=new a.Buf8(s),r.next_out=0,r.avail_out=s),1!==(n=o.deflate(r,i))&&0!==n)return this.onEnd(n),!(this.ended=!0)}while(0!==r.avail_out&&(0!==r.avail_in||4!==i&&2!==i)||("string"===this.options.to?this.onData(l.buf2binstring(a.shrinkBuf(r.output,r.next_out))):this.onData(a.shrinkBuf(r.output,r.next_out))),(0<r.avail_in||0===r.avail_out)&&1!==n);return 4===i?(n=o.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,0===n):2!==i||(this.onEnd(0),!(r.avail_out=0))},s.prototype.onData=function(e){this.chunks.push(e)},s.prototype.onEnd=function(e){0===e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=a.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Deflate=s,n.deflate=c,n.deflateRaw=function(e,t){return(t=t||{}).raw=!0,c(e,t)},n.gzip=function(e,t){return(t=t||{}).gzip=!0,c(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,n){"use strict";var h=e("./zlib/inflate"),d=e("./utils/common"),f=e("./utils/strings"),p=e("./zlib/constants"),i=e("./zlib/messages"),r=e("./zlib/zstream"),s=e("./zlib/gzheader"),g=Object.prototype.toString;function o(e){if(!(this instanceof o))return new o(e);this.options=d.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options,e=(t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new r,this.strm.avail_out=0,h.inflateInit2(this.strm,t.windowBits));if(e!==p.Z_OK)throw new Error(i[e]);this.header=new s,h.inflateGetHeader(this.strm,this.header)}function a(e,t){t=new o(t);if(t.push(e,!0),t.err)throw t.msg||i[t.err];return t.result}o.prototype.push=function(e,t){var n,i,r,s,o,a=this.strm,l=this.options.chunkSize,u=this.options.dictionary,c=!1;if(this.ended)return!1;i=t===~~t?t:!0===t?p.Z_FINISH:p.Z_NO_FLUSH,"string"==typeof e?a.input=f.binstring2buf(e):"[object ArrayBuffer]"===g.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new d.Buf8(l),a.next_out=0,a.avail_out=l),(n=h.inflate(a,p.Z_NO_FLUSH))===p.Z_NEED_DICT&&u&&(o="string"==typeof u?f.string2buf(u):"[object ArrayBuffer]"===g.call(u)?new Uint8Array(u):u,n=h.inflateSetDictionary(this.strm,o)),n===p.Z_BUF_ERROR&&!0===c&&(n=p.Z_OK,c=!1),n!==p.Z_STREAM_END&&n!==p.Z_OK)return this.onEnd(n),!(this.ended=!0)}while(!a.next_out||0!==a.avail_out&&n!==p.Z_STREAM_END&&(0!==a.avail_in||i!==p.Z_FINISH&&i!==p.Z_SYNC_FLUSH)||("string"===this.options.to?(o=f.utf8border(a.output,a.next_out),r=a.next_out-o,s=f.buf2string(a.output,o),a.next_out=r,a.avail_out=l-r,r&&d.arraySet(a.output,a.output,o,r,0),this.onData(s)):this.onData(d.shrinkBuf(a.output,a.next_out))),0===a.avail_in&&0===a.avail_out&&(c=!0),(0<a.avail_in||0===a.avail_out)&&n!==p.Z_STREAM_END);return(i=n===p.Z_STREAM_END?p.Z_FINISH:i)===p.Z_FINISH?(n=h.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===p.Z_OK):i!==p.Z_SYNC_FLUSH||(this.onEnd(p.Z_OK),!(a.avail_out=0))},o.prototype.onData=function(e){this.chunks.push(e)},o.prototype.onEnd=function(e){e===p.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=d.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Inflate=o,n.inflate=a,n.inflateRaw=function(e,t){return(t=t||{}).raw=!0,a(e,t)},n.ungzip=a},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,n){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array,r=(n.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var i in n)n.hasOwnProperty(i)&&(e[i]=n[i])}}return e},n.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)},{arraySet:function(e,t,n,i,r){if(t.subarray&&e.subarray)e.set(t.subarray(n,n+i),r);else for(var s=0;s<i;s++)e[r+s]=t[n+s]},flattenChunks:function(e){for(var t,n,i,r,s=t=0,o=e.length;s<o;s++)t+=e[s].length;for(r=new Uint8Array(t),s=n=0,o=e.length;s<o;s++)i=e[s],r.set(i,n),n+=i.length;return r}}),s={arraySet:function(e,t,n,i,r){for(var s=0;s<i;s++)e[r+s]=t[n+s]},flattenChunks:function(e){return[].concat.apply([],e)}};n.setTyped=function(e){e?(n.Buf8=Uint8Array,n.Buf16=Uint16Array,n.Buf32=Int32Array,n.assign(n,r)):(n.Buf8=Array,n.Buf16=Array,n.Buf32=Array,n.assign(n,s))},n.setTyped(i)},{}],42:[function(e,t,n){"use strict";var l=e("./common"),r=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){r=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var u=new l.Buf8(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function c(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&r))return String.fromCharCode.apply(null,l.shrinkBuf(e,t));for(var n="",i=0;i<t;i++)n+=String.fromCharCode(e[i]);return n}u[254]=u[254]=1,n.string2buf=function(e){for(var t,n,i,r,s=e.length,o=0,a=0;a<s;a++)55296==(64512&(n=e.charCodeAt(a)))&&a+1<s&&56320==(64512&(i=e.charCodeAt(a+1)))&&(n=65536+(n-55296<<10)+(i-56320),a++),o+=n<128?1:n<2048?2:n<65536?3:4;for(t=new l.Buf8(o),a=r=0;r<o;a++)55296==(64512&(n=e.charCodeAt(a)))&&a+1<s&&56320==(64512&(i=e.charCodeAt(a+1)))&&(n=65536+(n-55296<<10)+(i-56320),a++),n<128?t[r++]=n:(n<2048?t[r++]=192|n>>>6:(n<65536?t[r++]=224|n>>>12:(t[r++]=240|n>>>18,t[r++]=128|n>>>12&63),t[r++]=128|n>>>6&63),t[r++]=128|63&n);return t},n.buf2binstring=function(e){return c(e,e.length)},n.binstring2buf=function(e){for(var t=new l.Buf8(e.length),n=0,i=t.length;n<i;n++)t[n]=e.charCodeAt(n);return t},n.buf2string=function(e,t){for(var n,i,r,s=t||e.length,o=new Array(2*s),a=n=0;a<s;)if((i=e[a++])<128)o[n++]=i;else if(4<(r=u[i]))o[n++]=65533,a+=r-1;else{for(i&=2===r?31:3===r?15:7;1<r&&a<s;)i=i<<6|63&e[a++],r--;1<r?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i)}return c(o,n)},n.utf8border=function(e,t){for(var n=(t=(t=t||e.length)>e.length?e.length:t)-1;0<=n&&128==(192&e[n]);)n--;return!(n<0)&&0!==n&&n+u[e[n]]>t?n:t}},{"./common":41}],43:[function(e,t,n){"use strict";t.exports=function(e,t,n,i){for(var r=65535&e|0,s=e>>>16&65535|0,o=0;0!==n;){for(n-=o=2e3<n?2e3:n;s=s+(r=r+t[i++]|0)|0,--o;);r%=65521,s%=65521}return r|s<<16|0}},{}],44:[function(e,t,n){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,n){"use strict";var a=function(){for(var e=[],t=0;t<256;t++){for(var n=t,i=0;i<8;i++)n=1&n?3988292384^n>>>1:n>>>1;e[t]=n}return e}();t.exports=function(e,t,n,i){var r=a,s=i+n;e^=-1;for(var o=i;o<s;o++)e=e>>>8^r[255&(e^t[o])];return-1^e}},{}],46:[function(e,M,t){"use strict";var a,h=e("../utils/common"),l=e("./trees"),d=e("./adler32"),f=e("./crc32"),n=e("./messages"),u=0,c=0,p=-2,i=2,g=8,r=286,s=30,o=19,P=2*r+1,z=15,m=3,v=258,y=v+m+1,_=42,b=113;function w(e,t){return e.msg=n[t],t}function x(e){return(e<<1)-(4<e?9:0)}function C(e){for(var t=e.length;0<=--t;)e[t]=0}function k(e){var t=e.state,n=t.pending;0!==(n=n>e.avail_out?e.avail_out:n)&&(h.arraySet(e.output,t.pending_buf,t.pending_out,n,e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))}function E(e,t){l._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,k(e.strm)}function D(e,t){e.pending_buf[e.pending++]=t}function T(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function S(e,t){var n,i,r=e.max_chain_length,s=e.strstart,o=e.prev_length,a=e.nice_match,l=e.strstart>e.w_size-y?e.strstart-(e.w_size-y):0,u=e.window,c=e.w_mask,h=e.prev,d=e.strstart+v,f=u[s+o-1],p=u[s+o];e.prev_length>=e.good_match&&(r>>=2),a>e.lookahead&&(a=e.lookahead);do{if(u[(n=t)+o]===p&&u[n+o-1]===f&&u[n]===u[s]&&u[++n]===u[s+1]){for(s+=2,n++;u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&u[++s]===u[++n]&&s<d;);if(i=v-(d-s),s=d-v,o<i){if(e.match_start=t,a<=(o=i))break;f=u[s+o-1],p=u[s+o]}}}while((t=h[t&c])>l&&0!=--r);return o<=e.lookahead?o:e.lookahead}function A(e){var t,n,i,r,s,o,a,l,u,c=e.w_size;do{if(l=e.window_size-e.lookahead-e.strstart,e.strstart>=c+(c-y)){for(h.arraySet(e.window,e.window,c,c,0),e.match_start-=c,e.strstart-=c,e.block_start-=c,t=n=e.hash_size;i=e.head[--t],e.head[t]=c<=i?i-c:0,--n;);for(t=n=c;i=e.prev[--t],e.prev[t]=c<=i?i-c:0,--n;);l+=c}if(0===e.strm.avail_in)break;if(s=e.strm,o=e.window,a=e.strstart+e.lookahead,u=void 0,n=0===(u=(l=l)<(u=s.avail_in)?l:u)?0:(s.avail_in-=u,h.arraySet(o,s.input,s.next_in,u,a),1===s.state.wrap?s.adler=d(s.adler,o,u,a):2===s.state.wrap&&(s.adler=f(s.adler,o,u,a)),s.next_in+=u,s.total_in+=u,u),e.lookahead+=n,e.lookahead+e.insert>=m)for(r=e.strstart-e.insert,e.ins_h=e.window[r],e.ins_h=(e.ins_h<<e.hash_shift^e.window[r+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[r+m-1])&e.hash_mask,e.prev[r&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=r,r++,e.insert--,!(e.lookahead+e.insert<m)););}while(e.lookahead<y&&0!==e.strm.avail_in)}function O(e,t){for(var n,i;;){if(e.lookahead<y){if(A(e),e.lookahead<y&&t===u)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=m&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+m-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-y&&(e.match_length=S(e,n)),e.match_length>=m)if(i=l._tr_tally(e,e.strstart-e.match_start,e.match_length-m),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=m){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+m-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else i=l._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(i&&(E(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<m-1?e.strstart:m-1,4===t?(E(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(E(e,!1),0===e.strm.avail_out)?1:2}function I(e,t){for(var n,i,r;;){if(e.lookahead<y){if(A(e),e.lookahead<y&&t===u)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=m&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+m-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=m-1,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-y&&(e.match_length=S(e,n),e.match_length<=5&&(1===e.strategy||e.match_length===m&&4096<e.strstart-e.match_start)&&(e.match_length=m-1)),e.prev_length>=m&&e.match_length<=e.prev_length){for(r=e.strstart+e.lookahead-m,i=l._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-m),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=r&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+m-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=m-1,e.strstart++,i&&(E(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((i=l._tr_tally(e,0,e.window[e.strstart-1]))&&E(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(i=l._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<m-1?e.strstart:m-1,4===t?(E(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(E(e,!1),0===e.strm.avail_out)?1:2}function N(e,t,n,i,r){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=i,this.func=r}function F(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=g,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new h.Buf16(2*P),this.dyn_dtree=new h.Buf16(2*(2*s+1)),this.bl_tree=new h.Buf16(2*(2*o+1)),C(this.dyn_ltree),C(this.dyn_dtree),C(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new h.Buf16(z+1),this.heap=new h.Buf16(2*r+1),C(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new h.Buf16(2*r+1),C(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function L(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?_:b,e.adler=2===t.wrap?0:1,t.last_flush=u,l._tr_init(t),c):w(e,p)}function j(e){var t=L(e);return t===c&&((e=e.state).window_size=2*e.w_size,C(e.head),e.max_lazy_match=a[e.level].max_lazy,e.good_match=a[e.level].good_length,e.nice_match=a[e.level].nice_length,e.max_chain_length=a[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=m-1,e.match_available=0,e.ins_h=0),t}function R(e,t,n,i,r,s){if(!e)return p;var o=1;if(-1===t&&(t=6),i<0?(o=0,i=-i):15<i&&(o=2,i-=16),r<1||9<r||n!==g||i<8||15<i||t<0||9<t||s<0||4<s)return w(e,p);8===i&&(i=9);var a=new F;return(e.state=a).strm=e,a.wrap=o,a.gzhead=null,a.w_bits=i,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=r+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+m-1)/m),a.window=new h.Buf8(2*a.w_size),a.head=new h.Buf16(a.hash_size),a.prev=new h.Buf16(a.w_size),a.lit_bufsize=1<<r+6,a.pending_buf_size=4*a.lit_bufsize,a.pending_buf=new h.Buf8(a.pending_buf_size),a.d_buf=+a.lit_bufsize,a.l_buf=3*a.lit_bufsize,a.level=t,a.strategy=s,a.method=n,j(e)}a=[new N(0,0,0,0,function(e,t){var n=65535;for(n>e.pending_buf_size-5&&(n=e.pending_buf_size-5);;){if(e.lookahead<=1){if(A(e),0===e.lookahead&&t===u)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var i=e.block_start+n;if((0===e.strstart||e.strstart>=i)&&(e.lookahead=e.strstart-i,e.strstart=i,E(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-y&&(E(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(E(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(E(e,!1),e.strm.avail_out),1)}),new N(4,4,8,4,O),new N(4,5,16,8,O),new N(4,6,32,32,O),new N(4,4,16,16,I),new N(8,16,32,32,I),new N(8,16,128,128,I),new N(8,32,128,256,I),new N(32,128,258,1024,I),new N(32,258,258,4096,I)],t.deflateInit=function(e,t){return R(e,t,g,15,8,0)},t.deflateInit2=R,t.deflateReset=j,t.deflateResetKeep=L,t.deflateSetHeader=function(e,t){return!e||!e.state||2!==e.state.wrap?p:(e.state.gzhead=t,c)},t.deflate=function(e,t){var n,i,r,s;if(!e||!e.state||5<t||t<0)return e?w(e,p):p;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||666===i.status&&4!==t)return w(e,0===e.avail_out?-5:p);if(i.strm=e,n=i.last_flush,i.last_flush=t,i.status===_&&(2===i.wrap?(e.adler=0,D(i,31),D(i,139),D(i,8),i.gzhead?(D(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),D(i,255&i.gzhead.time),D(i,i.gzhead.time>>8&255),D(i,i.gzhead.time>>16&255),D(i,i.gzhead.time>>24&255),D(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),D(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(D(i,255&i.gzhead.extra.length),D(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=f(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(D(i,0),D(i,0),D(i,0),D(i,0),D(i,0),D(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),D(i,3),i.status=b)):(o=g+(i.w_bits-8<<4)<<8,o|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(o|=32),o+=31-o%31,i.status=b,T(i,o),0!==i.strstart&&(T(i,e.adler>>>16),T(i,65535&e.adler)),e.adler=1)),69===i.status)if(i.gzhead.extra){for(r=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>r&&(e.adler=f(e.adler,i.pending_buf,i.pending-r,r)),k(e),r=i.pending,i.pending!==i.pending_buf_size));)D(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>r&&(e.adler=f(e.adler,i.pending_buf,i.pending-r,r)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){r=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>r&&(e.adler=f(e.adler,i.pending_buf,i.pending-r,r)),k(e),r=i.pending,i.pending===i.pending_buf_size)){s=1;break}}while(s=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,D(i,s),0!==s);i.gzhead.hcrc&&i.pending>r&&(e.adler=f(e.adler,i.pending_buf,i.pending-r,r)),0===s&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){r=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>r&&(e.adler=f(e.adler,i.pending_buf,i.pending-r,r)),k(e),r=i.pending,i.pending===i.pending_buf_size)){s=1;break}}while(s=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,D(i,s),0!==s);i.gzhead.hcrc&&i.pending>r&&(e.adler=f(e.adler,i.pending_buf,i.pending-r,r)),0===s&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&k(e),i.pending+2<=i.pending_buf_size&&(D(i,255&e.adler),D(i,e.adler>>8&255),e.adler=0,i.status=b)):i.status=b),0!==i.pending){if(k(e),0===e.avail_out)return i.last_flush=-1,c}else if(0===e.avail_in&&x(t)<=x(n)&&4!==t)return w(e,-5);if(666===i.status&&0!==e.avail_in)return w(e,-5);if(0!==e.avail_in||0!==i.lookahead||t!==u&&666!==i.status){var o=2===i.strategy?function(e,t){for(var n;;){if(0===e.lookahead&&(A(e),0===e.lookahead)){if(t===u)return 1;break}if(e.match_length=0,n=l._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(E(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(E(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(E(e,!1),0===e.strm.avail_out)?1:2}(i,t):3===i.strategy?function(e,t){for(var n,i,r,s,o=e.window;;){if(e.lookahead<=v){if(A(e),e.lookahead<=v&&t===u)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=m&&0<e.strstart&&(i=o[r=e.strstart-1])===o[++r]&&i===o[++r]&&i===o[++r]){for(s=e.strstart+v;i===o[++r]&&i===o[++r]&&i===o[++r]&&i===o[++r]&&i===o[++r]&&i===o[++r]&&i===o[++r]&&i===o[++r]&&r<s;);e.match_length=v-(s-r),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=m?(n=l._tr_tally(e,1,e.match_length-m),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=l._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(E(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(E(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(E(e,!1),0===e.strm.avail_out)?1:2}(i,t):a[i.level].func(i,t);if(3!==o&&4!==o||(i.status=666),1===o||3===o)return 0===e.avail_out&&(i.last_flush=-1),c;if(2===o&&(1===t?l._tr_align(i):5!==t&&(l._tr_stored_block(i,0,0,!1),3===t&&(C(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),k(e),0===e.avail_out))return i.last_flush=-1,c}return 4!==t?c:i.wrap<=0?1:(2===i.wrap?(D(i,255&e.adler),D(i,e.adler>>8&255),D(i,e.adler>>16&255),D(i,e.adler>>24&255),D(i,255&e.total_in),D(i,e.total_in>>8&255),D(i,e.total_in>>16&255),D(i,e.total_in>>24&255)):(T(i,e.adler>>>16),T(i,65535&e.adler)),k(e),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?c:1)},t.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==_&&69!==t&&73!==t&&91!==t&&103!==t&&t!==b&&666!==t?w(e,p):(e.state=null,t===b?w(e,-3):c):p},t.deflateSetDictionary=function(e,t){var n,i,r,s,o,a,l,u=t.length;if(!e||!e.state)return p;if(2===(s=(n=e.state).wrap)||1===s&&n.status!==_||n.lookahead)return p;for(1===s&&(e.adler=d(e.adler,t,u,0)),n.wrap=0,u>=n.w_size&&(0===s&&(C(n.head),n.strstart=0,n.block_start=0,n.insert=0),l=new h.Buf8(n.w_size),h.arraySet(l,t,u-n.w_size,n.w_size,0),t=l,u=n.w_size),l=e.avail_in,o=e.next_in,a=e.input,e.avail_in=u,e.next_in=0,e.input=t,A(n);n.lookahead>=m;){for(i=n.strstart,r=n.lookahead-(m-1);n.ins_h=(n.ins_h<<n.hash_shift^n.window[i+m-1])&n.hash_mask,n.prev[i&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=i,i++,--r;);n.strstart=i,n.lookahead=m-1,A(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=m-1,n.match_available=0,e.next_in=o,e.input=a,e.avail_in=l,n.wrap=s,c},t.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,n){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,n){"use strict";t.exports=function(e,t){var n,i,r,s,o,a,l=e.state,u=e.next_in,c=e.input,h=u+(e.avail_in-5),d=e.next_out,f=e.output,p=d-(t-e.avail_out),g=d+(e.avail_out-257),m=l.dmax,v=l.wsize,y=l.whave,_=l.wnext,b=l.window,w=l.hold,x=l.bits,C=l.lencode,k=l.distcode,E=(1<<l.lenbits)-1,D=(1<<l.distbits)-1;e:do{for(x<15&&(w+=c[u++]<<x,x+=8,w+=c[u++]<<x,x+=8),n=C[w&E];;){if(w>>>=i=n>>>24,x-=i,0==(i=n>>>16&255))f[d++]=65535&n;else{if(!(16&i)){if(0==(64&i)){n=C[(65535&n)+(w&(1<<i)-1)];continue}if(32&i){l.mode=12;break e}e.msg="invalid literal/length code",l.mode=30;break e}for(r=65535&n,(i&=15)&&(x<i&&(w+=c[u++]<<x,x+=8),r+=w&(1<<i)-1,w>>>=i,x-=i),x<15&&(w+=c[u++]<<x,x+=8,w+=c[u++]<<x,x+=8),n=k[w&D];;){if(w>>>=i=n>>>24,x-=i,!(16&(i=n>>>16&255))){if(0==(64&i)){n=k[(65535&n)+(w&(1<<i)-1)];continue}e.msg="invalid distance code",l.mode=30;break e}if(s=65535&n,x<(i&=15)&&(w+=c[u++]<<x,(x+=8)<i&&(w+=c[u++]<<x,x+=8)),m<(s+=w&(1<<i)-1)){e.msg="invalid distance too far back",l.mode=30;break e}if(w>>>=i,x-=i,(i=d-p)<s){if(y<(i=s-i)&&l.sane){e.msg="invalid distance too far back",l.mode=30;break e}if(a=b,(o=0)===_){if(o+=v-i,i<r){for(r-=i;f[d++]=b[o++],--i;);o=d-s,a=f}}else if(_<i){if(o+=v+_-i,(i-=_)<r){for(r-=i;f[d++]=b[o++],--i;);if(o=0,_<r){for(r-=i=_;f[d++]=b[o++],--i;);o=d-s,a=f}}}else if(o+=_-i,i<r){for(r-=i;f[d++]=b[o++],--i;);o=d-s,a=f}for(;2<r;)f[d++]=a[o++],f[d++]=a[o++],f[d++]=a[o++],r-=3;r&&(f[d++]=a[o++],1<r&&(f[d++]=a[o++]))}else{for(o=d-s;f[d++]=f[o++],f[d++]=f[o++],f[d++]=f[o++],2<(r-=3););r&&(f[d++]=f[o++],1<r&&(f[d++]=f[o++]))}break}}break}}while(u<h&&d<g);u-=r=x>>3,w&=(1<<(x-=r<<3))-1,e.next_in=u,e.next_out=d,e.avail_in=u<h?h-u+5:5-(u-h),e.avail_out=d<g?g-d+257:257-(d-g),l.hold=w,l.bits=x}},{}],49:[function(e,t,n){"use strict";var I=e("../utils/common"),N=e("./adler32"),L=e("./crc32"),j=e("./inffast"),R=e("./inftrees"),M=0,P=-2,z=1,i=852,r=592;function F(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function o(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=z,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(i),t.distcode=t.distdyn=new I.Buf32(r),t.sane=1,t.back=-1,M):P}function a(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,o(e)):P}function l(e,t){var n,i;return e&&e.state?(i=e.state,t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?P:(null!==i.window&&i.wbits!==t&&(i.window=null),i.wrap=n,i.wbits=t,a(e))):P}function u(e,t){var n;return e?(n=new s,(e.state=n).window=null,(n=l(e,t))!==M&&(e.state=null),n):P}var $,U,B=!0;function H(e,t,n,i){var r,e=e.state;return null===e.window&&(e.wsize=1<<e.wbits,e.wnext=0,e.whave=0,e.window=new I.Buf8(e.wsize)),i>=e.wsize?(I.arraySet(e.window,t,n-e.wsize,e.wsize,0),e.wnext=0,e.whave=e.wsize):(i<(r=e.wsize-e.wnext)&&(r=i),I.arraySet(e.window,t,n-i,r,e.wnext),(i-=r)?(I.arraySet(e.window,t,n-i,i,0),e.wnext=i,e.whave=e.wsize):(e.wnext+=r,e.wnext===e.wsize&&(e.wnext=0),e.whave<e.wsize&&(e.whave+=r))),0}n.inflateReset=a,n.inflateReset2=l,n.inflateResetKeep=o,n.inflateInit=function(e){return u(e,15)},n.inflateInit2=u,n.inflate=function(e,t){var n,i,r,s,o,a,l,u,c,h,d,f,p,g,m,v,y,_,b,w,x,C,k,E,D=0,T=new I.Buf8(4),S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return P;12===(n=e.state).mode&&(n.mode=13),o=e.next_out,r=e.output,l=e.avail_out,s=e.next_in,i=e.input,a=e.avail_in,u=n.hold,c=n.bits,h=a,d=l,C=M;e:for(;;)switch(n.mode){case z:if(0===n.wrap){n.mode=13;break}for(;c<16;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}if(2&n.wrap&&35615===u){T[n.check=0]=255&u,T[1]=u>>>8&255,n.check=L(n.check,T,2,0),c=u=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&u)<<8)+(u>>8))%31){e.msg="incorrect header check",n.mode=30;break}if(8!=(15&u)){e.msg="unknown compression method",n.mode=30;break}if(c-=4,x=8+(15&(u>>>=4)),0===n.wbits)n.wbits=x;else if(x>n.wbits){e.msg="invalid window size",n.mode=30;break}n.dmax=1<<x,e.adler=n.check=1,n.mode=512&u?10:12,c=u=0;break;case 2:for(;c<16;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}if(n.flags=u,8!=(255&n.flags)){e.msg="unknown compression method",n.mode=30;break}if(57344&n.flags){e.msg="unknown header flags set",n.mode=30;break}n.head&&(n.head.text=u>>8&1),512&n.flags&&(T[0]=255&u,T[1]=u>>>8&255,n.check=L(n.check,T,2,0)),c=u=0,n.mode=3;case 3:for(;c<32;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}n.head&&(n.head.time=u),512&n.flags&&(T[0]=255&u,T[1]=u>>>8&255,T[2]=u>>>16&255,T[3]=u>>>24&255,n.check=L(n.check,T,4,0)),c=u=0,n.mode=4;case 4:for(;c<16;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}n.head&&(n.head.xflags=255&u,n.head.os=u>>8),512&n.flags&&(T[0]=255&u,T[1]=u>>>8&255,n.check=L(n.check,T,2,0)),c=u=0,n.mode=5;case 5:if(1024&n.flags){for(;c<16;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}n.length=u,n.head&&(n.head.extra_len=u),512&n.flags&&(T[0]=255&u,T[1]=u>>>8&255,n.check=L(n.check,T,2,0)),c=u=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&((f=a<(f=n.length)?a:f)&&(n.head&&(x=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),I.arraySet(n.head.extra,i,s,f,x)),512&n.flags&&(n.check=L(n.check,i,f,s)),a-=f,s+=f,n.length-=f),n.length))break e;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===a)break e;for(f=0;x=i[s+f++],n.head&&x&&n.length<65536&&(n.head.name+=String.fromCharCode(x)),x&&f<a;);if(512&n.flags&&(n.check=L(n.check,i,f,s)),a-=f,s+=f,x)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===a)break e;for(f=0;x=i[s+f++],n.head&&x&&n.length<65536&&(n.head.comment+=String.fromCharCode(x)),x&&f<a;);if(512&n.flags&&(n.check=L(n.check,i,f,s)),a-=f,s+=f,x)break e}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;c<16;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}if(u!==(65535&n.check)){e.msg="header crc mismatch",n.mode=30;break}c=u=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=12;break;case 10:for(;c<32;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}e.adler=n.check=F(u),c=u=0,n.mode=11;case 11:if(0===n.havedict)return e.next_out=o,e.avail_out=l,e.next_in=s,e.avail_in=a,n.hold=u,n.bits=c,2;e.adler=n.check=1,n.mode=12;case 12:if(5===t||6===t)break e;case 13:if(n.last){u>>>=7&c,c-=7&c,n.mode=27;break}for(;c<3;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}switch(n.last=1&u,--c,3&(u>>>=1)){case 0:n.mode=14;break;case 1:A=O=void 0;var A,O=n;if(B){for($=new I.Buf32(512),U=new I.Buf32(32),A=0;A<144;)O.lens[A++]=8;for(;A<256;)O.lens[A++]=9;for(;A<280;)O.lens[A++]=7;for(;A<288;)O.lens[A++]=8;for(R(1,O.lens,0,288,$,0,O.work,{bits:9}),A=0;A<32;)O.lens[A++]=5;R(2,O.lens,0,32,U,0,O.work,{bits:5}),B=!1}if(O.lencode=$,O.lenbits=9,O.distcode=U,O.distbits=5,n.mode=20,6!==t)break;u>>>=2,c-=2;break e;case 2:n.mode=17;break;case 3:e.msg="invalid block type",n.mode=30}u>>>=2,c-=2;break;case 14:for(u>>>=7&c,c-=7&c;c<32;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}if((65535&u)!=(u>>>16^65535)){e.msg="invalid stored block lengths",n.mode=30;break}if(n.length=65535&u,c=u=0,n.mode=15,6===t)break e;case 15:n.mode=16;case 16:if(f=n.length){if(0===(f=l<(f=a<f?a:f)?l:f))break e;I.arraySet(r,i,s,f,o),a-=f,s+=f,l-=f,o+=f,n.length-=f;break}n.mode=12;break;case 17:for(;c<14;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}if(n.nlen=257+(31&u),u>>>=5,c-=5,n.ndist=1+(31&u),u>>>=5,c-=5,n.ncode=4+(15&u),u>>>=4,c-=4,286<n.nlen||30<n.ndist){e.msg="too many length or distance symbols",n.mode=30;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;c<3;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}n.lens[S[n.have++]]=7&u,u>>>=3,c-=3}for(;n.have<19;)n.lens[S[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,k={bits:n.lenbits},C=R(0,n.lens,0,19,n.lencode,0,n.work,k),n.lenbits=k.bits,C){e.msg="invalid code lengths set",n.mode=30;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;v=(D=n.lencode[u&(1<<n.lenbits)-1])>>>16&255,y=65535&D,!((m=D>>>24)<=c);){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}if(y<16)u>>>=m,c-=m,n.lens[n.have++]=y;else{if(16===y){for(E=m+2;c<E;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}if(u>>>=m,c-=m,0===n.have){e.msg="invalid bit length repeat",n.mode=30;break}x=n.lens[n.have-1],f=3+(3&u),u>>>=2,c-=2}else if(17===y){for(E=m+3;c<E;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}x=0,f=3+(7&(u>>>=m)),u>>>=3,c=c-m-3}else{for(E=m+7;c<E;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}x=0,f=11+(127&(u>>>=m)),u>>>=7,c=c-m-7}if(n.have+f>n.nlen+n.ndist){e.msg="invalid bit length repeat",n.mode=30;break}for(;f--;)n.lens[n.have++]=x}}if(30===n.mode)break;if(0===n.lens[256]){e.msg="invalid code -- missing end-of-block",n.mode=30;break}if(n.lenbits=9,k={bits:n.lenbits},C=R(1,n.lens,0,n.nlen,n.lencode,0,n.work,k),n.lenbits=k.bits,C){e.msg="invalid literal/lengths set",n.mode=30;break}if(n.distbits=6,n.distcode=n.distdyn,k={bits:n.distbits},C=R(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,k),n.distbits=k.bits,C){e.msg="invalid distances set",n.mode=30;break}if(n.mode=20,6===t)break e;case 20:n.mode=21;case 21:if(6<=a&&258<=l){e.next_out=o,e.avail_out=l,e.next_in=s,e.avail_in=a,n.hold=u,n.bits=c,j(e,d),o=e.next_out,r=e.output,l=e.avail_out,s=e.next_in,i=e.input,a=e.avail_in,u=n.hold,c=n.bits,12===n.mode&&(n.back=-1);break}for(n.back=0;v=(D=n.lencode[u&(1<<n.lenbits)-1])>>>16&255,y=65535&D,!((m=D>>>24)<=c);){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}if(v&&0==(240&v)){for(_=m,b=v,w=y;v=(D=n.lencode[w+((u&(1<<_+b)-1)>>_)])>>>16&255,y=65535&D,!(_+(m=D>>>24)<=c);){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}u>>>=_,c-=_,n.back+=_}if(u>>>=m,c-=m,n.back+=m,n.length=y,0===v){n.mode=26;break}if(32&v){n.back=-1,n.mode=12;break}if(64&v){e.msg="invalid literal/length code",n.mode=30;break}n.extra=15&v,n.mode=22;case 22:if(n.extra){for(E=n.extra;c<E;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}n.length+=u&(1<<n.extra)-1,u>>>=n.extra,c-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;v=(D=n.distcode[u&(1<<n.distbits)-1])>>>16&255,y=65535&D,!((m=D>>>24)<=c);){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}if(0==(240&v)){for(_=m,b=v,w=y;v=(D=n.distcode[w+((u&(1<<_+b)-1)>>_)])>>>16&255,y=65535&D,!(_+(m=D>>>24)<=c);){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}u>>>=_,c-=_,n.back+=_}if(u>>>=m,c-=m,n.back+=m,64&v){e.msg="invalid distance code",n.mode=30;break}n.offset=y,n.extra=15&v,n.mode=24;case 24:if(n.extra){for(E=n.extra;c<E;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}n.offset+=u&(1<<n.extra)-1,u>>>=n.extra,c-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg="invalid distance too far back",n.mode=30;break}n.mode=25;case 25:if(0===l)break e;if(n.offset>(f=d-l)){if((f=n.offset-f)>n.whave&&n.sane){e.msg="invalid distance too far back",n.mode=30;break}p=f>n.wnext?(f-=n.wnext,n.wsize-f):n.wnext-f,f>n.length&&(f=n.length),g=n.window}else g=r,p=o-n.offset,f=n.length;for(l-=f=l<f?l:f,n.length-=f;r[o++]=g[p++],--f;);0===n.length&&(n.mode=21);break;case 26:if(0===l)break e;r[o++]=n.length,l--,n.mode=21;break;case 27:if(n.wrap){for(;c<32;){if(0===a)break e;a--,u|=i[s++]<<c,c+=8}if(d-=l,e.total_out+=d,n.total+=d,d&&(e.adler=n.check=(n.flags?L:N)(n.check,r,d,o-d)),d=l,(n.flags?u:F(u))!==n.check){e.msg="incorrect data check",n.mode=30;break}c=u=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;c<32;){if(0===a)break e;a--,u+=i[s++]<<c,c+=8}if(u!==(4294967295&n.total)){e.msg="incorrect length check",n.mode=30;break}c=u=0}n.mode=29;case 29:C=1;break e;case 30:C=-3;break e;case 31:return-4;default:return P}return e.next_out=o,e.avail_out=l,e.next_in=s,e.avail_in=a,n.hold=u,n.bits=c,(n.wsize||d!==e.avail_out&&n.mode<30&&(n.mode<27||4!==t))&&H(e,e.output,e.next_out,d-e.avail_out)?(n.mode=31,-4):(h-=e.avail_in,d-=e.avail_out,e.total_in+=h,e.total_out+=d,n.total+=d,n.wrap&&d&&(e.adler=n.check=(n.flags?L:N)(n.check,r,d,e.next_out-d)),e.data_type=n.bits+(n.last?64:0)+(12===n.mode?128:0)+(20===n.mode||15===n.mode?256:0),C=(0==h&&0===d||4===t)&&C===M?-5:C)},n.inflateEnd=function(e){if(!e||!e.state)return P;var t=e.state;return t.window&&(t.window=null),e.state=null,M},n.inflateGetHeader=function(e,t){return!e||!e.state||0==(2&(e=e.state).wrap)?P:((e.head=t).done=!1,M)},n.inflateSetDictionary=function(e,t){var n,i=t.length;return!e||!e.state||0!==(n=e.state).wrap&&11!==n.mode?P:11===n.mode&&N(1,t,i,0)!==n.check?-3:H(e,t,i,i)?(n.mode=31,-4):(n.havedict=1,M)},n.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,n){"use strict";var j=e("../utils/common"),R=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],M=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],P=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],z=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,n,i,r,s,o,a){for(var l,u,c,h,d,f,p,g,m,v=a.bits,y=0,_=0,b=0,w=0,x=0,C=0,k=0,E=0,D=0,T=0,S=null,A=0,O=new j.Buf16(16),I=new j.Buf16(16),N=null,L=0,y=0;y<=15;y++)O[y]=0;for(_=0;_<i;_++)O[t[n+_]]++;for(x=v,w=15;1<=w&&0===O[w];w--);if(w<x&&(x=w),0===w)return r[s++]=20971520,r[s++]=20971520,a.bits=1,0;for(b=1;b<w&&0===O[b];b++);for(x<b&&(x=b),y=E=1;y<=15;y++)if((E=(E<<1)-O[y])<0)return-1;if(0<E&&(0===e||1!==w))return-1;for(I[1]=0,y=1;y<15;y++)I[y+1]=I[y]+O[y];for(_=0;_<i;_++)0!==t[n+_]&&(o[I[t[n+_]]++]=_);if(f=0===e?(S=N=o,19):1===e?(S=R,A-=257,N=M,L-=257,256):(S=P,N=z,-1),y=b,d=s,k=_=T=0,c=-1,h=(D=1<<(C=x))-1,1===e&&852<D||2===e&&592<D)return 1;for(;;){for(m=o[_]<f?(g=0,o[_]):o[_]>f?(g=N[L+o[_]],S[A+o[_]]):(g=96,0),l=1<<(p=y-k),b=u=1<<C;r[d+(T>>k)+(u-=l)]=p<<24|g<<16|m|0,0!==u;);for(l=1<<y-1;T&l;)l>>=1;if(0!==l?T=(T&l-1)+l:T=0,_++,0==--O[y]){if(y===w)break;y=t[n+o[_]]}if(x<y&&(T&h)!==c){for(d+=b,E=1<<(C=y-(k=0===k?x:k));C+k<w&&!((E-=O[C+k])<=0);)C++,E<<=1;if(D+=1<<C,1===e&&852<D||2===e&&592<D)return 1;r[c=T&h]=x<<24|C<<16|d-s|0}}return 0!==T&&(r[d+T]=y-k<<24|64<<16|0),a.bits=x,0}},{"../utils/common":41}],51:[function(e,t,n){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,M,t){"use strict";var r=e("../utils/common");function n(e){for(var t=e.length;0<=--t;)e[t]=0}var i=16,l=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],u=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],c=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],h=new Array(576),d=(n(h),new Array(60)),f=(n(d),new Array(512)),p=(n(f),new Array(256)),g=(n(p),new Array(29));n(g);var m,v,y,_=new Array(30);function b(e,t,n,i,r){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=i,this.max_length=r,this.has_stree=e&&e.length}function w(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function x(e){return e<256?f[e]:f[256+(e>>>7)]}function s(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function C(e,t,n){e.bi_valid>i-n?(e.bi_buf|=t<<e.bi_valid&65535,s(e,e.bi_buf),e.bi_buf=t>>i-e.bi_valid,e.bi_valid+=n-i):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)}function k(e,t,n){C(e,n[2*t],n[2*t+1])}function E(e,t){for(var n=0;n|=1&e,e>>>=1,n<<=1,0<--t;);return n>>>1}function D(e,t,n){for(var i,r=new Array(16),s=0,o=1;o<=15;o++)r[o]=s=s+n[o-1]<<1;for(i=0;i<=t;i++){var a=e[2*i+1];0!==a&&(e[2*i]=E(r[a]++,a))}}function T(e){for(var t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function S(e){8<e.bi_valid?s(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function o(e,t,n,i){var r=2*t,s=2*n;return e[r]<e[s]||e[r]===e[s]&&i[t]<=i[n]}function A(e,t,n){for(var i=e.heap[n],r=n<<1;r<=e.heap_len&&(r<e.heap_len&&o(t,e.heap[r+1],e.heap[r],e.depth)&&r++,!o(t,i,e.heap[r],e.depth));)e.heap[n]=e.heap[r],n=r,r<<=1;e.heap[n]=i}function O(e,t,n){var i,r,s,o,a=0;if(0!==e.last_lit)for(;i=e.pending_buf[e.d_buf+2*a]<<8|e.pending_buf[e.d_buf+2*a+1],r=e.pending_buf[e.l_buf+a],a++,0==i?k(e,r,t):(k(e,(s=p[r])+256+1,t),0!==(o=l[s])&&C(e,r-=g[s],o),k(e,s=x(--i),n),0!==(o=u[s])&&C(e,i-=_[s],o)),a<e.last_lit;);k(e,256,t)}function I(e,t){var n,i,r,s=t.dyn_tree,o=t.stat_desc.static_tree,a=t.stat_desc.has_stree,l=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=573,n=0;n<l;n++)0!==s[2*n]?(e.heap[++e.heap_len]=u=n,e.depth[n]=0):s[2*n+1]=0;for(;e.heap_len<2;)s[2*(r=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[r]=0,e.opt_len--,a&&(e.static_len-=o[2*r+1]);for(t.max_code=u,n=e.heap_len>>1;1<=n;n--)A(e,s,n);for(r=l;n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],A(e,s,1),i=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=i,s[2*r]=s[2*n]+s[2*i],e.depth[r]=(e.depth[n]>=e.depth[i]?e.depth[n]:e.depth[i])+1,s[2*n+1]=s[2*i+1]=r,e.heap[1]=r++,A(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1];for(var c,h,d,f,p,g=e,m=t.dyn_tree,v=t.max_code,y=t.stat_desc.static_tree,_=t.stat_desc.has_stree,b=t.stat_desc.extra_bits,w=t.stat_desc.extra_base,x=t.stat_desc.max_length,C=0,k=0;k<=15;k++)g.bl_count[k]=0;for(m[2*g.heap[g.heap_max]+1]=0,c=g.heap_max+1;c<573;c++)x<(k=m[2*m[2*(h=g.heap[c])+1]+1]+1)&&(k=x,C++),m[2*h+1]=k,v<h||(g.bl_count[k]++,f=0,w<=h&&(f=b[h-w]),p=m[2*h],g.opt_len+=p*(k+f),_&&(g.static_len+=p*(y[2*h+1]+f)));if(0!==C){do{for(k=x-1;0===g.bl_count[k];)k--}while(g.bl_count[k]--,g.bl_count[k+1]+=2,g.bl_count[x]--,0<(C-=2));for(k=x;0!==k;k--)for(h=g.bl_count[k];0!==h;)v<(d=g.heap[--c])||(m[2*d+1]!==k&&(g.opt_len+=(k-m[2*d+1])*m[2*d],m[2*d+1]=k),h--)}D(s,u,e.bl_count)}function N(e,t,n){var i,r,s=-1,o=t[1],a=0,l=7,u=4;for(0===o&&(l=138,u=3),t[2*(n+1)+1]=65535,i=0;i<=n;i++)r=o,o=t[2*(i+1)+1],++a<l&&r===o||(a<u?e.bl_tree[2*r]+=a:0!==r?(r!==s&&e.bl_tree[2*r]++,e.bl_tree[32]++):a<=10?e.bl_tree[34]++:e.bl_tree[36]++,s=r,u=(a=0)===o?(l=138,3):r===o?(l=6,3):(l=7,4))}function L(e,t,n){var i,r,s=-1,o=t[1],a=0,l=7,u=4;for(0===o&&(l=138,u=3),i=0;i<=n;i++)if(r=o,o=t[2*(i+1)+1],!(++a<l&&r===o)){if(a<u)for(;k(e,r,e.bl_tree),0!=--a;);else 0!==r?(r!==s&&(k(e,r,e.bl_tree),a--),k(e,16,e.bl_tree),C(e,a-3,2)):a<=10?(k(e,17,e.bl_tree),C(e,a-3,3)):(k(e,18,e.bl_tree),C(e,a-11,7));s=r,u=(a=0)===o?(l=138,3):r===o?(l=6,3):(l=7,4)}}n(_);var j=!1;function R(e,t,n,i){C(e,0+(i?1:0),3),i=t,t=n,S(n=e),s(n,t),s(n,~t),r.arraySet(n.pending_buf,n.window,i,t,n.pending),n.pending+=t}t._tr_init=function(e){if(!j){for(var t,n,i,r,s=new Array(16),o=i=0;o<28;o++)for(g[o]=i,t=0;t<1<<l[o];t++)p[i++]=o;for(p[i-1]=o,o=r=0;o<16;o++)for(_[o]=r,t=0;t<1<<u[o];t++)f[r++]=o;for(r>>=7;o<30;o++)for(_[o]=r<<7,t=0;t<1<<u[o]-7;t++)f[256+r++]=o;for(n=0;n<=15;n++)s[n]=0;for(t=0;t<=143;)h[2*t+1]=8,t++,s[8]++;for(;t<=255;)h[2*t+1]=9,t++,s[9]++;for(;t<=279;)h[2*t+1]=7,t++,s[7]++;for(;t<=287;)h[2*t+1]=8,t++,s[8]++;for(D(h,287,s),t=0;t<30;t++)d[2*t+1]=5,d[2*t]=E(t,5);m=new b(h,l,257,286,15),v=new b(d,u,0,30,15),y=new b(new Array(0),a,0,19,7),j=!0}e.l_desc=new w(e.dyn_ltree,m),e.d_desc=new w(e.dyn_dtree,v),e.bl_desc=new w(e.bl_tree,y),e.bi_buf=0,e.bi_valid=0,T(e)},t._tr_stored_block=R,t._tr_flush_block=function(e,t,n,i){var r,s,o,a=0;if(0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){for(var t=4093624447,n=0;n<=31;n++,t>>>=1)if(1&t&&0!==e.dyn_ltree[2*n])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(n=32;n<256;n++)if(0!==e.dyn_ltree[2*n])return 1;return 0}(e)),I(e,e.l_desc),I(e,e.d_desc),a=function(e){var t;for(N(e,e.dyn_ltree,e.l_desc.max_code),N(e,e.dyn_dtree,e.d_desc.max_code),I(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*c[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),r=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=r&&(r=s)):r=s=n+5,n+4<=r&&-1!==t)R(e,t,n,i);else if(4===e.strategy||s===r)C(e,2+(i?1:0),3),O(e,h,d);else{C(e,4+(i?1:0),3);var l=e,u=(t=e.l_desc.max_code+1,n=e.d_desc.max_code+1,a+1);for(C(l,t-257,5),C(l,n-1,5),C(l,u-4,4),o=0;o<u;o++)C(l,l.bl_tree[2*c[o]+1],3);L(l,l.dyn_ltree,t-1),L(l,l.dyn_dtree,n-1),O(e,e.dyn_ltree,e.dyn_dtree)}T(e),i&&S(e)},t._tr_tally=function(e,t,n){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&n,e.last_lit++,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(p[n]+256+1)]++,e.dyn_dtree[2*x(t)]++),e.last_lit===e.lit_bufsize-1},t._tr_align=function(e){C(e,2,3),k(e,256,h),16===(e=e).bi_valid?(s(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}},{"../utils/common":41}],53:[function(e,t,n){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,n){!function(e){!function(n,r){"use strict";var i,t,s,o,a,l,u,e,c;function h(e){delete a[e]}function d(e){if(l)setTimeout(d,0,e);else{var t=a[e];if(t){l=!0;try{var n=t.callback,i=t.args;switch(i.length){case 0:n();break;case 1:n(i[0]);break;case 2:n(i[0],i[1]);break;case 3:n(i[0],i[1],i[2]);break;default:n.apply(r,i)}}finally{h(e),l=!1}}}}function f(e){e.source===n&&"string"==typeof e.data&&0===e.data.indexOf(s)&&d(+e.data.slice(s.length))}n.setImmediate||(o=1,l=!(a={}),u=n.document,e=(e=Object.getPrototypeOf&&Object.getPrototypeOf(n))&&e.setTimeout?e:n,c="[object process]"==={}.toString.call(n.process)?function(e){process.nextTick(function(){d(e)})}:function(){var e,t;if(n.postMessage&&!n.importScripts)return e=!0,t=n.onmessage,n.onmessage=function(){e=!1},n.postMessage("","*"),n.onmessage=t,e}()?(s="setImmediate$"+Math.random()+"$",n.addEventListener?n.addEventListener("message",f,!1):n.attachEvent("onmessage",f),function(e){n.postMessage(s+e,"*")}):n.MessageChannel?((t=new MessageChannel).port1.onmessage=function(e){d(e.data)},function(e){t.port2.postMessage(e)}):u&&"onreadystatechange"in u.createElement("script")?(i=u.documentElement,function(e){var t=u.createElement("script");t.onreadystatechange=function(){d(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):function(e){setTimeout(d,0,e)},e.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];return a[o]={callback:e,args:t},c(o),o++},e.clearImmediate=h)}("undefined"==typeof self?void 0===e?this:e:self)}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[10])(10)}),function(e,t){var n,i;"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self,n=e.Cookies,(i=e.Cookies=t()).noConflict=function(){return e.Cookies=n,i})}(this,function(){"use strict";function o(e){for(var t=1;t<arguments.length;t++){var n,i=arguments[t];for(n in i)e[n]=i[n]}return e}return function t(a,s){function n(e,t,n){if("undefined"!=typeof document){"number"==typeof(n=o({},s,n)).expires&&(n.expires=new Date(Date.now()+864e5*n.expires)),n.expires&&(n.expires=n.expires.toUTCString()),e=encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var i,r="";for(i in n)n[i]&&(r+="; "+i,!0!==n[i]&&(r+="="+n[i].split(";")[0]));return document.cookie=e+"="+a.write(t,e)+r}}return Object.create({set:n,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var t=document.cookie?document.cookie.split("; "):[],n={},i=0;i<t.length;i++){var r=t[i].split("="),s=r.slice(1).join("=");try{var o=decodeURIComponent(r[0]);if(n[o]=a.read(s,o),e===o)break}catch(e){}}return e?n[e]:n}},remove:function(e,t){n(e,"",o({},t,{expires:-1}))},withAttributes:function(e){return t(this.converter,o({},this.attributes,e))},withConverter:function(e){return t(o({},this.converter,e),this.attributes)}},{attributes:{value:Object.freeze(s)},converter:{value:Object.freeze(a)}})}({read:function(e){return(e='"'===e[0]?e.slice(1,-1):e).replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"})}),function(s){s.extend(s.easing,{easeIn:function(e,t,n,i,r){return s.easing.easeInQuad(e,t,n,i,r)},easeOut:function(e,t,n,i,r){return s.easing.easeOutQuad(e,t,n,i,r)},easeInOut:function(e,t,n,i,r){return s.easing.easeInOutQuad(e,t,n,i,r)},expoin:function(e,t,n,i,r){return s.easing.easeInExpo(e,t,n,i,r)},expoout:function(e,t,n,i,r){return s.easing.easeOutExpo(e,t,n,i,r)},expoinout:function(e,t,n,i,r){return s.easing.easeInOutExpo(e,t,n,i,r)},bouncein:function(e,t,n,i,r){return s.easing.easeInBounce(e,t,n,i,r)},bounceout:function(e,t,n,i,r){return s.easing.easeOutBounce(e,t,n,i,r)},bounceinout:function(e,t,n,i,r){return s.easing.easeInOutBounce(e,t,n,i,r)},elasin:function(e,t,n,i,r){return s.easing.easeInElastic(e,t,n,i,r)},elasout:function(e,t,n,i,r){return s.easing.easeOutElastic(e,t,n,i,r)},elasinout:function(e,t,n,i,r){return s.easing.easeInOutElastic(e,t,n,i,r)},backin:function(e,t,n,i,r){return s.easing.easeInBack(e,t,n,i,r)},backout:function(e,t,n,i,r){return s.easing.easeOutBack(e,t,n,i,r)},backinout:function(e,t,n,i,r){return s.easing.easeInOutBack(e,t,n,i,r)}})}(jQuery),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&"object"==typeof module.exports?exports=e(require("jquery")):e(jQuery)}(function(t){t.easing.jswing=t.easing.swing;var n=Math.pow,i=Math.sqrt,r=Math.sin,s=Math.cos,o=Math.PI,a=1.70158,l=2.5949095,u=2*o/3,c=2*o/4.5;function h(e){var t=7.5625;return e<1/2.75?t*e*e:e<2/2.75?t*(e-=1.5/2.75)*e+.75:e<2.5/2.75?t*(e-=2.25/2.75)*e+.9375:t*(e-=2.625/2.75)*e+.984375}t.extend(t.easing,{def:"easeOutQuad",swing:function(e){return t.easing[t.easing.def](e)},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return 1-(1-e)*(1-e)},easeInOutQuad:function(e){return e<.5?2*e*e:1-n(-2*e+2,2)/2},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return 1-n(1-e,3)},easeInOutCubic:function(e){return e<.5?4*e*e*e:1-n(-2*e+2,3)/2},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return 1-n(1-e,4)},easeInOutQuart:function(e){return e<.5?8*e*e*e*e:1-n(-2*e+2,4)/2},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return 1-n(1-e,5)},easeInOutQuint:function(e){return e<.5?16*e*e*e*e*e:1-n(-2*e+2,5)/2},easeInSine:function(e){return 1-s(e*o/2)},easeOutSine:function(e){return r(e*o/2)},easeInOutSine:function(e){return-(s(o*e)-1)/2},easeInExpo:function(e){return 0===e?0:n(2,10*e-10)},easeOutExpo:function(e){return 1===e?1:1-n(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:e<.5?n(2,20*e-10)/2:(2-n(2,-20*e+10))/2},easeInCirc:function(e){return 1-i(1-n(e,2))},easeOutCirc:function(e){return i(1-n(e-1,2))},easeInOutCirc:function(e){return e<.5?(1-i(1-n(2*e,2)))/2:(i(1-n(-2*e+2,2))+1)/2},easeInElastic:function(e){return 0===e?0:1===e?1:-n(2,10*e-10)*r((10*e-10.75)*u)},easeOutElastic:function(e){return 0===e?0:1===e?1:n(2,-10*e)*r((10*e-.75)*u)+1},easeInOutElastic:function(e){return 0===e?0:1===e?1:e<.5?-(n(2,20*e-10)*r((20*e-11.125)*c))/2:n(2,-20*e+10)*r((20*e-11.125)*c)/2+1},easeInBack:function(e){return 2.70158*e*e*e-a*e*e},easeOutBack:function(e){return 1+2.70158*n(e-1,3)+a*n(e-1,2)},easeInOutBack:function(e){return e<.5?n(2*e,2)*(7.189819*e-l)/2:(n(2*e-2,2)*((1+l)*(2*e-2)+l)+2)/2},easeInBounce:function(e){return 1-h(1-e)},easeOutBounce:h,easeInOutBounce:function(e){return e<.5?(1-h(1-2*e))/2:(1+h(2*e-1))/2}})}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&"object"==typeof module.exports?exports=e(require("jquery")):e(jQuery)}(function(t){t.easing.jswing=t.easing.swing;var n=Math.pow,i=Math.sqrt,r=Math.sin,s=Math.cos,o=Math.PI,a=1.70158,l=2.5949095,u=2*o/3,c=2*o/4.5;function h(e){var t=7.5625;return e<1/2.75?t*e*e:e<2/2.75?t*(e-=1.5/2.75)*e+.75:e<2.5/2.75?t*(e-=2.25/2.75)*e+.9375:t*(e-=2.625/2.75)*e+.984375}t.extend(t.easing,{def:"easeOutQuad",swing:function(e){return t.easing[t.easing.def](e)},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return 1-(1-e)*(1-e)},easeInOutQuad:function(e){return e<.5?2*e*e:1-n(-2*e+2,2)/2},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return 1-n(1-e,3)},easeInOutCubic:function(e){return e<.5?4*e*e*e:1-n(-2*e+2,3)/2},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return 1-n(1-e,4)},easeInOutQuart:function(e){return e<.5?8*e*e*e*e:1-n(-2*e+2,4)/2},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return 1-n(1-e,5)},easeInOutQuint:function(e){return e<.5?16*e*e*e*e*e:1-n(-2*e+2,5)/2},easeInSine:function(e){return 1-s(e*o/2)},easeOutSine:function(e){return r(e*o/2)},easeInOutSine:function(e){return-(s(o*e)-1)/2},easeInExpo:function(e){return 0===e?0:n(2,10*e-10)},easeOutExpo:function(e){return 1===e?1:1-n(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:e<.5?n(2,20*e-10)/2:(2-n(2,-20*e+10))/2},easeInCirc:function(e){return 1-i(1-n(e,2))},easeOutCirc:function(e){return i(1-n(e-1,2))},easeInOutCirc:function(e){return e<.5?(1-i(1-n(2*e,2)))/2:(i(1-n(-2*e+2,2))+1)/2},easeInElastic:function(e){return 0===e?0:1===e?1:-n(2,10*e-10)*r((10*e-10.75)*u)},easeOutElastic:function(e){return 0===e?0:1===e?1:n(2,-10*e)*r((10*e-.75)*u)+1},easeInOutElastic:function(e){return 0===e?0:1===e?1:e<.5?-(n(2,20*e-10)*r((20*e-11.125)*c))/2:n(2,-20*e+10)*r((20*e-11.125)*c)/2+1},easeInBack:function(e){return 2.70158*e*e*e-a*e*e},easeOutBack:function(e){return 1+2.70158*n(e-1,3)+a*n(e-1,2)},easeInOutBack:function(e){return e<.5?n(2*e,2)*(7.189819*e-l)/2:(n(2*e-2,2)*((1+l)*(2*e-2)+l)+2)/2},easeInBounce:function(e){return 1-h(1-e)},easeOutBounce:h,easeInOutBounce:function(e){return e<.5?(1-h(1-2*e))/2:(1+h(2*e-1))/2}})}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(c){c.extend(c.fn,{validate:function(e){var i;{if(this.length)return(i=c.data(this[0],"validator"))||(this.attr("novalidate","novalidate"),i=new c.validator(e,this[0]),c.data(this[0],"validator",i),i.settings.onsubmit&&(this.on("click.validate",":submit",function(e){i.submitButton=e.currentTarget,c(this).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==c(this).attr("formnovalidate")&&(i.cancelSubmit=!0)}),this.on("submit.validate",function(n){function e(){var e,t;return i.submitButton&&(i.settings.submitHandler||i.formSubmitted)&&(e=c("<input type='hidden'/>").attr("name",i.submitButton.name).val(c(i.submitButton).val()).appendTo(i.currentForm)),!(i.settings.submitHandler&&!i.settings.debug)||(t=i.settings.submitHandler.call(i,i.currentForm,n),e&&e.remove(),void 0!==t&&t)}return i.settings.debug&&n.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,e()):i.form()?i.pendingRequest?!(i.formSubmitted=!0):e():(i.focusInvalid(),!1)})),i);e&&e.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")}},valid:function(){var e,t,n;return c(this[0]).is("form")?e=this.validate().form():(n=[],e=!0,t=c(this[0].form).validate(),this.each(function(){(e=t.element(this)&&e)||(n=n.concat(t.errorList))}),t.errorList=n),e},rules:function(e,t){var n,i,r,s,o,a=this[0],l=void 0!==this.attr("contenteditable")&&"false"!==this.attr("contenteditable");if(null!=a&&(!a.form&&l&&(a.form=this.closest("form")[0],a.name=this.attr("name")),null!=a.form)){if(e)switch(n=c.data(a.form,"validator").settings,i=n.rules,r=c.validator.staticRules(a),e){case"add":c.extend(r,c.validator.normalizeRule(t)),delete r.messages,i[a.name]=r,t.messages&&(n.messages[a.name]=c.extend(n.messages[a.name],t.messages));break;case"remove":return t?(o={},c.each(t.split(/\s/),function(e,t){o[t]=r[t],delete r[t]}),o):(delete i[a.name],r)}return(l=c.validator.normalizeRules(c.extend({},c.validator.classRules(a),c.validator.attributeRules(a),c.validator.dataRules(a),c.validator.staticRules(a)),a)).required&&(s=l.required,delete l.required,l=c.extend({required:s},l)),l.remote&&(s=l.remote,delete l.remote,l=c.extend(l,{remote:s})),l}}});function t(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}var n;c.extend(c.expr.pseudos||c.expr[":"],{blank:function(e){return!t(""+c(e).val())},filled:function(e){e=c(e).val();return null!==e&&!!t(""+e)},unchecked:function(e){return!c(e).prop("checked")}}),c.validator=function(e,t){this.settings=c.extend(!0,{},c.validator.defaults,e),this.currentForm=t,this.init()},c.validator.format=function(n,e){return 1===arguments.length?function(){var e=c.makeArray(arguments);return e.unshift(n),c.validator.format.apply(this,e)}:(void 0===e||((e=2<arguments.length&&e.constructor!==Array?c.makeArray(arguments).slice(1):e).constructor!==Array&&(e=[e]),c.each(e,function(e,t){n=n.replace(new RegExp("\\{"+e+"\\}","g"),function(){return t})})),n)},c.extend(c.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:c([]),errorLabelContainer:c([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(e,t){9===t.which&&""===this.elementValue(e)||-1!==c.inArray(t.keyCode,[16,17,18,20,35,36,37,38,39,40,45,144,225])||(e.name in this.submitted||e.name in this.invalid)&&this.element(e)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(e,t,n){("radio"===e.type?this.findByName(e.name):c(e)).addClass(t).removeClass(n)},unhighlight:function(e,t,n){("radio"===e.type?this.findByName(e.name):c(e)).removeClass(t).addClass(n)}},setDefaults:function(e){c.extend(c.validator.defaults,e)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:c.validator.format("Please enter no more than {0} characters."),minlength:c.validator.format("Please enter at least {0} characters."),rangelength:c.validator.format("Please enter a value between {0} and {1} characters long."),range:c.validator.format("Please enter a value between {0} and {1}."),max:c.validator.format("Please enter a value less than or equal to {0}."),min:c.validator.format("Please enter a value greater than or equal to {0}."),step:c.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function e(e){var t,n,i=void 0!==c(this).attr("contenteditable")&&"false"!==c(this).attr("contenteditable");!this.form&&i&&(this.form=c(this).closest("form")[0],this.name=c(this).attr("name")),r===this.form&&(i=c.data(this.form,"validator"),t="on"+e.type.replace(/^validate/,""),(n=i.settings)[t]&&!c(this).is(n.ignore)&&n[t].call(i,this,e))}this.labelContainer=c(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||c(this.currentForm),this.containers=c(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var n,r=this.currentForm,i=this.groups={};c.each(this.settings.groups,function(n,e){"string"==typeof e&&(e=e.split(/\s/)),c.each(e,function(e,t){i[t]=n})}),n=this.settings.rules,c.each(n,function(e,t){n[e]=c.validator.normalizeRule(t)}),c(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",e).on("click.validate","select, option, [type='radio'], [type='checkbox']",e),this.settings.invalidHandler&&c(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),c.extend(this.submitted,this.errorMap),this.invalid=c.extend({},this.errorMap),this.valid()||c(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(e){var t,n,i=this.clean(e),r=this.validationTargetFor(i),s=this,o=!0;return void 0===r?delete this.invalid[i.name]:(this.prepareElement(r),this.currentElements=c(r),(n=this.groups[r.name])&&c.each(this.groups,function(e,t){t===n&&e!==r.name&&((i=s.validationTargetFor(s.clean(s.findByName(e))))&&i.name in s.invalid&&(s.currentElements.push(i),o=s.check(i)&&o))}),t=!1!==this.check(r),o=o&&t,this.invalid[r.name]=!t,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),c(e).attr("aria-invalid",!t)),o},showErrors:function(t){var n;t&&(c.extend((n=this).errorMap,t),this.errorList=c.map(this.errorMap,function(e,t){return{message:e,element:n.findByName(t)[0]}}),this.successList=c.grep(this.successList,function(e){return!(e.name in t)})),this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){c.fn.resetForm&&c(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var e=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(e)},resetElements:function(e){var t;if(this.settings.unhighlight)for(t=0;e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,""),this.findByName(e[t].name).removeClass(this.settings.validClass);else e.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,n=0;for(t in e)void 0!==e[t]&&null!==e[t]&&!1!==e[t]&&n++;return n},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{c(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").trigger("focus").trigger("focusin")}catch(e){}},findLastActive:function(){var t=this.lastActive;return t&&1===c.grep(this.errorList,function(e){return e.element.name===t.name}).length&&t},elements:function(){var n=this,i={};return c(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var e=this.name||c(this).attr("name"),t=void 0!==c(this).attr("contenteditable")&&"false"!==c(this).attr("contenteditable");return!e&&n.settings.debug&&window.console&&console.error("%o has no name assigned",this),t&&(this.form=c(this).closest("form")[0],this.name=e),!(this.form!==n.currentForm||e in i||!n.objectLength(c(this).rules())||(i[e]=!0,0))})},clean:function(e){return c(e)[0]},errors:function(){var e=this.settings.errorClass.split(" ").join(".");return c(this.settings.errorElement+"."+e,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=c([]),this.toHide=c([])},reset:function(){this.resetInternals(),this.currentElements=c([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(e){var t=c(e),n=e.type,i=void 0!==t.attr("contenteditable")&&"false"!==t.attr("contenteditable");return"radio"===n||"checkbox"===n?this.findByName(e.name).filter(":checked").val():"number"===n&&void 0!==e.validity?e.validity.badInput?"NaN":t.val():(e=i?t.text():t.val(),"file"===n?"C:\\fakepath\\"===e.substr(0,12)?e.substr(12):0<=(i=e.lastIndexOf("/"))?e.substr(i+1):0<=(i=e.lastIndexOf("\\"))?e.substr(i+1):e:"string"==typeof e?e.replace(/\r/g,""):e)},check:function(t){t=this.validationTargetFor(this.clean(t));var e,n,i,r,s=c(t).rules(),o=c.map(s,function(e,t){return t}).length,a=!1,l=this.elementValue(t);for(n in"function"==typeof s.normalizer?r=s.normalizer:"function"==typeof this.settings.normalizer&&(r=this.settings.normalizer),r&&(l=r.call(t,l),delete s.normalizer),s){i={method:n,parameters:s[n]};try{if("dependency-mismatch"===(e=c.validator.methods[n].call(this,l,t,i.parameters))&&1===o){a=!0;continue}if(a=!1,"pending"===e)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!e)return this.formatAndAdd(t,i),!1}catch(e){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+i.method+"' method.",e),e instanceof TypeError&&(e.message+=".  Exception occurred when checking element "+t.id+", check the '"+i.method+"' method."),e}}if(!a)return this.objectLength(s)&&this.successList.push(t),!0},customDataMessage:function(e,t){return c(e).data("msg"+t.charAt(0).toUpperCase()+t.substring(1).toLowerCase())||c(e).data("msg")},customMessage:function(e,t){e=this.settings.messages[e];return e&&(e.constructor===String?e:e[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(e,t){var n=this.findDefined(this.customMessage(e.name,(t="string"==typeof t?{method:t}:t).method),this.customDataMessage(e,t.method),!this.settings.ignoreTitle&&e.title||void 0,c.validator.messages[t.method],"<strong>Warning: No message defined for "+e.name+"</strong>"),i=/\$?\{(\d+)\}/g;return"function"==typeof n?n=n.call(this,t.parameters,e):i.test(n)&&(n=c.validator.format(n.replace(i,"{$1}"),t.parameters)),n},formatAndAdd:function(e,t){var n=this.defaultMessage(e,t);this.errorList.push({message:n,element:e,method:t.method}),this.errorMap[e.name]=n,this.submitted[e.name]=n},addWrapper:function(e){return e=this.settings.wrapper?e.add(e.parent(this.settings.wrapper)):e},defaultShowErrors:function(){for(var e,t,n=0;this.errorList[n];n++)t=this.errorList[n],this.settings.highlight&&this.settings.highlight.call(this,t.element,this.settings.errorClass,this.settings.validClass),this.showLabel(t.element,t.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(n=0;this.successList[n];n++)this.showLabel(this.successList[n]);if(this.settings.unhighlight)for(n=0,e=this.validElements();e[n];n++)this.settings.unhighlight.call(this,e[n],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return c(this.errorList).map(function(){return this.element})},showLabel:function(e,t){var n,i,r,s=this.errorsFor(e),o=this.idOrName(e),a=c(e).attr("aria-describedby");s.length?(s.removeClass(this.settings.validClass).addClass(this.settings.errorClass),s.html(t)):(i=s=c("<"+this.settings.errorElement+">").attr("id",o+"-error").addClass(this.settings.errorClass).html(t||""),this.settings.wrapper&&(i=s.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(i):this.settings.errorPlacement?this.settings.errorPlacement.call(this,i,c(e)):i.insertAfter(e),s.is("label")?s.attr("for",o):0===s.parents("label[for='"+this.escapeCssMeta(o)+"']").length&&(i=s.attr("id"),a?a.match(new RegExp("\\b"+this.escapeCssMeta(i)+"\\b"))||(a+=" "+i):a=i,c(e).attr("aria-describedby",a),(n=this.groups[e.name])&&c.each((r=this).groups,function(e,t){t===n&&c("[name='"+r.escapeCssMeta(e)+"']",r.currentForm).attr("aria-describedby",s.attr("id"))}))),!t&&this.settings.success&&(s.text(""),"string"==typeof this.settings.success?s.addClass(this.settings.success):this.settings.success(s,e)),this.toShow=this.toShow.add(s)},errorsFor:function(e){var t=this.escapeCssMeta(this.idOrName(e)),e=c(e).attr("aria-describedby"),t="label[for='"+t+"'], label[for='"+t+"'] *";return e&&(t=t+", #"+this.escapeCssMeta(e).replace(/\s+/g,", #")),this.errors().filter(t)},escapeCssMeta:function(e){return void 0===e?"":e.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(e){return this.groups[e.name]||!this.checkable(e)&&e.id||e.name},validationTargetFor:function(e){return this.checkable(e)&&(e=this.findByName(e.name)),c(e).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(e){return c(this.currentForm).find("[name='"+this.escapeCssMeta(e)+"']")},getLength:function(e,t){switch(t.nodeName.toLowerCase()){case"select":return c("option:selected",t).length;case"input":if(this.checkable(t))return this.findByName(t.name).filter(":checked").length}return e.length},depend:function(e,t){return!this.dependTypes[typeof e]||this.dependTypes[typeof e](e,t)},dependTypes:{boolean:function(e){return e},string:function(e,t){return!!c(e,t.form).length},function:function(e,t){return e(t)}},optional:function(e){var t=this.elementValue(e);return!c.validator.methods.required.call(this,t,e)&&"dependency-mismatch"},startRequest:function(e){this.pending[e.name]||(this.pendingRequest++,c(e).addClass(this.settings.pendingClass),this.pending[e.name]=!0)},stopRequest:function(e,t){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[e.name],c(e).removeClass(this.settings.pendingClass),t&&0===this.pendingRequest&&this.formSubmitted&&this.form()&&0===this.pendingRequest?(c(this.currentForm).submit(),this.submitButton&&c("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!t&&0===this.pendingRequest&&this.formSubmitted&&(c(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(e,t){return t="string"==typeof t&&t||"remote",c.data(e,"previousValue")||c.data(e,"previousValue",{old:null,valid:!0,message:this.defaultMessage(e,{method:t})})},destroy:function(){this.resetForm(),c(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(e,t){e.constructor===String?this.classRuleSettings[e]=t:c.extend(this.classRuleSettings,e)},classRules:function(e){var t={},e=c(e).attr("class");return e&&c.each(e.split(" "),function(){this in c.validator.classRuleSettings&&c.extend(t,c.validator.classRuleSettings[this])}),t},normalizeAttributeRule:function(e,t,n,i){/min|max|step/.test(n)&&(null===t||/number|range|text/.test(t))&&(i=Number(i),isNaN(i)&&(i=void 0)),i||0===i?e[n]=i:t===n&&"range"!==t&&(e["date"===t?"dateISO":n]=!0)},attributeRules:function(e){var t,n,i={},r=c(e),s=e.getAttribute("type");for(t in c.validator.methods)n="required"===t?(n=e.getAttribute(t),""===n&&(n=!0),!!n):r.attr(t),this.normalizeAttributeRule(i,s,t,n);return i.maxlength&&/-1|2147483647|524288/.test(i.maxlength)&&delete i.maxlength,i},dataRules:function(e){var t,n,i={},r=c(e),s=e.getAttribute("type");for(t in c.validator.methods)n=r.data("rule"+t.charAt(0).toUpperCase()+t.substring(1).toLowerCase()),""===n&&(n=!0),this.normalizeAttributeRule(i,s,t,n);return i},staticRules:function(e){var t={},n=c.data(e.form,"validator");return t=n.settings.rules?c.validator.normalizeRule(n.settings.rules[e.name])||{}:t},normalizeRules:function(i,r){return c.each(i,function(e,t){if(!1===t)delete i[e];else if(t.param||t.depends){var n=!0;switch(typeof t.depends){case"string":n=!!c(t.depends,r.form).length;break;case"function":n=t.depends.call(r,r)}n?i[e]=void 0===t.param||t.param:(c.data(r.form,"validator").resetElements(c(r)),delete i[e])}}),c.each(i,function(e,t){i[e]="function"==typeof t&&"normalizer"!==e?t(r):t}),c.each(["minlength","maxlength"],function(){i[this]&&(i[this]=Number(i[this]))}),c.each(["rangelength","range"],function(){var e;i[this]&&(Array.isArray(i[this])?i[this]=[Number(i[this][0]),Number(i[this][1])]:"string"==typeof i[this]&&(e=i[this].replace(/[\[\]]/g,"").split(/[\s,]+/),i[this]=[Number(e[0]),Number(e[1])]))}),c.validator.autoCreateRanges&&(null!=i.min&&null!=i.max&&(i.range=[i.min,i.max],delete i.min,delete i.max),null!=i.minlength&&null!=i.maxlength&&(i.rangelength=[i.minlength,i.maxlength],delete i.minlength,delete i.maxlength)),i},normalizeRule:function(e){var t;return"string"==typeof e&&(t={},c.each(e.split(/\s/),function(){t[this]=!0}),e=t),e},addMethod:function(e,t,n){c.validator.methods[e]=t,c.validator.messages[e]=void 0!==n?n:c.validator.messages[e],t.length<3&&c.validator.addClassRules(e,c.validator.normalizeRule(e))},methods:{required:function(e,t,n){return this.depend(n,t)?"select"===t.nodeName.toLowerCase()?(n=c(t).val())&&0<n.length:this.checkable(t)?0<this.getLength(e,t):null!=e&&0<e.length:"dependency-mismatch"},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(e)},date:(n=!1,function(e,t){return n||(n=!0,this.settings.debug&&window.console&&console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")),this.optional(t)||!/Invalid|NaN/.test(new Date(e).toString())}),dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},minlength:function(e,t,n){e=Array.isArray(e)?e.length:this.getLength(e,t);return this.optional(t)||n<=e},maxlength:function(e,t,n){e=Array.isArray(e)?e.length:this.getLength(e,t);return this.optional(t)||e<=n},rangelength:function(e,t,n){e=Array.isArray(e)?e.length:this.getLength(e,t);return this.optional(t)||e>=n[0]&&e<=n[1]},min:function(e,t,n){return this.optional(t)||n<=e},max:function(e,t,n){return this.optional(t)||e<=n},range:function(e,t,n){return this.optional(t)||e>=n[0]&&e<=n[1]},step:function(e,t,n){function i(e){return(e=(""+e).match(/(?:\.(\d+))?$/))&&e[1]?e[1].length:0}function r(e){return Math.round(e*Math.pow(10,s))}var s,o=c(t).attr("type"),a="Step attribute on input type "+o+" is not supported.",l=new RegExp("\\b"+o+"\\b"),u=!0;if(o&&!l.test(["text","number","range"].join()))throw new Error(a);return s=i(n),(i(e)>s||r(e)%r(n)!=0)&&(u=!1),this.optional(t)||u},equalTo:function(e,t,n){n=c(n);return this.settings.onfocusout&&n.not(".validate-equalTo-blur").length&&n.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){c(t).valid()}),e===n.val()},remote:function(i,r,e,s){if(this.optional(r))return"dependency-mismatch";s="string"==typeof s&&s||"remote";var o,t,a=this.previousValue(r,s);return this.settings.messages[r.name]||(this.settings.messages[r.name]={}),a.originalMessage=a.originalMessage||this.settings.messages[r.name][s],this.settings.messages[r.name][s]=a.message,t=c.param(c.extend({data:i},(e="string"==typeof e?{url:e}:e).data)),a.old===t?a.valid:(a.old=t,(o=this).startRequest(r),(t={})[r.name]=i,c.ajax(c.extend(!0,{mode:"abort",port:"validate"+r.name,dataType:"json",data:t,context:o.currentForm,success:function(e){var t,n=!0===e||"true"===e;o.settings.messages[r.name][s]=a.originalMessage,n?(t=o.formSubmitted,o.resetInternals(),o.toHide=o.errorsFor(r),o.formSubmitted=t,o.successList.push(r),o.invalid[r.name]=!1,o.showErrors()):(t={},e=e||o.defaultMessage(r,{method:s,parameters:i}),t[r.name]=a.message=e,o.invalid[r.name]=!0,o.showErrors(t)),a.valid=n,o.stopRequest(r,n)}},e)),"pending")}}});var i,r={};return c.ajaxPrefilter?c.ajaxPrefilter(function(e,t,n){var i=e.port;"abort"===e.mode&&(r[i]&&r[i].abort(),r[i]=n)}):(i=c.ajax,c.ajax=function(e){var t=("mode"in e?e:c.ajaxSettings).mode,n=("port"in e?e:c.ajaxSettings).port;return"abort"===t?(r[n]&&r[n].abort(),r[n]=i.apply(this,arguments),r[n]):i.apply(this,arguments)}),c}),function(n){"function"==typeof define&&define.amd?define(["jquery"],n):"object"==typeof module&&module.exports?module.exports=function(e,t){return void 0===t&&(t="undefined"!=typeof window?require("jquery"):require("jquery")(e)),n(t),t}:n(jQuery)}(function(t){(c=t&&t.fn&&t.fn.select2&&t.fn.select2.amd?t.fn.select2.amd:c)&&c.requirejs||(c?n=c:c={},g={},m={},v={},y={},i=Object.prototype.hasOwnProperty,r=[].slice,_=/\.js$/,f=function(e,t){var n,i,r=u(e),s=r[0],t=t[1];return e=r[1],s&&(n=x(s=l(s,t))),s?e=n&&n.normalize?n.normalize(e,(i=t,function(e){return l(e,i)})):l(e,t):(s=(r=u(e=l(e,t)))[0],e=r[1],s&&(n=x(s))),{f:s?s+"!"+e:e,n:e,pr:s,p:n}},p={require:function(e){return w(e)},exports:function(e){var t=g[e];return void 0!==t?t:g[e]={}},module:function(e){return{id:e,uri:"",exports:g[e],config:(t=e,function(){return v&&v.config&&v.config[t]||{}})};var t}},s=function(e,t,n,i){var r,s,o,a,l,u=[],c=typeof n,h=C(i=i||e);if("undefined"==c||"function"==c){for(t=!t.length&&n.length?["require","exports","module"]:t,a=0;a<t.length;a+=1)if("require"===(s=(o=f(t[a],h)).f))u[a]=p.require(e);else if("exports"===s)u[a]=p.exports(e),l=!0;else if("module"===s)r=u[a]=p.module(e);else if(b(g,s)||b(m,s)||b(y,s))u[a]=x(s);else{if(!o.p)throw new Error(e+" missing "+s);o.p.load(o.n,w(i,!0),function(t){return function(e){g[t]=e}}(s),{}),u[a]=g[s]}c=n?n.apply(g[e],u):void 0,e&&(r&&r.exports!==d&&r.exports!==g[e]?g[e]=r.exports:c===d&&l||(g[e]=c))}else e&&(g[e]=n)},e=n=o=function(e,t,n,i,r){if("string"==typeof e)return p[e]?p[e](t):x(f(e,C(t)).f);if(!e.splice){if((v=e).deps&&o(v.deps,v.callback),!t)return;t.splice?(e=t,t=n,n=null):e=d}return t=t||function(){},"function"==typeof n&&(n=i,i=r),i?s(d,e,t,n):setTimeout(function(){s(d,e,t,n)},4),o},o.config=function(e){return o(e)},e._defined=g,(a=function(e,t,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(n=t,t=[]),b(g,e)||b(m,e)||(m[e]=[e,t,n])}).amd={jQuery:!0},c.requirejs=e,c.require=n,c.define=a),c.define("almond",function(){}),c.define("jquery",[],function(){var e=t||$;return null==e&&console&&console.error&&console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."),e}),c.define("select2/utils",["jquery"],function(s){var i={};function u(e){var t,n=e.prototype,i=[];for(t in n)"function"==typeof n[t]&&"constructor"!==t&&i.push(t);return i}function e(){this.listeners={}}i.Extend=function(e,t){var n,i={}.hasOwnProperty;function r(){this.constructor=e}for(n in t)i.call(t,n)&&(e[n]=t[n]);return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e},i.Decorate=function(i,r){var e=u(r),t=u(i);function s(){var e=Array.prototype.unshift,t=r.prototype.constructor.length,n=i.prototype.constructor;0<t&&(e.call(arguments,i.prototype.constructor),n=r.prototype.constructor),n.apply(this,arguments)}r.displayName=i.displayName,s.prototype=new function(){this.constructor=s};for(var n=0;n<t.length;n++){var o=t[n];s.prototype[o]=i.prototype[o]}for(var a=0;a<e.length;a++){var l=e[a];s.prototype[l]=function(e){var t=function(){},n=(e in s.prototype&&(t=s.prototype[e]),r.prototype[e]);return function(){return Array.prototype.unshift.call(arguments,t),n.apply(this,arguments)}}(l)}return s},e.prototype.on=function(e,t){this.listeners=this.listeners||{},e in this.listeners?this.listeners[e].push(t):this.listeners[e]=[t]},e.prototype.trigger=function(e){var t=Array.prototype.slice,n=t.call(arguments,1);this.listeners=this.listeners||{},0===(n=null==n?[]:n).length&&n.push({}),(n[0]._type=e)in this.listeners&&this.invoke(this.listeners[e],t.call(arguments,1)),"*"in this.listeners&&this.invoke(this.listeners["*"],arguments)},e.prototype.invoke=function(e,t){for(var n=0,i=e.length;n<i;n++)e[n].apply(this,t)},i.Observable=e,i.generateChars=function(e){for(var t="",n=0;n<e;n++)t+=Math.floor(36*Math.random()).toString(36);return t},i.bind=function(e,t){return function(){e.apply(t,arguments)}},i._convertData=function(e){for(var t in e){var n=t.split("-"),i=e;if(1!==n.length){for(var r=0;r<n.length;r++){var s=n[r];(s=s.substring(0,1).toLowerCase()+s.substring(1))in i||(i[s]={}),r==n.length-1&&(i[s]=e[t]),i=i[s]}delete e[t]}}return e},i.hasScroll=function(e,t){var n=s(t),i=t.style.overflowX,r=t.style.overflowY;return(i!==r||"hidden"!==r&&"visible"!==r)&&("scroll"===i||"scroll"===r||n.innerHeight()<t.scrollHeight||n.innerWidth()<t.scrollWidth)},i.escapeMarkup=function(e){var t={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return"string"!=typeof e?e:String(e).replace(/[&<>"'\/\\]/g,function(e){return t[e]})},i.__cache={};var n=0;return i.GetUniqueElementId=function(e){var t=e.getAttribute("data-select2-id");return null==t&&(t=e.id?"select2-data-"+e.id:"select2-data-"+(++n).toString()+"-"+i.generateChars(4),e.setAttribute("data-select2-id",t)),t},i.StoreData=function(e,t,n){e=i.GetUniqueElementId(e),i.__cache[e]||(i.__cache[e]={}),i.__cache[e][t]=n},i.GetData=function(e,t){var n=i.GetUniqueElementId(e);return t?i.__cache[n]&&null!=i.__cache[n][t]?i.__cache[n][t]:s(e).data(t):i.__cache[n]},i.RemoveData=function(e){var t=i.GetUniqueElementId(e);null!=i.__cache[t]&&delete i.__cache[t],e.removeAttribute("data-select2-id")},i.copyNonInternalCssClasses=function(e,t){var n=(n=e.getAttribute("class").trim().split(/\s+/)).filter(function(e){return 0===e.indexOf("select2-")}),t=(t=t.getAttribute("class").trim().split(/\s+/)).filter(function(e){return 0!==e.indexOf("select2-")}),t=n.concat(t);e.setAttribute("class",t.join(" "))},i}),c.define("select2/results",["jquery","./utils"],function(h,d){function i(e,t,n){this.$element=e,this.data=n,this.options=t,i.__super__.constructor.call(this)}return d.Extend(i,d.Observable),i.prototype.render=function(){var e=h('<ul class="select2-results__options" role="listbox"></ul>');return this.options.get("multiple")&&e.attr("aria-multiselectable","true"),this.$results=e},i.prototype.clear=function(){this.$results.empty()},i.prototype.displayMessage=function(e){var t=this.options.get("escapeMarkup"),n=(this.clear(),this.hideLoading(),h('<li role="alert" aria-live="assertive" class="select2-results__option"></li>')),i=this.options.get("translations").get(e.message);n.append(t(i(e.args))),n[0].className+=" select2-results__message",this.$results.append(n)},i.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()},i.prototype.append=function(e){this.hideLoading();var t=[];if(null!=e.results&&0!==e.results.length){e.results=this.sort(e.results);for(var n=0;n<e.results.length;n++){var i=e.results[n],i=this.option(i);t.push(i)}this.$results.append(t)}else 0===this.$results.children().length&&this.trigger("results:message",{message:"noResults"})},i.prototype.position=function(e,t){t.find(".select2-results").append(e)},i.prototype.sort=function(e){return this.options.get("sorter")(e)},i.prototype.highlightFirstItem=function(){var e=this.$results.find(".select2-results__option--selectable"),t=e.filter(".select2-results__option--selected");(0<t.length?t:e).first().trigger("mouseenter"),this.ensureHighlightVisible()},i.prototype.setClasses=function(){var t=this;this.data.current(function(e){var i=e.map(function(e){return e.id.toString()});t.$results.find(".select2-results__option--selectable").each(function(){var e=h(this),t=d.GetData(this,"data"),n=""+t.id;null!=t.element&&t.element.selected||null==t.element&&-1<i.indexOf(n)?(this.classList.add("select2-results__option--selected"),e.attr("aria-selected","true")):(this.classList.remove("select2-results__option--selected"),e.attr("aria-selected","false"))})})},i.prototype.showLoading=function(e){this.hideLoading(),e={disabled:!0,loading:!0,text:this.options.get("translations").get("searching")(e)},(e=this.option(e)).className+=" loading-results",this.$results.prepend(e)},i.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()},i.prototype.option=function(e){var t=document.createElement("li");t.classList.add("select2-results__option"),t.classList.add("select2-results__option--selectable");var n,i={role:"option"},r=window.Element.prototype.matches||window.Element.prototype.msMatchesSelector||window.Element.prototype.webkitMatchesSelector;for(n in(null!=e.element&&r.call(e.element,":disabled")||null==e.element&&e.disabled)&&(i["aria-disabled"]="true",t.classList.remove("select2-results__option--selectable"),t.classList.add("select2-results__option--disabled")),null==e.id&&t.classList.remove("select2-results__option--selectable"),null!=e._resultId&&(t.id=e._resultId),e.title&&(t.title=e.title),e.children&&(i.role="group",i["aria-label"]=e.text,t.classList.remove("select2-results__option--selectable"),t.classList.add("select2-results__option--group")),i){var s=i[n];t.setAttribute(n,s)}if(e.children){var o=h(t),a=document.createElement("strong");a.className="select2-results__group",this.template(e,a);for(var l=[],u=0;u<e.children.length;u++){var c=e.children[u],c=this.option(c);l.push(c)}(r=h("<ul></ul>",{class:"select2-results__options select2-results__options--nested",role:"none"})).append(l),o.append(a),o.append(r)}else this.template(e,t);return d.StoreData(t,"data",e),t},i.prototype.bind=function(t,e){var r=this,n=t.id+"-results";this.$results.attr("id",n),t.on("results:all",function(e){r.clear(),r.append(e.data),t.isOpen()&&(r.setClasses(),r.highlightFirstItem())}),t.on("results:append",function(e){r.append(e.data),t.isOpen()&&r.setClasses()}),t.on("query",function(e){r.hideMessages(),r.showLoading(e)}),t.on("select",function(){t.isOpen()&&(r.setClasses(),r.options.get("scrollAfterSelect")&&r.highlightFirstItem())}),t.on("unselect",function(){t.isOpen()&&(r.setClasses(),r.options.get("scrollAfterSelect")&&r.highlightFirstItem())}),t.on("open",function(){r.$results.attr("aria-expanded","true"),r.$results.attr("aria-hidden","false"),r.setClasses(),r.ensureHighlightVisible()}),t.on("close",function(){r.$results.attr("aria-expanded","false"),r.$results.attr("aria-hidden","true"),r.$results.removeAttr("aria-activedescendant")}),t.on("results:toggle",function(){var e=r.getHighlightedResults();0!==e.length&&e.trigger("mouseup")}),t.on("results:select",function(){var e,t=r.getHighlightedResults();0!==t.length&&(e=d.GetData(t[0],"data"),t.hasClass("select2-results__option--selected")?r.trigger("close",{}):r.trigger("select",{data:e}))}),t.on("results:previous",function(){var e,t=r.getHighlightedResults(),n=r.$results.find(".select2-results__option--selectable"),i=n.index(t);i<=0||(e=i-1,0===t.length&&(e=0),(i=n.eq(e)).trigger("mouseenter"),t=r.$results.offset().top,n=i.offset().top,i=r.$results.scrollTop()+(n-t),0===e?r.$results.scrollTop(0):n-t<0&&r.$results.scrollTop(i))}),t.on("results:next",function(){var e,t=r.getHighlightedResults(),n=r.$results.find(".select2-results__option--selectable"),i=n.index(t)+1;i>=n.length||((e=n.eq(i)).trigger("mouseenter"),t=r.$results.offset().top+r.$results.outerHeight(!1),n=e.offset().top+e.outerHeight(!1),e=r.$results.scrollTop()+n-t,0===i?r.$results.scrollTop(0):t<n&&r.$results.scrollTop(e))}),t.on("results:focus",function(e){e.element[0].classList.add("select2-results__option--highlighted"),e.element[0].setAttribute("aria-selected","true")}),t.on("results:message",function(e){r.displayMessage(e)}),h.fn.mousewheel&&this.$results.on("mousewheel",function(e){var t=r.$results.scrollTop(),n=r.$results.get(0).scrollHeight-t+e.deltaY,t=0<e.deltaY&&t-e.deltaY<=0,n=e.deltaY<0&&n<=r.$results.height();t?(r.$results.scrollTop(0),e.preventDefault(),e.stopPropagation()):n&&(r.$results.scrollTop(r.$results.get(0).scrollHeight-r.$results.height()),e.preventDefault(),e.stopPropagation())}),this.$results.on("mouseup",".select2-results__option--selectable",function(e){var t=h(this),n=d.GetData(this,"data");t.hasClass("select2-results__option--selected")?r.options.get("multiple")?r.trigger("unselect",{originalEvent:e,data:n}):r.trigger("close",{}):r.trigger("select",{originalEvent:e,data:n})}),this.$results.on("mouseenter",".select2-results__option--selectable",function(e){var t=d.GetData(this,"data");r.getHighlightedResults().removeClass("select2-results__option--highlighted").attr("aria-selected","false"),r.trigger("results:focus",{data:t,element:h(this)})})},i.prototype.getHighlightedResults=function(){return this.$results.find(".select2-results__option--highlighted")},i.prototype.destroy=function(){this.$results.remove()},i.prototype.ensureHighlightVisible=function(){var e,t,n,i,r=this.getHighlightedResults();0!==r.length&&(e=this.$results.find(".select2-results__option--selectable").index(r),i=this.$results.offset().top,t=r.offset().top,n=this.$results.scrollTop()+(t-i),i=t-i,n-=2*r.outerHeight(!1),e<=2?this.$results.scrollTop(0):(i>this.$results.outerHeight()||i<0)&&this.$results.scrollTop(n))},i.prototype.template=function(e,t){var n=this.options.get("templateResult"),i=this.options.get("escapeMarkup");null==(e=n(e,t))?t.style.display="none":"string"==typeof e?t.innerHTML=i(e):h(t).append(e)},i}),c.define("select2/keys",[],function(){return{BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46}}),c.define("select2/selection/base",["jquery","../utils","../keys"],function(n,i,r){function s(e,t){this.$element=e,this.options=t,s.__super__.constructor.call(this)}return i.Extend(s,i.Observable),s.prototype.render=function(){var e=n('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex=0,null!=i.GetData(this.$element[0],"old-tabindex")?this._tabindex=i.GetData(this.$element[0],"old-tabindex"):null!=this.$element.attr("tabindex")&&(this._tabindex=this.$element.attr("tabindex")),e.attr("title",this.$element.attr("title")),e.attr("tabindex",this._tabindex),e.attr("aria-disabled","false"),this.$selection=e},s.prototype.bind=function(e,t){var n=this,i=e.id+"-results";this.container=e,this.$selection.on("focus",function(e){n.trigger("focus",e)}),this.$selection.on("blur",function(e){n._handleBlur(e)}),this.$selection.on("keydown",function(e){n.trigger("keypress",e),e.which===r.SPACE&&e.preventDefault()}),e.on("results:focus",function(e){n.$selection.attr("aria-activedescendant",e.data._resultId)}),e.on("selection:update",function(e){n.update(e.data)}),e.on("open",function(){n.$selection.attr("aria-expanded","true"),n.$selection.attr("aria-owns",i),n._attachCloseHandler(e)}),e.on("close",function(){n.$selection.attr("aria-expanded","false"),n.$selection.removeAttr("aria-activedescendant"),n.$selection.removeAttr("aria-owns"),n.$selection.trigger("focus"),n._detachCloseHandler(e)}),e.on("enable",function(){n.$selection.attr("tabindex",n._tabindex),n.$selection.attr("aria-disabled","false")}),e.on("disable",function(){n.$selection.attr("tabindex","-1"),n.$selection.attr("aria-disabled","true")})},s.prototype._handleBlur=function(e){var t=this;window.setTimeout(function(){document.activeElement==t.$selection[0]||n.contains(t.$selection[0],document.activeElement)||t.trigger("blur",e)},1)},s.prototype._attachCloseHandler=function(e){n(document.body).on("mousedown.select2."+e.id,function(e){var t=n(e.target).closest(".select2");n(".select2.select2-container--open").each(function(){this!=t[0]&&i.GetData(this,"element").select2("close")})})},s.prototype._detachCloseHandler=function(e){n(document.body).off("mousedown.select2."+e.id)},s.prototype.position=function(e,t){t.find(".selection").append(e)},s.prototype.destroy=function(){this._detachCloseHandler(this.container)},s.prototype.update=function(e){throw new Error("The `update` method must be defined in child classes.")},s.prototype.isEnabled=function(){return!this.isDisabled()},s.prototype.isDisabled=function(){return this.options.get("disabled")},s}),c.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(e,t,n,i){function r(){r.__super__.constructor.apply(this,arguments)}return n.Extend(r,t),r.prototype.render=function(){var e=r.__super__.render.call(this);return e[0].classList.add("select2-selection--single"),e.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'),e},r.prototype.bind=function(t,e){var n=this,i=(r.__super__.bind.apply(this,arguments),t.id+"-container");this.$selection.find(".select2-selection__rendered").attr("id",i).attr("role","textbox").attr("aria-readonly","true"),this.$selection.attr("aria-labelledby",i),this.$selection.attr("aria-controls",i),this.$selection.on("mousedown",function(e){1===e.which&&n.trigger("toggle",{originalEvent:e})}),this.$selection.on("focus",function(e){}),this.$selection.on("blur",function(e){}),t.on("focus",function(e){t.isOpen()||n.$selection.trigger("focus")})},r.prototype.clear=function(){var e=this.$selection.find(".select2-selection__rendered");e.empty(),e.removeAttr("title")},r.prototype.display=function(e,t){var n=this.options.get("templateSelection");return this.options.get("escapeMarkup")(n(e,t))},r.prototype.selectionContainer=function(){return e("<span></span>")},r.prototype.update=function(e){var t,n;0!==e.length?(n=e[0],t=this.$selection.find(".select2-selection__rendered"),e=this.display(n,t),t.empty().append(e),(n=n.title||n.text)?t.attr("title",n):t.removeAttr("title")):this.clear()},r}),c.define("select2/selection/multiple",["jquery","./base","../utils"],function(r,e,u){function s(e,t){s.__super__.constructor.apply(this,arguments)}return u.Extend(s,e),s.prototype.render=function(){var e=s.__super__.render.call(this);return e[0].classList.add("select2-selection--multiple"),e.html('<ul class="select2-selection__rendered"></ul>'),e},s.prototype.bind=function(e,t){var n=this,i=(s.__super__.bind.apply(this,arguments),e.id+"-container");this.$selection.find(".select2-selection__rendered").attr("id",i),this.$selection.on("click",function(e){n.trigger("toggle",{originalEvent:e})}),this.$selection.on("click",".select2-selection__choice__remove",function(e){var t;n.isDisabled()||(t=r(this).parent(),t=u.GetData(t[0],"data"),n.trigger("unselect",{originalEvent:e,data:t}))}),this.$selection.on("keydown",".select2-selection__choice__remove",function(e){n.isDisabled()||e.stopPropagation()})},s.prototype.clear=function(){var e=this.$selection.find(".select2-selection__rendered");e.empty(),e.removeAttr("title")},s.prototype.display=function(e,t){var n=this.options.get("templateSelection");return this.options.get("escapeMarkup")(n(e,t))},s.prototype.selectionContainer=function(){return r('<li class="select2-selection__choice"><button type="button" class="select2-selection__choice__remove" tabindex="-1"><span aria-hidden="true">&times;</span></button><span class="select2-selection__choice__display"></span></li>')},s.prototype.update=function(e){if(this.clear(),0!==e.length){for(var t=[],n=this.$selection.find(".select2-selection__rendered").attr("id")+"-choice-",i=0;i<e.length;i++){var r=e[i],s=this.selectionContainer(),o=this.display(r,s),a=n+u.generateChars(4)+"-",l=(r.id?a+=r.id:a+=u.generateChars(4),s.find(".select2-selection__choice__display").append(o).attr("id",a),r.title||r.text);l&&s.attr("title",l),o=this.options.get("translations").get("removeItem"),(l=s.find(".select2-selection__choice__remove")).attr("title",o()),l.attr("aria-label",o()),l.attr("aria-describedby",a),u.StoreData(s[0],"data",r),t.push(s)}this.$selection.find(".select2-selection__rendered").append(t)}},s}),c.define("select2/selection/placeholder",[],function(){function e(e,t,n){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n)}return e.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t?{id:"",text:t}:t},e.prototype.createPlaceholder=function(e,t){var n=this.selectionContainer();return n.html(this.display(t)),n[0].classList.add("select2-selection__placeholder"),n[0].classList.remove("select2-selection__choice"),t=t.title||t.text||n.text(),this.$selection.find(".select2-selection__rendered").attr("title",t),n},e.prototype.update=function(e,t){var n=1==t.length&&t[0].id!=this.placeholder.id;if(1<t.length||n)return e.call(this,t);this.clear(),t=this.createPlaceholder(this.placeholder),this.$selection.find(".select2-selection__rendered").append(t)},e}),c.define("select2/selection/allowClear",["jquery","../keys","../utils"],function(r,i,a){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",function(e){i._handleClear(e)}),t.on("keypress",function(e){i._handleKeyboardClear(e,t)})},e.prototype._handleClear=function(e,t){if(!this.isDisabled()){var n=this.$selection.find(".select2-selection__clear");if(0!==n.length){t.stopPropagation();var i=a.GetData(n[0],"data"),r=this.$element.val(),s=(this.$element.val(this.placeholder.id),{data:i});if(this.trigger("clear",s),s.prevented)this.$element.val(r);else{for(var o=0;o<i.length;o++)if(s={data:i[o]},this.trigger("unselect",s),s.prevented)return void this.$element.val(r);this.$element.trigger("input").trigger("change"),this.trigger("toggle",{})}}}},e.prototype._handleKeyboardClear=function(e,t,n){n.isOpen()||t.which!=i.DELETE&&t.which!=i.BACKSPACE||this._handleClear(t)},e.prototype.update=function(e,t){var n,i;e.call(this,t),this.$selection.find(".select2-selection__clear").remove(),this.$selection[0].classList.remove("select2-selection--clearable"),0<this.$selection.find(".select2-selection__placeholder").length||0===t.length||(n=this.$selection.find(".select2-selection__rendered").attr("id"),i=this.options.get("translations").get("removeAllItems"),(e=r('<button type="button" class="select2-selection__clear" tabindex="-1"><span aria-hidden="true">&times;</span></button>')).attr("title",i()),e.attr("aria-label",i()),e.attr("aria-describedby",n),a.StoreData(e[0],"data",t),this.$selection.prepend(e),this.$selection[0].classList.add("select2-selection--clearable"))},e}),c.define("select2/selection/search",["jquery","../utils","../keys"],function(i,a,l){function e(e,t,n){e.call(this,t,n)}return e.prototype.render=function(e){var t=this.options.get("translations").get("search"),n=i('<span class="select2-search select2-search--inline"><textarea class="select2-search__field" type="search" tabindex="-1" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" ></textarea></span>');return this.$searchContainer=n,this.$search=n.find("textarea"),this.$search.prop("autocomplete",this.options.get("autocomplete")),this.$search.attr("aria-label",t()),e=e.call(this),this._transferTabIndex(),e.append(this.$searchContainer),e},e.prototype.bind=function(e,t,n){var i=this,r=t.id+"-results",s=t.id+"-container";e.call(this,t,n),i.$search.attr("aria-describedby",s),t.on("open",function(){i.$search.attr("aria-controls",r),i.$search.trigger("focus")}),t.on("close",function(){i.$search.val(""),i.resizeSearch(),i.$search.removeAttr("aria-controls"),i.$search.removeAttr("aria-activedescendant"),i.$search.trigger("focus")}),t.on("enable",function(){i.$search.prop("disabled",!1),i._transferTabIndex()}),t.on("disable",function(){i.$search.prop("disabled",!0)}),t.on("focus",function(e){i.$search.trigger("focus")}),t.on("results:focus",function(e){e.data._resultId?i.$search.attr("aria-activedescendant",e.data._resultId):i.$search.removeAttr("aria-activedescendant")}),this.$selection.on("focusin",".select2-search--inline",function(e){i.trigger("focus",e)}),this.$selection.on("focusout",".select2-search--inline",function(e){i._handleBlur(e)}),this.$selection.on("keydown",".select2-search--inline",function(e){var t;e.stopPropagation(),i.trigger("keypress",e),i._keyUpPrevented=e.isDefaultPrevented(),e.which===l.BACKSPACE&&""===i.$search.val()&&0<(t=i.$selection.find(".select2-selection__choice").last()).length&&(t=a.GetData(t[0],"data"),i.searchRemoveChoice(t),e.preventDefault())}),this.$selection.on("click",".select2-search--inline",function(e){i.$search.val()&&e.stopPropagation()});var o=(t=document.documentMode)&&t<=11;this.$selection.on("input.searchcheck",".select2-search--inline",function(e){o?i.$selection.off("input.search input.searchcheck"):i.$selection.off("keyup.search")}),this.$selection.on("keyup.search input.search",".select2-search--inline",function(e){var t;o&&"input"===e.type?i.$selection.off("input.search input.searchcheck"):(t=e.which)!=l.SHIFT&&t!=l.CTRL&&t!=l.ALT&&t!=l.TAB&&i.handleSearch(e)})},e.prototype._transferTabIndex=function(e){this.$search.attr("tabindex",this.$selection.attr("tabindex")),this.$selection.attr("tabindex","-1")},e.prototype.createPlaceholder=function(e,t){this.$search.attr("placeholder",t.text)},e.prototype.update=function(e,t){var n=this.$search[0]==document.activeElement;this.$search.attr("placeholder",""),e.call(this,t),this.resizeSearch(),n&&this.$search.trigger("focus")},e.prototype.handleSearch=function(){var e;this.resizeSearch(),this._keyUpPrevented||(e=this.$search.val(),this.trigger("query",{term:e})),this._keyUpPrevented=!1},e.prototype.searchRemoveChoice=function(e,t){this.trigger("unselect",{data:t}),this.$search.val(t.text),this.handleSearch()},e.prototype.resizeSearch=function(){this.$search.css("width","25px");var e="100%";""===this.$search.attr("placeholder")&&(e=.75*(this.$search.val().length+1)+"em"),this.$search.css("width",e)},e}),c.define("select2/selection/selectionCss",["../utils"],function(n){function e(){}return e.prototype.render=function(e){var t=e.call(this);return-1!==(e=this.options.get("selectionCssClass")||"").indexOf(":all:")&&(e=e.replace(":all:",""),n.copyNonInternalCssClasses(t[0],this.$element[0])),t.addClass(e),t},e}),c.define("select2/selection/eventRelay",["jquery"],function(o){function e(){}return e.prototype.bind=function(e,t,n){var i=this,r=["open","opening","close","closing","select","selecting","unselect","unselecting","clear","clearing"],s=["opening","closing","selecting","unselecting","clearing"];e.call(this,t,n),t.on("*",function(e,t){var n;-1!==r.indexOf(e)&&(n=o.Event("select2:"+e,{params:t=t||{}}),i.$element.trigger(n),-1!==s.indexOf(e)&&(t.prevented=n.isDefaultPrevented()))})},e}),c.define("select2/translation",["jquery","require"],function(t,n){function i(e){this.dict=e||{}}return i.prototype.all=function(){return this.dict},i.prototype.get=function(e){return this.dict[e]},i.prototype.extend=function(e){this.dict=t.extend({},e.all(),this.dict)},i._cache={},i.loadPath=function(e){var t;return e in i._cache||(t=n(e),i._cache[e]=t),new i(i._cache[e])},i}),c.define("select2/diacritics",[],function(){return{"â¶":"A","ï¼¡":"A","Ã":"A","Ã":"A","Ã":"A","áº¦":"A","áº¤":"A","áºª":"A","áº¨":"A","Ã":"A","Ä":"A","Ä":"A","áº°":"A","áº®":"A","áº´":"A","áº²":"A","È¦":"A","Ç ":"A","Ã":"A","Ç":"A","áº¢":"A","Ã":"A","Çº":"A","Ç":"A","È":"A","È":"A","áº ":"A","áº¬":"A","áº¶":"A","á¸":"A","Ä":"A","Èº":"A","â±¯":"A","ê²":"AA","Ã":"AE","Ç¼":"AE","Ç¢":"AE","ê´":"AO","ê¶":"AU","ê¸":"AV","êº":"AV","ê¼":"AY","â·":"B","ï¼¢":"B","á¸":"B","á¸":"B","á¸":"B","É":"B","Æ":"B","Æ":"B","â¸":"C","ï¼£":"C","Ä":"C","Ä":"C","Ä":"C","Ä":"C","Ã":"C","á¸":"C","Æ":"C","È»":"C","ê¾":"C","â¹":"D","ï¼¤":"D","á¸":"D","Ä":"D","á¸":"D","á¸":"D","á¸":"D","á¸":"D","Ä":"D","Æ":"D","Æ":"D","Æ":"D","ê¹":"D","Ç±":"DZ","Ç":"DZ","Ç²":"Dz","Ç":"Dz","âº":"E","ï¼¥":"E","Ã":"E","Ã":"E","Ã":"E","á»":"E","áº¾":"E","á»":"E","á»":"E","áº¼":"E","Ä":"E","á¸":"E","á¸":"E","Ä":"E","Ä":"E","Ã":"E","áºº":"E","Ä":"E","È":"E","È":"E","áº¸":"E","á»":"E","È¨":"E","á¸":"E","Ä":"E","á¸":"E","á¸":"E","Æ":"E","Æ":"E","â»":"F","ï¼¦":"F","á¸":"F","Æ":"F","ê»":"F","â¼":"G","ï¼§":"G","Ç´":"G","Ä":"G","á¸ ":"G","Ä":"G","Ä ":"G","Ç¦":"G","Ä¢":"G","Ç¤":"G","Æ":"G","ê ":"G","ê½":"G","ê¾":"G","â½":"H","ï¼¨":"H","Ä¤":"H","á¸¢":"H","á¸¦":"H","È":"H","á¸¤":"H","á¸¨":"H","á¸ª":"H","Ä¦":"H","â±§":"H","â±µ":"H","ê":"H","â¾":"I","ï¼©":"I","Ã":"I","Ã":"I","Ã":"I","Ä¨":"I","Äª":"I","Ä¬":"I","Ä°":"I","Ã":"I","á¸®":"I","á»":"I","Ç":"I","È":"I","È":"I","á»":"I","Ä®":"I","á¸¬":"I","Æ":"I","â¿":"J","ï¼ª":"J","Ä´":"J","É":"J","â":"K","ï¼«":"K","á¸°":"K","Ç¨":"K","á¸²":"K","Ä¶":"K","á¸´":"K","Æ":"K","â±©":"K","ê":"K","ê":"K","ê":"K","ê¢":"K","â":"L","ï¼¬":"L","Ä¿":"L","Ä¹":"L","Ä½":"L","á¸¶":"L","á¸¸":"L","Ä»":"L","á¸¼":"L","á¸º":"L","Å":"L","È½":"L","â±¢":"L","â± ":"L","ê":"L","ê":"L","ê":"L","Ç":"LJ","Ç":"Lj","â":"M","ï¼­":"M","á¸¾":"M","á¹":"M","á¹":"M","â±®":"M","Æ":"M","â":"N","ï¼®":"N","Ç¸":"N","Å":"N","Ã":"N","á¹":"N","Å":"N","á¹":"N","Å":"N","á¹":"N","á¹":"N","È ":"N","Æ":"N","ê":"N","ê¤":"N","Ç":"NJ","Ç":"Nj","â":"O","ï¼¯":"O","Ã":"O","Ã":"O","Ã":"O","á»":"O","á»":"O","á»":"O","á»":"O","Ã":"O","á¹":"O","È¬":"O","á¹":"O","Å":"O","á¹":"O","á¹":"O","Å":"O","È®":"O","È°":"O","Ã":"O","Èª":"O","á»":"O","Å":"O","Ç":"O","È":"O","È":"O","Æ ":"O","á»":"O","á»":"O","á» ":"O","á»":"O","á»¢":"O","á»":"O","á»":"O","Çª":"O","Ç¬":"O","Ã":"O","Ç¾":"O","Æ":"O","Æ":"O","ê":"O","ê":"O","Å":"OE","Æ¢":"OI","ê":"OO","È¢":"OU","â":"P","ï¼°":"P","á¹":"P","á¹":"P","Æ¤":"P","â±£":"P","ê":"P","ê":"P","ê":"P","â":"Q","ï¼±":"Q","ê":"Q","ê":"Q","É":"Q","â":"R","ï¼²":"R","Å":"R","á¹":"R","Å":"R","È":"R","È":"R","á¹":"R","á¹":"R","Å":"R","á¹":"R","É":"R","â±¤":"R","ê":"R","ê¦":"R","ê":"R","â":"S","ï¼³":"S","áº":"S","Å":"S","á¹¤":"S","Å":"S","á¹ ":"S","Å ":"S","á¹¦":"S","á¹¢":"S","á¹¨":"S","È":"S","Å":"S","â±¾":"S","ê¨":"S","ê":"S","â":"T","ï¼´":"T","á¹ª":"T","Å¤":"T","á¹¬":"T","È":"T","Å¢":"T","á¹°":"T","á¹®":"T","Å¦":"T","Æ¬":"T","Æ®":"T","È¾":"T","ê":"T","ê¨":"TZ","â":"U","ï¼µ":"U","Ã":"U","Ã":"U","Ã":"U","Å¨":"U","á¹¸":"U","Åª":"U","á¹º":"U","Å¬":"U","Ã":"U","Ç":"U","Ç":"U","Ç":"U","Ç":"U","á»¦":"U","Å®":"U","Å°":"U","Ç":"U","È":"U","È":"U","Æ¯":"U","á»ª":"U","á»¨":"U","á»®":"U","á»¬":"U","á»°":"U","á»¤":"U","á¹²":"U","Å²":"U","á¹¶":"U","á¹´":"U","É":"U","â":"V","ï¼¶":"V","á¹¼":"V","á¹¾":"V","Æ²":"V","ê":"V","É":"V","ê ":"VY","â":"W","ï¼·":"W","áº":"W","áº":"W","Å´":"W","áº":"W","áº":"W","áº":"W","â±²":"W","â":"X","ï¼¸":"X","áº":"X","áº":"X","â":"Y","ï¼¹":"Y","á»²":"Y","Ã":"Y","Å¶":"Y","á»¸":"Y","È²":"Y","áº":"Y","Å¸":"Y","á»¶":"Y","á»´":"Y","Æ³":"Y","É":"Y","á»¾":"Y","â":"Z","ï¼º":"Z","Å¹":"Z","áº":"Z","Å»":"Z","Å½":"Z","áº":"Z","áº":"Z","Æµ":"Z","È¤":"Z","â±¿":"Z","â±«":"Z","ê¢":"Z","â":"a","ï½":"a","áº":"a","Ã ":"a","Ã¡":"a","Ã¢":"a","áº§":"a","áº¥":"a","áº«":"a","áº©":"a","Ã£":"a","Ä":"a","Ä":"a","áº±":"a","áº¯":"a","áºµ":"a","áº³":"a","È§":"a","Ç¡":"a","Ã¤":"a","Ç":"a","áº£":"a","Ã¥":"a","Ç»":"a","Ç":"a","È":"a","È":"a","áº¡":"a","áº­":"a","áº·":"a","á¸":"a","Ä":"a","â±¥":"a","É":"a","ê³":"aa","Ã¦":"ae","Ç½":"ae","Ç£":"ae","êµ":"ao","ê·":"au","ê¹":"av","ê»":"av","ê½":"ay","â":"b","ï½":"b","á¸":"b","á¸":"b","á¸":"b","Æ":"b","Æ":"b","É":"b","â":"c","ï½":"c","Ä":"c","Ä":"c","Ä":"c","Ä":"c","Ã§":"c","á¸":"c","Æ":"c","È¼":"c","ê¿":"c","â":"c","â":"d","ï½":"d","á¸":"d","Ä":"d","á¸":"d","á¸":"d","á¸":"d","á¸":"d","Ä":"d","Æ":"d","É":"d","É":"d","êº":"d","Ç³":"dz","Ç":"dz","â":"e","ï½":"e","Ã¨":"e","Ã©":"e","Ãª":"e","á»":"e","áº¿":"e","á»":"e","á»":"e","áº½":"e","Ä":"e","á¸":"e","á¸":"e","Ä":"e","Ä":"e","Ã«":"e","áº»":"e","Ä":"e","È":"e","È":"e","áº¹":"e","á»":"e","È©":"e","á¸":"e","Ä":"e","á¸":"e","á¸":"e","É":"e","É":"e","Ç":"e","â":"f","ï½":"f","á¸":"f","Æ":"f","ê¼":"f","â":"g","ï½":"g","Çµ":"g","Ä":"g","á¸¡":"g","Ä":"g","Ä¡":"g","Ç§":"g","Ä£":"g","Ç¥":"g","É ":"g","ê¡":"g","áµ¹":"g","ê¿":"g","â":"h","ï½":"h","Ä¥":"h","á¸£":"h","á¸§":"h","È":"h","á¸¥":"h","á¸©":"h","á¸«":"h","áº":"h","Ä§":"h","â±¨":"h","â±¶":"h","É¥":"h","Æ":"hv","â":"i","ï½":"i","Ã¬":"i","Ã­":"i","Ã®":"i","Ä©":"i","Ä«":"i","Ä­":"i","Ã¯":"i","á¸¯":"i","á»":"i","Ç":"i","È":"i","È":"i","á»":"i","Ä¯":"i","á¸­":"i","É¨":"i","Ä±":"i","â":"j","ï½":"j","Äµ":"j","Ç°":"j","É":"j","â":"k","ï½":"k","á¸±":"k","Ç©":"k","á¸³":"k","Ä·":"k","á¸µ":"k","Æ":"k","â±ª":"k","ê":"k","ê":"k","ê":"k","ê£":"k","â":"l","ï½":"l","Å":"l","Äº":"l","Ä¾":"l","á¸·":"l","á¸¹":"l","Ä¼":"l","á¸½":"l","á¸»":"l","Å¿":"l","Å":"l","Æ":"l","É«":"l","â±¡":"l","ê":"l","ê":"l","ê":"l","Ç":"lj","â":"m","ï½":"m","á¸¿":"m","á¹":"m","á¹":"m","É±":"m","É¯":"m","â":"n","ï½":"n","Ç¹":"n","Å":"n","Ã±":"n","á¹":"n","Å":"n","á¹":"n","Å":"n","á¹":"n","á¹":"n","Æ":"n","É²":"n","Å":"n","ê":"n","ê¥":"n","Ç":"nj","â":"o","ï½":"o","Ã²":"o","Ã³":"o","Ã´":"o","á»":"o","á»":"o","á»":"o","á»":"o","Ãµ":"o","á¹":"o","È­":"o","á¹":"o","Å":"o","á¹":"o","á¹":"o","Å":"o","È¯":"o","È±":"o","Ã¶":"o","È«":"o","á»":"o","Å":"o","Ç":"o","È":"o","È":"o","Æ¡":"o","á»":"o","á»":"o","á»¡":"o","á»":"o","á»£":"o","á»":"o","á»":"o","Ç«":"o","Ç­":"o","Ã¸":"o","Ç¿":"o","É":"o","ê":"o","ê":"o","Éµ":"o","Å":"oe","Æ£":"oi","È£":"ou","ê":"oo","â":"p","ï½":"p","á¹":"p","á¹":"p","Æ¥":"p","áµ½":"p","ê":"p","ê":"p","ê":"p","â ":"q","ï½":"q","É":"q","ê":"q","ê":"q","â¡":"r","ï½":"r","Å":"r","á¹":"r","Å":"r","È":"r","È":"r","á¹":"r","á¹":"r","Å":"r","á¹":"r","É":"r","É½":"r","ê":"r","ê§":"r","ê":"r","â¢":"s","ï½":"s","Ã":"s","Å":"s","á¹¥":"s","Å":"s","á¹¡":"s","Å¡":"s","á¹§":"s","á¹£":"s","á¹©":"s","È":"s","Å":"s","È¿":"s","ê©":"s","ê":"s","áº":"s","â£":"t","ï½":"t","á¹«":"t","áº":"t","Å¥":"t","á¹­":"t","È":"t","Å£":"t","á¹±":"t","á¹¯":"t","Å§":"t","Æ­":"t","Ê":"t","â±¦":"t","ê":"t","ê©":"tz","â¤":"u","ï½":"u","Ã¹":"u","Ãº":"u","Ã»":"u","Å©":"u","á¹¹":"u","Å«":"u","á¹»":"u","Å­":"u","Ã¼":"u","Ç":"u","Ç":"u","Ç":"u","Ç":"u","á»§":"u","Å¯":"u","Å±":"u","Ç":"u","È":"u","È":"u","Æ°":"u","á»«":"u","á»©":"u","á»¯":"u","á»­":"u","á»±":"u","á»¥":"u","á¹³":"u","Å³":"u","á¹·":"u","á¹µ":"u","Ê":"u","â¥":"v","ï½":"v","á¹½":"v","á¹¿":"v","Ê":"v","ê":"v","Ê":"v","ê¡":"vy","â¦":"w","ï½":"w","áº":"w","áº":"w","Åµ":"w","áº":"w","áº":"w","áº":"w","áº":"w","â±³":"w","â§":"x","ï½":"x","áº":"x","áº":"x","â¨":"y","ï½":"y","á»³":"y","Ã½":"y","Å·":"y","á»¹":"y","È³":"y","áº":"y","Ã¿":"y","á»·":"y","áº":"y","á»µ":"y","Æ´":"y","É":"y","á»¿":"y","â©":"z","ï½":"z","Åº":"z","áº":"z","Å¼":"z","Å¾":"z","áº":"z","áº":"z","Æ¶":"z","È¥":"z","É":"z","â±¬":"z","ê£":"z","Î":"Î","Î":"Î","Î":"Î","Î":"Î","Îª":"Î","Î":"Î","Î":"Î¥","Î«":"Î¥","Î":"Î©","Î¬":"Î±","Î­":"Îµ","Î®":"Î·","Î¯":"Î¹","Ï":"Î¹","Î":"Î¹","Ï":"Î¿","Ï":"Ï","Ï":"Ï","Î°":"Ï","Ï":"Ï","Ï":"Ï","â":"'"}}),c.define("select2/data/base",["../utils"],function(n){function i(e,t){i.__super__.constructor.call(this)}return n.Extend(i,n.Observable),i.prototype.current=function(e){throw new Error("The `current` method must be defined in child classes.")},i.prototype.query=function(e,t){throw new Error("The `query` method must be defined in child classes.")},i.prototype.bind=function(e,t){},i.prototype.destroy=function(){},i.prototype.generateResultId=function(e,t){return e=e.id+"-result-",e+=n.generateChars(4),null!=t.id?e+="-"+t.id.toString():e+="-"+n.generateChars(4),e},i}),c.define("select2/data/select",["./base","../utils","jquery"],function(e,a,l){function n(e,t){this.$element=e,this.options=t,n.__super__.constructor.call(this)}return a.Extend(n,e),n.prototype.current=function(e){var t=this;e(Array.prototype.map.call(this.$element[0].querySelectorAll(":checked"),function(e){return t.item(l(e))}))},n.prototype.select=function(r){var e,s=this;if(r.selected=!0,null!=r.element&&"option"===r.element.tagName.toLowerCase())return r.element.selected=!0,void this.$element.trigger("input").trigger("change");this.$element.prop("multiple")?this.current(function(e){var t=[];(r=[r]).push.apply(r,e);for(var n=0;n<r.length;n++){var i=r[n].id;-1===t.indexOf(i)&&t.push(i)}s.$element.val(t),s.$element.trigger("input").trigger("change")}):(e=r.id,this.$element.val(e),this.$element.trigger("input").trigger("change"))},n.prototype.unselect=function(r){var s=this;if(this.$element.prop("multiple")){if(r.selected=!1,null!=r.element&&"option"===r.element.tagName.toLowerCase())return r.element.selected=!1,void this.$element.trigger("input").trigger("change");this.current(function(e){for(var t=[],n=0;n<e.length;n++){var i=e[n].id;i!==r.id&&-1===t.indexOf(i)&&t.push(i)}s.$element.val(t),s.$element.trigger("input").trigger("change")})}},n.prototype.bind=function(e,t){var n=this;(this.container=e).on("select",function(e){n.select(e.data)}),e.on("unselect",function(e){n.unselect(e.data)})},n.prototype.destroy=function(){this.$element.find("*").each(function(){a.RemoveData(this)})},n.prototype.query=function(t,e){var n=[],i=this;this.$element.children().each(function(){var e;"option"!==this.tagName.toLowerCase()&&"optgroup"!==this.tagName.toLowerCase()||(e=l(this),e=i.item(e),null!==(e=i.matches(t,e))&&n.push(e))}),e({results:n})},n.prototype.addOptions=function(e){this.$element.append(e)},n.prototype.option=function(e){var t;return e.children?(t=document.createElement("optgroup")).label=e.text:void 0!==(t=document.createElement("option")).textContent?t.textContent=e.text:t.innerText=e.text,void 0!==e.id&&(t.value=e.id),e.disabled&&(t.disabled=!0),e.selected&&(t.selected=!0),e.title&&(t.title=e.title),(e=this._normalizeItem(e)).element=t,a.StoreData(t,"data",e),l(t)},n.prototype.item=function(e){var t={};if(null!=(t=a.GetData(e[0],"data")))return t;var n=e[0];if("option"===n.tagName.toLowerCase())t={id:e.val(),text:e.text(),disabled:e.prop("disabled"),selected:e.prop("selected"),title:e.prop("title")};else if("optgroup"===n.tagName.toLowerCase()){for(var t={text:e.prop("label"),children:[],title:e.prop("title")},i=e.children("option"),r=[],s=0;s<i.length;s++){var o=l(i[s]),o=this.item(o);r.push(o)}t.children=r}return(t=this._normalizeItem(t)).element=e[0],a.StoreData(e[0],"data",t),t},n.prototype._normalizeItem=function(e){return e!==Object(e)&&(e={id:e,text:e}),null!=(e=l.extend({},{text:""},e)).id&&(e.id=e.id.toString()),null!=e.text&&(e.text=e.text.toString()),null==e._resultId&&e.id&&null!=this.container&&(e._resultId=this.generateResultId(this.container,e)),l.extend({},{selected:!1,disabled:!1},e)},n.prototype.matches=function(e,t){return this.options.get("matcher")(e,t)},n}),c.define("select2/data/array",["./select","../utils","jquery"],function(e,t,u){function i(e,t){this._dataToConvert=t.get("data")||[],i.__super__.constructor.call(this,e,t)}return t.Extend(i,e),i.prototype.bind=function(e,t){i.__super__.bind.call(this,e,t),this.addOptions(this.convertToOptions(this._dataToConvert))},i.prototype.select=function(n){var e;0===this.$element.find("option").filter(function(e,t){return t.value==n.id.toString()}).length&&(e=this.option(n),this.addOptions(e)),i.__super__.select.call(this,n)},i.prototype.convertToOptions=function(e){for(var t=this,n=this.$element.find("option"),i=n.map(function(){return t.item(u(this)).id}).get(),r=[],s=0;s<e.length;s++){var o,a,l=this._normalizeItem(e[s]);0<=i.indexOf(l.id)?(o=n.filter(function(e){return function(){return u(this).val()==e.id}}(l)),a=this.item(o),a=u.extend(!0,{},l,a),a=this.option(a),o.replaceWith(a)):(a=this.option(l),l.children&&(l=this.convertToOptions(l.children),a.append(l)),r.push(a))}return r},i}),c.define("select2/data/ajax",["./array","../utils","jquery"],function(e,t,s){function n(e,t){this.ajaxOptions=this._applyDefaults(t.get("ajax")),null!=this.ajaxOptions.processResults&&(this.processResults=this.ajaxOptions.processResults),n.__super__.constructor.call(this,e,t)}return t.Extend(n,e),n.prototype._applyDefaults=function(e){return s.extend({},{data:function(e){return s.extend({},e,{q:e.term})},transport:function(e,t,n){return(e=s.ajax(e)).then(t),e.fail(n),e}},e,!0)},n.prototype.processResults=function(e){return e},n.prototype.query=function(t,n){var i=this,r=(null!=this._request&&("function"==typeof this._request.abort&&this._request.abort(),this._request=null),s.extend({type:"GET"},this.ajaxOptions));function e(){var e=r.transport(r,function(e){e=i.processResults(e,t),i.options.get("debug")&&window.console&&console.error&&(e&&e.results&&Array.isArray(e.results)||console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")),n(e)},function(){"status"in e&&(0===e.status||"0"===e.status)||i.trigger("results:message",{message:"errorLoading"})});i._request=e}"function"==typeof r.url&&(r.url=r.url.call(this.$element,t)),"function"==typeof r.data&&(r.data=r.data.call(this.$element,t)),this.ajaxOptions.delay&&null!=t.term?(this._queryTimeout&&window.clearTimeout(this._queryTimeout),this._queryTimeout=window.setTimeout(e,this.ajaxOptions.delay)):e()},n}),c.define("select2/data/tags",["jquery"],function(t){function e(e,t,n){var i=n.get("tags"),r=n.get("createTag");if(void 0!==r&&(this.createTag=r),void 0!==(r=n.get("insertTag"))&&(this.insertTag=r),e.call(this,t,n),Array.isArray(i))for(var s=0;s<i.length;s++){var o=i[s],o=this._normalizeItem(o),o=this.option(o);this.$element.append(o)}}return e.prototype.query=function(e,u,c){var h=this;this._removeOldTags(),null!=u.term&&null==u.page?e.call(this,u,function e(t,n){for(var i=t.results,r=0;r<i.length;r++){var s=i[r],o=null!=s.children&&!e({results:s.children},!0);if((s.text||"").toUpperCase()===(u.term||"").toUpperCase()||o)return!n&&(t.data=i,void c(t))}if(n)return!0;var a,l=h.createTag(u);null!=l&&((a=h.option(l)).attr("data-select2-tag","true"),h.addOptions([a]),h.insertTag(i,l)),t.results=i,c(t)}):e.call(this,u,c)},e.prototype.createTag=function(e,t){return null==t.term||""===(t=t.term.trim())?null:{id:t,text:t}},e.prototype.insertTag=function(e,t,n){t.unshift(n)},e.prototype._removeOldTags=function(e){this.$element.find("option[data-select2-tag]").each(function(){this.selected||t(this).remove()})},e}),c.define("select2/data/tokenizer",["jquery"],function(u){function e(e,t,n){var i=n.get("tokenizer");void 0!==i&&(this.tokenizer=i),e.call(this,t,n)}return e.prototype.bind=function(e,t,n){e.call(this,t,n),this.$search=t.dropdown.$search||t.selection.$search||n.find(".select2-search__field")},e.prototype.query=function(e,t,n){var i=this,r=(t.term=t.term||"",this.tokenizer(t,this.options,function(e){var t,n=i._normalizeItem(e);i.$element.find("option").filter(function(){return u(this).val()===n.id}).length||((t=i.option(n)).attr("data-select2-tag",!0),i._removeOldTags(),i.addOptions([t])),i.trigger("select",{data:t=n})}));r.term!==t.term&&(this.$search.length&&(this.$search.val(r.term),this.$search.trigger("focus")),t.term=r.term),e.call(this,t,n)},e.prototype.tokenizer=function(e,t,n,i){for(var r=n.get("tokenSeparators")||[],s=t.term,o=0,a=this.createTag||function(e){return{id:e.term,text:e.term}};o<s.length;){var l=s[o];-1!==r.indexOf(l)?(l=s.substr(0,o),null!=(l=a(u.extend({},t,{term:l})))?(i(l),s=s.substr(o+1)||"",o=0):o++):o++}return{term:s}},e}),c.define("select2/data/minimumInputLength",[],function(){function e(e,t,n){this.minimumInputLength=n.get("minimumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){t.term=t.term||"",t.term.length<this.minimumInputLength?this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:t.term,params:t}}):e.call(this,t,n)},e}),c.define("select2/data/maximumInputLength",[],function(){function e(e,t,n){this.maximumInputLength=n.get("maximumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){t.term=t.term||"",0<this.maximumInputLength&&t.term.length>this.maximumInputLength?this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:t.term,params:t}}):e.call(this,t,n)},e}),c.define("select2/data/maximumSelectionLength",[],function(){function e(e,t,n){this.maximumSelectionLength=n.get("maximumSelectionLength"),e.call(this,t,n)}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("select",function(){i._checkIfMaximumSelected()})},e.prototype.query=function(e,t,n){var i=this;this._checkIfMaximumSelected(function(){e.call(i,t,n)})},e.prototype._checkIfMaximumSelected=function(e,t){var n=this;this.current(function(e){e=null!=e?e.length:0,0<n.maximumSelectionLength&&e>=n.maximumSelectionLength?n.trigger("results:message",{message:"maximumSelected",args:{maximum:n.maximumSelectionLength}}):t&&t()})},e}),c.define("select2/dropdown",["jquery","./utils"],function(t,e){function n(e,t){this.$element=e,this.options=t,n.__super__.constructor.call(this)}return e.Extend(n,e.Observable),n.prototype.render=function(){var e=t('<span class="select2-dropdown"><span class="select2-results"></span></span>');return e.attr("dir",this.options.get("dir")),this.$dropdown=e},n.prototype.bind=function(){},n.prototype.position=function(e,t){},n.prototype.destroy=function(){this.$dropdown.remove()},n}),c.define("select2/dropdown/search",["jquery"],function(s){function e(){}return e.prototype.render=function(e){var t=e.call(this),n=this.options.get("translations").get("search"),e=s('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></span>');return this.$searchContainer=e,this.$search=e.find("input"),this.$search.prop("autocomplete",this.options.get("autocomplete")),this.$search.attr("aria-label",n()),t.prepend(e),t},e.prototype.bind=function(e,t,n){var i=this,r=t.id+"-results";e.call(this,t,n),this.$search.on("keydown",function(e){i.trigger("keypress",e),i._keyUpPrevented=e.isDefaultPrevented()}),this.$search.on("input",function(e){s(this).off("keyup")}),this.$search.on("keyup input",function(e){i.handleSearch(e)}),t.on("open",function(){i.$search.attr("tabindex",0),i.$search.attr("aria-controls",r),i.$search.trigger("focus"),window.setTimeout(function(){i.$search.trigger("focus")},0)}),t.on("close",function(){i.$search.attr("tabindex",-1),i.$search.removeAttr("aria-controls"),i.$search.removeAttr("aria-activedescendant"),i.$search.val(""),i.$search.trigger("blur")}),t.on("focus",function(){t.isOpen()||i.$search.trigger("focus")}),t.on("results:all",function(e){null!=e.query.term&&""!==e.query.term||(i.showSearch(e)?i.$searchContainer[0].classList.remove("select2-search--hide"):i.$searchContainer[0].classList.add("select2-search--hide"))}),t.on("results:focus",function(e){e.data._resultId?i.$search.attr("aria-activedescendant",e.data._resultId):i.$search.removeAttr("aria-activedescendant")})},e.prototype.handleSearch=function(e){var t;this._keyUpPrevented||(t=this.$search.val(),this.trigger("query",{term:t})),this._keyUpPrevented=!1},e.prototype.showSearch=function(e,t){return!0},e}),c.define("select2/dropdown/hidePlaceholder",[],function(){function e(e,t,n,i){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n,i)}return e.prototype.append=function(e,t){t.results=this.removePlaceholder(t.results),e.call(this,t)},e.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t?{id:"",text:t}:t},e.prototype.removePlaceholder=function(e,t){for(var n=t.slice(0),i=t.length-1;0<=i;i--){var r=t[i];this.placeholder.id===r.id&&n.splice(i,1)}return n},e}),c.define("select2/dropdown/infiniteScroll",["jquery"],function(n){function e(e,t,n,i){this.lastParams={},e.call(this,t,n,i),this.$loadingMore=this.createLoadingMore(),this.loading=!1}return e.prototype.append=function(e,t){this.$loadingMore.remove(),this.loading=!1,e.call(this,t),this.showLoadingMore(t)&&(this.$results.append(this.$loadingMore),this.loadMoreIfNeeded())},e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("query",function(e){i.lastParams=e,i.loading=!0}),t.on("query:append",function(e){i.lastParams=e,i.loading=!0}),this.$results.on("scroll",this.loadMoreIfNeeded.bind(this))},e.prototype.loadMoreIfNeeded=function(){var e=n.contains(document.documentElement,this.$loadingMore[0]);!this.loading&&e&&(e=this.$results.offset().top+this.$results.outerHeight(!1),this.$loadingMore.offset().top+this.$loadingMore.outerHeight(!1)<=e+50&&this.loadMore())},e.prototype.loadMore=function(){this.loading=!0;var e=n.extend({},{page:1},this.lastParams);e.page++,this.trigger("query:append",e)},e.prototype.showLoadingMore=function(e,t){return t.pagination&&t.pagination.more},e.prototype.createLoadingMore=function(){var e=n('<li class="select2-results__option select2-results__option--load-more"role="option" aria-disabled="true"></li>'),t=this.options.get("translations").get("loadingMore");return e.html(t(this.lastParams)),e},e}),c.define("select2/dropdown/attachBody",["jquery","../utils"],function(c,o){function e(e,t,n){this.$dropdownParent=c(n.get("dropdownParent")||document.body),e.call(this,t,n)}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("open",function(){i._showDropdown(),i._attachPositioningHandler(t),i._bindContainerResultHandlers(t)}),t.on("close",function(){i._hideDropdown(),i._detachPositioningHandler(t)}),this.$dropdownContainer.on("mousedown",function(e){e.stopPropagation()})},e.prototype.destroy=function(e){e.call(this),this.$dropdownContainer.remove()},e.prototype.position=function(e,t,n){t.attr("class",n.attr("class")),t[0].classList.remove("select2"),t[0].classList.add("select2-container--open"),t.css({position:"absolute",top:-999999}),this.$container=n},e.prototype.render=function(e){var t=c("<span></span>"),e=e.call(this);return t.append(e),this.$dropdownContainer=t},e.prototype._hideDropdown=function(e){this.$dropdownContainer.detach()},e.prototype._bindContainerResultHandlers=function(e,t){var n;this._containerResultsHandlersBound||(n=this,t.on("results:all",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("results:append",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("results:message",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("select",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("unselect",function(){n._positionDropdown(),n._resizeDropdown()}),this._containerResultsHandlersBound=!0)},e.prototype._attachPositioningHandler=function(e,t){var n=this,i="scroll.select2."+t.id,r="resize.select2."+t.id,s="orientationchange.select2."+t.id;(t=this.$container.parents().filter(o.hasScroll)).each(function(){o.StoreData(this,"select2-scroll-position",{x:c(this).scrollLeft(),y:c(this).scrollTop()})}),t.on(i,function(e){var t=o.GetData(this,"select2-scroll-position");c(this).scrollTop(t.y)}),c(window).on(i+" "+r+" "+s,function(e){n._positionDropdown(),n._resizeDropdown()})},e.prototype._detachPositioningHandler=function(e,t){var n="scroll.select2."+t.id,i="resize.select2."+t.id,t="orientationchange.select2."+t.id;this.$container.parents().filter(o.hasScroll).off(n),c(window).off(n+" "+i+" "+t)},e.prototype._positionDropdown=function(){var e=c(window),t=this.$dropdown[0].classList.contains("select2-dropdown--above"),n=this.$dropdown[0].classList.contains("select2-dropdown--below"),i=null,r=this.$container.offset(),s=(r.bottom=r.top+this.$container.outerHeight(!1),{height:this.$container.outerHeight(!1)}),o=(s.top=r.top,s.bottom=r.top+s.height,this.$dropdown.outerHeight(!1)),a=e.scrollTop(),l=e.scrollTop()+e.height(),u=a<r.top-o,e=l>r.bottom+o,a={left:r.left,top:s.bottom};"static"===(l=this.$dropdownParent).css("position")&&(l=l.offsetParent()),r={top:0,left:0},(c.contains(document.body,l[0])||l[0].isConnected)&&(r=l.offset()),a.top-=r.top,a.left-=r.left,t||n||(i="below"),e||!u||t?!u&&e&&t&&(i="below"):i="above",("above"==i||t&&"below"!==i)&&(a.top=s.top-r.top-o),null!=i&&(this.$dropdown[0].classList.remove("select2-dropdown--below"),this.$dropdown[0].classList.remove("select2-dropdown--above"),this.$dropdown[0].classList.add("select2-dropdown--"+i),this.$container[0].classList.remove("select2-container--below"),this.$container[0].classList.remove("select2-container--above"),this.$container[0].classList.add("select2-container--"+i)),this.$dropdownContainer.css(a)},e.prototype._resizeDropdown=function(){var e={width:this.$container.outerWidth(!1)+"px"};this.options.get("dropdownAutoWidth")&&(e.minWidth=e.width,e.position="relative",e.width="auto"),this.$dropdown.css(e)},e.prototype._showDropdown=function(e){this.$dropdownContainer.appendTo(this.$dropdownParent),this._positionDropdown(),this._resizeDropdown()},e}),c.define("select2/dropdown/minimumResultsForSearch",[],function(){function e(e,t,n,i){this.minimumResultsForSearch=n.get("minimumResultsForSearch"),this.minimumResultsForSearch<0&&(this.minimumResultsForSearch=1/0),e.call(this,t,n,i)}return e.prototype.showSearch=function(e,t){return!(function e(t){for(var n=0,i=0;i<t.length;i++){var r=t[i];r.children?n+=e(r.children):n++}return n}(t.data.results)<this.minimumResultsForSearch)&&e.call(this,t)},e}),c.define("select2/dropdown/selectOnClose",["../utils"],function(i){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("close",function(e){i._handleSelectOnClose(e)})},e.prototype._handleSelectOnClose=function(e,t){if(t&&null!=t.originalSelect2Event){var n=t.originalSelect2Event;if("select"===n._type||"unselect"===n._type)return}(n=this.getHighlightedResults()).length<1||null!=(n=i.GetData(n[0],"data")).element&&n.element.selected||null==n.element&&n.selected||this.trigger("select",{data:n})},e}),c.define("select2/dropdown/closeOnSelect",[],function(){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("select",function(e){i._selectTriggered(e)}),t.on("unselect",function(e){i._selectTriggered(e)})},e.prototype._selectTriggered=function(e,t){var n=t.originalEvent;n&&(n.ctrlKey||n.metaKey)||this.trigger("close",{originalEvent:n,originalSelect2Event:t})},e}),c.define("select2/dropdown/dropdownCss",["../utils"],function(n){function e(){}return e.prototype.render=function(e){var t=e.call(this);return-1!==(e=this.options.get("dropdownCssClass")||"").indexOf(":all:")&&(e=e.replace(":all:",""),n.copyNonInternalCssClasses(t[0],this.$element[0])),t.addClass(e),t},e}),c.define("select2/dropdown/tagsSearchHighlight",["../utils"],function(i){function e(){}return e.prototype.highlightFirstItem=function(e){if(0<(t=this.$results.find(".select2-results__option--selectable:not(.select2-results__option--selected)")).length){var t,n=t.first();if((t=i.GetData(n[0],"data").element)&&t.getAttribute&&"true"===t.getAttribute("data-select2-tag"))return void n.trigger("mouseenter")}e.call(this)},e}),c.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(e){var t=e.input.length-e.maximum,e="Please delete "+t+" character";return 1!=t&&(e+="s"),e},inputTooShort:function(e){return"Please enter "+(e.minimum-e.input.length)+" or more characters"},loadingMore:function(){return"Loading more resultsâ¦"},maximumSelected:function(e){var t="You can only select "+e.maximum+" item";return 1!=e.maximum&&(t+="s"),t},noResults:function(){return"No results found"},searching:function(){return"Searchingâ¦"},removeAllItems:function(){return"Remove all items"},removeItem:function(){return"Remove item"},search:function(){return"Search"}}}),c.define("select2/defaults",["jquery","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/selectionCss","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./dropdown/dropdownCss","./dropdown/tagsSearchHighlight","./i18n/en"],function(l,s,o,a,u,c,h,d,f,p,g,t,m,v,y,_,b,w,x,C,k,E,D,T,S,A,O,I,N,L,e){function n(){this.reset()}return n.prototype.apply=function(e){var t;null==(e=l.extend(!0,{},this.defaults,e)).dataAdapter&&(null!=e.ajax?e.dataAdapter=y:null!=e.data?e.dataAdapter=v:e.dataAdapter=m,0<e.minimumInputLength&&(e.dataAdapter=p.Decorate(e.dataAdapter,w)),0<e.maximumInputLength&&(e.dataAdapter=p.Decorate(e.dataAdapter,x)),0<e.maximumSelectionLength&&(e.dataAdapter=p.Decorate(e.dataAdapter,C)),e.tags&&(e.dataAdapter=p.Decorate(e.dataAdapter,_)),null==e.tokenSeparators&&null==e.tokenizer||(e.dataAdapter=p.Decorate(e.dataAdapter,b))),null==e.resultsAdapter&&(e.resultsAdapter=s,null!=e.ajax&&(e.resultsAdapter=p.Decorate(e.resultsAdapter,T)),null!=e.placeholder&&(e.resultsAdapter=p.Decorate(e.resultsAdapter,D)),e.selectOnClose&&(e.resultsAdapter=p.Decorate(e.resultsAdapter,O)),e.tags&&(e.resultsAdapter=p.Decorate(e.resultsAdapter,L))),null==e.dropdownAdapter&&(e.multiple?e.dropdownAdapter=k:(t=p.Decorate(k,E),e.dropdownAdapter=t),0!==e.minimumResultsForSearch&&(e.dropdownAdapter=p.Decorate(e.dropdownAdapter,A)),e.closeOnSelect&&(e.dropdownAdapter=p.Decorate(e.dropdownAdapter,I)),null!=e.dropdownCssClass&&(e.dropdownAdapter=p.Decorate(e.dropdownAdapter,N)),e.dropdownAdapter=p.Decorate(e.dropdownAdapter,S)),null==e.selectionAdapter&&(e.multiple?e.selectionAdapter=a:e.selectionAdapter=o,null!=e.placeholder&&(e.selectionAdapter=p.Decorate(e.selectionAdapter,u)),e.allowClear&&(e.selectionAdapter=p.Decorate(e.selectionAdapter,c)),e.multiple&&(e.selectionAdapter=p.Decorate(e.selectionAdapter,h)),null!=e.selectionCssClass&&(e.selectionAdapter=p.Decorate(e.selectionAdapter,d)),e.selectionAdapter=p.Decorate(e.selectionAdapter,f)),e.language=this._resolveLanguage(e.language),e.language.push("en");for(var n=[],i=0;i<e.language.length;i++){var r=e.language[i];-1===n.indexOf(r)&&n.push(r)}return e.language=n,e.translations=this._processTranslations(e.language,e.debug),e},n.prototype.reset=function(){function a(e){return e.replace(/[^\u0000-\u007E]/g,function(e){return t[e]||e})}this.defaults={amdLanguageBase:"./i18n/",autocomplete:"off",closeOnSelect:!0,debug:!1,dropdownAutoWidth:!1,escapeMarkup:p.escapeMarkup,language:{},matcher:function e(t,n){if(null==t.term||""===t.term.trim())return n;if(n.children&&0<n.children.length){for(var i=l.extend(!0,{},n),r=n.children.length-1;0<=r;r--)null==e(t,n.children[r])&&i.children.splice(r,1);return 0<i.children.length?i:e(t,i)}var s=a(n.text).toUpperCase(),o=a(t.term).toUpperCase();return-1<s.indexOf(o)?n:null},minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:!1,scrollAfterSelect:!1,sorter:function(e){return e},templateResult:function(e){return e.text},templateSelection:function(e){return e.text},theme:"default",width:"resolve"}},n.prototype.applyFromElement=function(e,t){var n=e.language,i=this.defaults.language,r=t.prop("lang"),t=t.closest("[lang]").prop("lang"),t=Array.prototype.concat.call(this._resolveLanguage(r),this._resolveLanguage(n),this._resolveLanguage(i),this._resolveLanguage(t));return e.language=t,e},n.prototype._resolveLanguage=function(e){if(!e)return[];if(l.isEmptyObject(e))return[];if(l.isPlainObject(e))return[e];for(var t,n=Array.isArray(e)?e:[e],i=[],r=0;r<n.length;r++)i.push(n[r]),"string"==typeof n[r]&&0<n[r].indexOf("-")&&(t=n[r].split("-")[0],i.push(t));return i},n.prototype._processTranslations=function(e,t){for(var n=new g,i=0;i<e.length;i++){var r=new g,s=e[i];if("string"==typeof s)try{r=g.loadPath(s)}catch(e){try{s=this.defaults.amdLanguageBase+s,r=g.loadPath(s)}catch(e){t&&window.console&&console.warn&&console.warn('Select2: The language file for "'+s+'" could not be automatically loaded. A fallback will be used instead.')}}else r=l.isPlainObject(s)?new g(s):s;n.extend(r)}return n},n.prototype.set=function(e,t){var n={};n[l.camelCase(e)]=t,n=p._convertData(n),l.extend(!0,this.defaults,n)},new n}),c.define("select2/options",["jquery","./defaults","./utils"],function(u,n,c){function e(e,t){this.options=e,null!=t&&this.fromElement(t),null!=t&&(this.options=n.applyFromElement(this.options,t)),this.options=n.apply(this.options)}return e.prototype.fromElement=function(e){var t=["select2"],n=(null==this.options.multiple&&(this.options.multiple=e.prop("multiple")),null==this.options.disabled&&(this.options.disabled=e.prop("disabled")),null==this.options.autocomplete&&e.prop("autocomplete")&&(this.options.autocomplete=e.prop("autocomplete")),null==this.options.dir&&(e.prop("dir")?this.options.dir=e.prop("dir"):e.closest("[dir]").prop("dir")?this.options.dir=e.closest("[dir]").prop("dir"):this.options.dir="ltr"),e.prop("disabled",this.options.disabled),e.prop("multiple",this.options.multiple),c.GetData(e[0],"select2Tags")&&(this.options.debug&&window.console&&console.warn&&console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),c.StoreData(e[0],"data",c.GetData(e[0],"select2Tags")),c.StoreData(e[0],"tags",!0)),c.GetData(e[0],"ajaxUrl")&&(this.options.debug&&window.console&&console.warn&&console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),e.attr("ajax--url",c.GetData(e[0],"ajaxUrl")),c.StoreData(e[0],"ajax-Url",c.GetData(e[0],"ajaxUrl"))),{});function i(e,t){return t.toUpperCase()}for(var r=0;r<e[0].attributes.length;r++){var s,o=e[0].attributes[r].name;"data-"==o.substr(0,"data-".length)&&(o=o.substring("data-".length),s=c.GetData(e[0],o),n[o.replace(/-([a-z])/g,i)]=s)}u.fn.jquery&&"1."==u.fn.jquery.substr(0,2)&&e[0].dataset&&(n=u.extend(!0,{},e[0].dataset,n));var a,l=u.extend(!0,{},c.GetData(e[0]),n);for(a in l=c._convertData(l))-1<t.indexOf(a)||(u.isPlainObject(this.options[a])?u.extend(this.options[a],l[a]):this.options[a]=l[a]);return this},e.prototype.get=function(e){return this.options[e]},e.prototype.set=function(e,t){this.options[e]=t},e}),c.define("select2/core",["jquery","./options","./utils","./keys"],function(t,r,s,i){function o(e,t){null!=s.GetData(e[0],"select2")&&s.GetData(e[0],"select2").destroy(),this.$element=e,this.id=this._generateId(e),this.options=new r(t=t||{},e),o.__super__.constructor.call(this);var n=e.attr("tabindex")||0,i=(s.StoreData(e[0],"old-tabindex",n),e.attr("tabindex","-1"),t=this.options.get("dataAdapter"),this.dataAdapter=new t(e,this.options),n=this.render(),this._placeContainer(n),t=this.options.get("selectionAdapter"),this.selection=new t(e,this.options),this.$selection=this.selection.render(),this.selection.position(this.$selection,n),t=this.options.get("dropdownAdapter"),this.dropdown=new t(e,this.options),this.$dropdown=this.dropdown.render(),this.dropdown.position(this.$dropdown,n),n=this.options.get("resultsAdapter"),this.results=new n(e,this.options,this.dataAdapter),this.$results=this.results.render(),this.results.position(this.$results,this.$dropdown),this);this._bindAdapters(),this._registerDomEvents(),this._registerDataEvents(),this._registerSelectionEvents(),this._registerDropdownEvents(),this._registerResultsEvents(),this._registerEvents(),this.dataAdapter.current(function(e){i.trigger("selection:update",{data:e})}),e[0].classList.add("select2-hidden-accessible"),e.attr("aria-hidden","true"),this._syncAttributes(),s.StoreData(e[0],"select2",this),e.data("select2",this)}return s.Extend(o,s.Observable),o.prototype._generateId=function(e){return"select2-"+(null!=e.attr("id")?e.attr("id"):null!=e.attr("name")?e.attr("name")+"-"+s.generateChars(2):s.generateChars(4)).replace(/(:|\.|\[|\]|,)/g,"")},o.prototype._placeContainer=function(e){e.insertAfter(this.$element);var t=this._resolveWidth(this.$element,this.options.get("width"));null!=t&&e.css("width",t)},o.prototype._resolveWidth=function(e,t){var n,i=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if("resolve"==t)return null!=(n=this._resolveWidth(e,"style"))?n:this._resolveWidth(e,"element");if("element"==t)return(n=e.outerWidth(!1))<=0?"auto":n+"px";if("style"!=t)return"computedstyle"!=t?t:window.getComputedStyle(e[0]).width;if("string"!=typeof(e=e.attr("style")))return null;for(var r=e.split(";"),s=0,o=r.length;s<o;s+=1){var a=r[s].replace(/\s/g,"").match(i);if(null!==a&&1<=a.length)return a[1]}return null},o.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container),this.selection.bind(this,this.$container),this.dropdown.bind(this,this.$container),this.results.bind(this,this.$container)},o.prototype._registerDomEvents=function(){var t=this;this.$element.on("change.select2",function(){t.dataAdapter.current(function(e){t.trigger("selection:update",{data:e})})}),this.$element.on("focus.select2",function(e){t.trigger("focus",e)}),this._syncA=s.bind(this._syncAttributes,this),this._syncS=s.bind(this._syncSubtree,this),this._observer=new window.MutationObserver(function(e){t._syncA(),t._syncS(e)}),this._observer.observe(this.$element[0],{attributes:!0,childList:!0,subtree:!1})},o.prototype._registerDataEvents=function(){var n=this;this.dataAdapter.on("*",function(e,t){n.trigger(e,t)})},o.prototype._registerSelectionEvents=function(){var n=this,i=["toggle","focus"];this.selection.on("toggle",function(){n.toggleDropdown()}),this.selection.on("focus",function(e){n.focus(e)}),this.selection.on("*",function(e,t){-1===i.indexOf(e)&&n.trigger(e,t)})},o.prototype._registerDropdownEvents=function(){var n=this;this.dropdown.on("*",function(e,t){n.trigger(e,t)})},o.prototype._registerResultsEvents=function(){var n=this;this.results.on("*",function(e,t){n.trigger(e,t)})},o.prototype._registerEvents=function(){var n=this;this.on("open",function(){n.$container[0].classList.add("select2-container--open")}),this.on("close",function(){n.$container[0].classList.remove("select2-container--open")}),this.on("enable",function(){n.$container[0].classList.remove("select2-container--disabled")}),this.on("disable",function(){n.$container[0].classList.add("select2-container--disabled")}),this.on("blur",function(){n.$container[0].classList.remove("select2-container--focus")}),this.on("query",function(t){n.isOpen()||n.trigger("open",{}),this.dataAdapter.query(t,function(e){n.trigger("results:all",{data:e,query:t})})}),this.on("query:append",function(t){this.dataAdapter.query(t,function(e){n.trigger("results:append",{data:e,query:t})})}),this.on("keypress",function(e){var t=e.which;n.isOpen()?t===i.ESC||t===i.UP&&e.altKey?(n.close(e),e.preventDefault()):t===i.ENTER||t===i.TAB?(n.trigger("results:select",{}),e.preventDefault()):t===i.SPACE&&e.ctrlKey?(n.trigger("results:toggle",{}),e.preventDefault()):t===i.UP?(n.trigger("results:previous",{}),e.preventDefault()):t===i.DOWN&&(n.trigger("results:next",{}),e.preventDefault()):(t===i.ENTER||t===i.SPACE||t===i.DOWN&&e.altKey)&&(n.open(),e.preventDefault())})},o.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled")),this.isDisabled()?(this.isOpen()&&this.close(),this.trigger("disable",{})):this.trigger("enable",{})},o.prototype._isChangeMutation=function(e){var t=this;if(e.addedNodes&&0<e.addedNodes.length){for(var n=0;n<e.addedNodes.length;n++)if(e.addedNodes[n].selected)return!0}else{if(e.removedNodes&&0<e.removedNodes.length)return!0;if(Array.isArray(e))return e.some(function(e){return t._isChangeMutation(e)})}return!1},o.prototype._syncSubtree=function(e){var e=this._isChangeMutation(e),t=this;e&&this.dataAdapter.current(function(e){t.trigger("selection:update",{data:e})})},o.prototype.trigger=function(e,t){var n=o.__super__.trigger,i={open:"opening",close:"closing",select:"selecting",unselect:"unselecting",clear:"clearing"};if((void 0===t&&(t={}),e in i)&&(n.call(this,i[e],i={prevented:!1,name:e,args:t}),i.prevented))return void(t.prevented=!0);n.call(this,e,t)},o.prototype.toggleDropdown=function(){this.isDisabled()||(this.isOpen()?this.close():this.open())},o.prototype.open=function(){this.isOpen()||this.isDisabled()||this.trigger("query",{})},o.prototype.close=function(e){this.isOpen()&&this.trigger("close",{originalEvent:e})},o.prototype.isEnabled=function(){return!this.isDisabled()},o.prototype.isDisabled=function(){return this.options.get("disabled")},o.prototype.isOpen=function(){return this.$container[0].classList.contains("select2-container--open")},o.prototype.hasFocus=function(){return this.$container[0].classList.contains("select2-container--focus")},o.prototype.focus=function(e){this.hasFocus()||(this.$container[0].classList.add("select2-container--focus"),this.trigger("focus",{}))},o.prototype.enable=function(e){this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'),e=!(e=null==e||0===e.length?[!0]:e)[0],this.$element.prop("disabled",e)},o.prototype.data=function(){this.options.get("debug")&&0<arguments.length&&window.console&&console.warn&&console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var t=[];return this.dataAdapter.current(function(e){t=e}),t},o.prototype.val=function(e){if(this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'),null==e||0===e.length)return this.$element.val();e=e[0],Array.isArray(e)&&(e=e.map(function(e){return e.toString()})),this.$element.val(e).trigger("input").trigger("change")},o.prototype.destroy=function(){s.RemoveData(this.$container[0]),this.$container.remove(),this._observer.disconnect(),this._observer=null,this._syncA=null,this._syncS=null,this.$element.off(".select2"),this.$element.attr("tabindex",s.GetData(this.$element[0],"old-tabindex")),this.$element[0].classList.remove("select2-hidden-accessible"),this.$element.attr("aria-hidden","false"),s.RemoveData(this.$element[0]),this.$element.removeData("select2"),this.dataAdapter.destroy(),this.selection.destroy(),this.dropdown.destroy(),this.results.destroy(),this.dataAdapter=null,this.selection=null,this.dropdown=null,this.results=null},o.prototype.render=function(){var e=t('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return e.attr("dir",this.options.get("dir")),this.$container=e,this.$container[0].classList.add("select2-container--"+this.options.get("theme")),s.StoreData(e[0],"element",this.$element),e},o}),c.define("select2/dropdown/attachContainer",[],function(){function e(e,t,n){e.call(this,t,n)}return e.prototype.position=function(e,t,n){n.find(".dropdown-wrapper").append(t),t[0].classList.add("select2-dropdown--below"),n[0].classList.add("select2-container--below")},e}),c.define("select2/dropdown/stopPropagation",[],function(){function e(){}return e.prototype.bind=function(e,t,n){e.call(this,t,n),this.$dropdown.on(["blur","change","click","dblclick","focus","focusin","focusout","input","keydown","keyup","keypress","mousedown","mouseenter","mouseleave","mousemove","mouseover","mouseup","search","touchend","touchstart"].join(" "),function(e){e.stopPropagation()})},e}),c.define("select2/selection/stopPropagation",[],function(){function e(){}return e.prototype.bind=function(e,t,n){e.call(this,t,n),this.$selection.on(["blur","change","click","dblclick","focus","focusin","focusout","input","keydown","keyup","keypress","mousedown","mouseenter","mouseleave","mousemove","mouseover","mouseup","search","touchend","touchstart"].join(" "),function(e){e.stopPropagation()})},e}),a=function(c){var h,d,e=["wheel","mousewheel","DOMMouseScroll","MozMousePixelScroll"],t="onwheel"in document||9<=document.documentMode?["wheel"]:["mousewheel","DomMouseScroll","MozMousePixelScroll"],f=Array.prototype.slice;if(c.event.fixHooks)for(var n=e.length;n;)c.event.fixHooks[e[--n]]=c.event.mouseHooks;var p=c.event.special.mousewheel={version:"3.1.12",setup:function(){if(this.addEventListener)for(var e=t.length;e;)this.addEventListener(t[--e],i,!1);else this.onmousewheel=i;c.data(this,"mousewheel-line-height",p.getLineHeight(this)),c.data(this,"mousewheel-page-height",p.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var e=t.length;e;)this.removeEventListener(t[--e],i,!1);else this.onmousewheel=null;c.removeData(this,"mousewheel-line-height"),c.removeData(this,"mousewheel-page-height")},getLineHeight:function(e){var t=c(e);return(e=t["offsetParent"in c.fn?"offsetParent":"parent"]()).length||(e=c("body")),parseInt(e.css("fontSize"),10)||parseInt(t.css("fontSize"),10)||16},getPageHeight:function(e){return c(e).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};function i(e){var t,n=e||window.event,i=f.call(arguments,1),r=0,s=0,o=0,a=0,l=0,u=0;if((e=c.event.fix(n)).type="mousewheel","detail"in n&&(o=-1*n.detail),"wheelDelta"in n&&(o=n.wheelDelta),"wheelDeltaY"in n&&(o=n.wheelDeltaY),"wheelDeltaX"in n&&(s=-1*n.wheelDeltaX),"axis"in n&&n.axis===n.HORIZONTAL_AXIS&&(s=-1*o,o=0),r=0===o?s:o,"deltaY"in n&&(r=o=-1*n.deltaY),"deltaX"in n&&(s=n.deltaX,0===o&&(r=-1*s)),0!==o||0!==s)return 1===n.deltaMode?(r*=t=c.data(this,"mousewheel-line-height"),o*=t,s*=t):2===n.deltaMode&&(r*=t=c.data(this,"mousewheel-page-height"),o*=t,s*=t),a=Math.max(Math.abs(o),Math.abs(s)),(!d||a<d)&&m(n,d=a)&&(d/=40),m(n,a)&&(r/=40,s/=40,o/=40),r=Math[1<=r?"floor":"ceil"](r/d),s=Math[1<=s?"floor":"ceil"](s/d),o=Math[1<=o?"floor":"ceil"](o/d),p.settings.normalizeOffset&&this.getBoundingClientRect&&(a=this.getBoundingClientRect(),l=e.clientX-a.left,u=e.clientY-a.top),e.deltaX=s,e.deltaY=o,e.deltaFactor=d,e.offsetX=l,e.offsetY=u,e.deltaMode=0,i.unshift(e,r,s,o),h&&clearTimeout(h),h=setTimeout(g,200),(c.event.dispatch||c.event.handle).apply(this,i)}function g(){d=null}function m(e,t){return p.settings.adjustOldDeltas&&"mousewheel"===e.type&&t%120==0}c.fn.extend({mousewheel:function(e){return e?this.bind("mousewheel",e):this.trigger("mousewheel")},unmousewheel:function(e){return this.unbind("mousewheel",e)}})},"function"==typeof c.define&&c.define.amd?c.define("jquery-mousewheel",["jquery"],a):"object"==typeof exports?module.exports=a:a(t),c.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults","./select2/utils"],function(r,e,s,t,o){var a;return null==r.fn.select2&&(a=["open","close","destroy"],r.fn.select2=function(t){if("object"==typeof(t=t||{}))return this.each(function(){var e=r.extend(!0,{},t);new s(r(this),e)}),this;if("string"!=typeof t)throw new Error("Invalid arguments for Select2: "+t);var n,i=Array.prototype.slice.call(arguments,1);return this.each(function(){var e=o.GetData(this,"select2");null==e&&window.console&&console.error&&console.error("The select2('"+t+"') method was called on an element that is not using Select2."),n=e[t].apply(e,i)}),-1<a.indexOf(t)?this:n}),null==r.fn.select2.defaults&&(r.fn.select2.defaults=t),s});var e,n,d,s,o,f,p,g,m,v,y,i,r,_,a={define:c.define,require:c.require};function b(e,t){return i.call(e,t)}function l(e,t){var n,i,r,s,o,a,l,u,c,h,d=t&&t.split("/"),f=v.map,p=f&&f["*"]||{};if(e){for(t=(e=e.split("/")).length-1,v.nodeIdCompat&&_.test(e[t])&&(e[t]=e[t].replace(_,"")),"."===e[0].charAt(0)&&d&&(e=d.slice(0,d.length-1).concat(e)),u=0;u<e.length;u++)"."===(h=e[u])?(e.splice(u,1),--u):".."!==h||0===u||1===u&&".."===e[2]||".."===e[u-1]||0<u&&(e.splice(u-1,2),u-=2);e=e.join("/")}if((d||p)&&f){for(u=(n=e.split("/")).length;0<u;--u){if(i=n.slice(0,u).join("/"),d)for(c=d.length;0<c;--c)if(r=(r=f[d.slice(0,c).join("/")])&&r[i]){s=r,o=u;break}if(s)break;!a&&p&&p[i]&&(a=p[i],l=u)}!s&&a&&(s=a,o=l),s&&(n.splice(0,o,s),e=n.join("/"))}return e}function w(t,n){return function(){var e=r.call(arguments,0);return"string"!=typeof e[0]&&1===e.length&&e.push(null),o.apply(d,e.concat([t,n]))}}function x(e){var t;if(b(m,e)&&(t=m[e],delete m[e],y[e]=!0,s.apply(d,t)),b(g,e)||b(y,e))return g[e];throw new Error("No "+e)}function u(e){var t,n=e?e.indexOf("!"):-1;return-1<n&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function C(e){return e?u(e):[]}var c=a.require("jquery.select2");return t.fn.select2.amd=a,c});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
